/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.form.builder.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gov.omsb.form.builder.model.RangeOptionMaster;
import gov.omsb.form.builder.model.RangeOptionMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RangeOptionMaster service. Represents a row in the &quot;df_range_option_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RangeOptionMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RangeOptionMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RangeOptionMasterImpl
 * @generated
 */
public class RangeOptionMasterModelImpl
	extends BaseModelImpl<RangeOptionMaster> implements RangeOptionMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a range option master model instance should use the <code>RangeOptionMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "df_range_option_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"rangeOptionId", Types.BIGINT},
		{"rangeOptionName", Types.VARCHAR}, {"rangeOptions", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rangeOptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rangeOptionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rangeOptions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table df_range_option_master (uuid_ VARCHAR(75) null,rangeOptionId LONG not null primary key,rangeOptionName VARCHAR(200) null,rangeOptions STRING null,companyId LONG,groupId LONG,createdBy LONG,modifiedBy LONG,createdDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table df_range_option_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rangeOptionMaster.rangeOptionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY df_range_option_master.rangeOptionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RANGEOPTIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RangeOptionMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rangeOptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRangeOptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rangeOptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RangeOptionMaster.class;
	}

	@Override
	public String getModelClassName() {
		return RangeOptionMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RangeOptionMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RangeOptionMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RangeOptionMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RangeOptionMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RangeOptionMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RangeOptionMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RangeOptionMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RangeOptionMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RangeOptionMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RangeOptionMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RangeOptionMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RangeOptionMaster, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<RangeOptionMaster, Object>>();
		Map<String, BiConsumer<RangeOptionMaster, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<RangeOptionMaster, ?>>();

		attributeGetterFunctions.put("uuid", RangeOptionMaster::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<RangeOptionMaster, String>)RangeOptionMaster::setUuid);
		attributeGetterFunctions.put(
			"rangeOptionId", RangeOptionMaster::getRangeOptionId);
		attributeSetterBiConsumers.put(
			"rangeOptionId",
			(BiConsumer<RangeOptionMaster, Long>)
				RangeOptionMaster::setRangeOptionId);
		attributeGetterFunctions.put(
			"rangeOptionName", RangeOptionMaster::getRangeOptionName);
		attributeSetterBiConsumers.put(
			"rangeOptionName",
			(BiConsumer<RangeOptionMaster, String>)
				RangeOptionMaster::setRangeOptionName);
		attributeGetterFunctions.put(
			"rangeOptions", RangeOptionMaster::getRangeOptions);
		attributeSetterBiConsumers.put(
			"rangeOptions",
			(BiConsumer<RangeOptionMaster, String>)
				RangeOptionMaster::setRangeOptions);
		attributeGetterFunctions.put(
			"companyId", RangeOptionMaster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RangeOptionMaster, Long>)
				RangeOptionMaster::setCompanyId);
		attributeGetterFunctions.put("groupId", RangeOptionMaster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RangeOptionMaster, Long>)RangeOptionMaster::setGroupId);
		attributeGetterFunctions.put(
			"createdBy", RangeOptionMaster::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<RangeOptionMaster, Long>)
				RangeOptionMaster::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", RangeOptionMaster::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<RangeOptionMaster, Long>)
				RangeOptionMaster::setModifiedBy);
		attributeGetterFunctions.put(
			"createdDate", RangeOptionMaster::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<RangeOptionMaster, Date>)
				RangeOptionMaster::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", RangeOptionMaster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RangeOptionMaster, Date>)
				RangeOptionMaster::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getRangeOptionId() {
		return _rangeOptionId;
	}

	@Override
	public void setRangeOptionId(long rangeOptionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rangeOptionId = rangeOptionId;
	}

	@Override
	public String getRangeOptionName() {
		if (_rangeOptionName == null) {
			return "";
		}
		else {
			return _rangeOptionName;
		}
	}

	@Override
	public void setRangeOptionName(String rangeOptionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rangeOptionName = rangeOptionName;
	}

	@Override
	public String getRangeOptions() {
		if (_rangeOptions == null) {
			return "";
		}
		else {
			return _rangeOptions;
		}
	}

	@Override
	public void setRangeOptions(String rangeOptions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rangeOptions = rangeOptions;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RangeOptionMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RangeOptionMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RangeOptionMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RangeOptionMasterImpl rangeOptionMasterImpl =
			new RangeOptionMasterImpl();

		rangeOptionMasterImpl.setUuid(getUuid());
		rangeOptionMasterImpl.setRangeOptionId(getRangeOptionId());
		rangeOptionMasterImpl.setRangeOptionName(getRangeOptionName());
		rangeOptionMasterImpl.setRangeOptions(getRangeOptions());
		rangeOptionMasterImpl.setCompanyId(getCompanyId());
		rangeOptionMasterImpl.setGroupId(getGroupId());
		rangeOptionMasterImpl.setCreatedBy(getCreatedBy());
		rangeOptionMasterImpl.setModifiedBy(getModifiedBy());
		rangeOptionMasterImpl.setCreatedDate(getCreatedDate());
		rangeOptionMasterImpl.setModifiedDate(getModifiedDate());

		rangeOptionMasterImpl.resetOriginalValues();

		return rangeOptionMasterImpl;
	}

	@Override
	public RangeOptionMaster cloneWithOriginalValues() {
		RangeOptionMasterImpl rangeOptionMasterImpl =
			new RangeOptionMasterImpl();

		rangeOptionMasterImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		rangeOptionMasterImpl.setRangeOptionId(
			this.<Long>getColumnOriginalValue("rangeOptionId"));
		rangeOptionMasterImpl.setRangeOptionName(
			this.<String>getColumnOriginalValue("rangeOptionName"));
		rangeOptionMasterImpl.setRangeOptions(
			this.<String>getColumnOriginalValue("rangeOptions"));
		rangeOptionMasterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		rangeOptionMasterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		rangeOptionMasterImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		rangeOptionMasterImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		rangeOptionMasterImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		rangeOptionMasterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return rangeOptionMasterImpl;
	}

	@Override
	public int compareTo(RangeOptionMaster rangeOptionMaster) {
		long primaryKey = rangeOptionMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RangeOptionMaster)) {
			return false;
		}

		RangeOptionMaster rangeOptionMaster = (RangeOptionMaster)object;

		long primaryKey = rangeOptionMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RangeOptionMaster> toCacheModel() {
		RangeOptionMasterCacheModel rangeOptionMasterCacheModel =
			new RangeOptionMasterCacheModel();

		rangeOptionMasterCacheModel.uuid = getUuid();

		String uuid = rangeOptionMasterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rangeOptionMasterCacheModel.uuid = null;
		}

		rangeOptionMasterCacheModel.rangeOptionId = getRangeOptionId();

		rangeOptionMasterCacheModel.rangeOptionName = getRangeOptionName();

		String rangeOptionName = rangeOptionMasterCacheModel.rangeOptionName;

		if ((rangeOptionName != null) && (rangeOptionName.length() == 0)) {
			rangeOptionMasterCacheModel.rangeOptionName = null;
		}

		rangeOptionMasterCacheModel.rangeOptions = getRangeOptions();

		String rangeOptions = rangeOptionMasterCacheModel.rangeOptions;

		if ((rangeOptions != null) && (rangeOptions.length() == 0)) {
			rangeOptionMasterCacheModel.rangeOptions = null;
		}

		rangeOptionMasterCacheModel.companyId = getCompanyId();

		rangeOptionMasterCacheModel.groupId = getGroupId();

		rangeOptionMasterCacheModel.createdBy = getCreatedBy();

		rangeOptionMasterCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			rangeOptionMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			rangeOptionMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rangeOptionMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rangeOptionMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return rangeOptionMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RangeOptionMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RangeOptionMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RangeOptionMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RangeOptionMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RangeOptionMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RangeOptionMaster.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _rangeOptionId;
	private String _rangeOptionName;
	private String _rangeOptions;
	private long _companyId;
	private long _groupId;
	private long _createdBy;
	private long _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RangeOptionMaster, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RangeOptionMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("rangeOptionId", _rangeOptionId);
		_columnOriginalValues.put("rangeOptionName", _rangeOptionName);
		_columnOriginalValues.put("rangeOptions", _rangeOptions);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("rangeOptionId", 2L);

		columnBitmasks.put("rangeOptionName", 4L);

		columnBitmasks.put("rangeOptions", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("groupId", 32L);

		columnBitmasks.put("createdBy", 64L);

		columnBitmasks.put("modifiedBy", 128L);

		columnBitmasks.put("createdDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RangeOptionMaster _escapedModel;

}