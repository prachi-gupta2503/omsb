/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.form.builder.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import gov.omsb.form.builder.model.FormDefinition;
import gov.omsb.form.builder.model.FormDefinitionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FormDefinition service. Represents a row in the &quot;df_form_definition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FormDefinitionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormDefinitionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FormDefinitionImpl
 * @generated
 */
public class FormDefinitionModelImpl
	extends BaseModelImpl<FormDefinition> implements FormDefinitionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form definition model instance should use the <code>FormDefinition</code> interface instead.
	 */
	public static final String TABLE_NAME = "df_form_definition";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"formDefinitionId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"formName", Types.VARCHAR}, {"formTitle", Types.VARCHAR},
		{"formDescription", Types.VARCHAR}, {"formVersion", Types.VARCHAR},
		{"formConfig", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("formName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formConfig", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table df_form_definition (uuid_ VARCHAR(75) null,formDefinitionId LONG not null primary key,groupId LONG,companyId LONG,createdBy LONG,modifiedBy LONG,createdDate DATE null,modifiedDate DATE null,formName VARCHAR(200) null,formTitle VARCHAR(200) null,formDescription STRING null,formVersion VARCHAR(75) null,formConfig STRING null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table df_form_definition";

	public static final String ORDER_BY_JPQL =
		" ORDER BY formDefinition.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY df_form_definition.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FORMDEFINITIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FORMNAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FORMVERSION_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FormDefinitionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formDefinitionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormDefinitionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formDefinitionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FormDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return FormDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FormDefinition, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FormDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FormDefinition, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FormDefinition)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FormDefinition, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FormDefinition, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FormDefinition)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FormDefinition, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FormDefinition, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FormDefinition, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FormDefinition, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FormDefinition, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FormDefinition, Object>>();
		Map<String, BiConsumer<FormDefinition, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FormDefinition, ?>>();

		attributeGetterFunctions.put("uuid", FormDefinition::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FormDefinition, String>)FormDefinition::setUuid);
		attributeGetterFunctions.put(
			"formDefinitionId", FormDefinition::getFormDefinitionId);
		attributeSetterBiConsumers.put(
			"formDefinitionId",
			(BiConsumer<FormDefinition, Long>)
				FormDefinition::setFormDefinitionId);
		attributeGetterFunctions.put("groupId", FormDefinition::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FormDefinition, Long>)FormDefinition::setGroupId);
		attributeGetterFunctions.put("companyId", FormDefinition::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FormDefinition, Long>)FormDefinition::setCompanyId);
		attributeGetterFunctions.put("createdBy", FormDefinition::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<FormDefinition, Long>)FormDefinition::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", FormDefinition::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FormDefinition, Long>)FormDefinition::setModifiedBy);
		attributeGetterFunctions.put(
			"createdDate", FormDefinition::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<FormDefinition, Date>)FormDefinition::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", FormDefinition::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FormDefinition, Date>)FormDefinition::setModifiedDate);
		attributeGetterFunctions.put("formName", FormDefinition::getFormName);
		attributeSetterBiConsumers.put(
			"formName",
			(BiConsumer<FormDefinition, String>)FormDefinition::setFormName);
		attributeGetterFunctions.put("formTitle", FormDefinition::getFormTitle);
		attributeSetterBiConsumers.put(
			"formTitle",
			(BiConsumer<FormDefinition, String>)FormDefinition::setFormTitle);
		attributeGetterFunctions.put(
			"formDescription", FormDefinition::getFormDescription);
		attributeSetterBiConsumers.put(
			"formDescription",
			(BiConsumer<FormDefinition, String>)
				FormDefinition::setFormDescription);
		attributeGetterFunctions.put(
			"formVersion", FormDefinition::getFormVersion);
		attributeSetterBiConsumers.put(
			"formVersion",
			(BiConsumer<FormDefinition, String>)FormDefinition::setFormVersion);
		attributeGetterFunctions.put(
			"formConfig", FormDefinition::getFormConfig);
		attributeSetterBiConsumers.put(
			"formConfig",
			(BiConsumer<FormDefinition, String>)FormDefinition::setFormConfig);
		attributeGetterFunctions.put("status", FormDefinition::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FormDefinition, Integer>)FormDefinition::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FormDefinition::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FormDefinition, Long>)
				FormDefinition::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", FormDefinition::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<FormDefinition, String>)
				FormDefinition::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", FormDefinition::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FormDefinition, Date>)FormDefinition::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getFormDefinitionId() {
		return _formDefinitionId;
	}

	@Override
	public void setFormDefinitionId(long formDefinitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formDefinitionId = formDefinitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFormDefinitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("formDefinitionId"));
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getFormName() {
		if (_formName == null) {
			return "";
		}
		else {
			return _formName;
		}
	}

	@Override
	public void setFormName(String formName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formName = formName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFormName() {
		return getColumnOriginalValue("formName");
	}

	@Override
	public String getFormTitle() {
		if (_formTitle == null) {
			return "";
		}
		else {
			return _formTitle;
		}
	}

	@Override
	public void setFormTitle(String formTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formTitle = formTitle;
	}

	@Override
	public String getFormDescription() {
		if (_formDescription == null) {
			return "";
		}
		else {
			return _formDescription;
		}
	}

	@Override
	public void setFormDescription(String formDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formDescription = formDescription;
	}

	@Override
	public String getFormVersion() {
		if (_formVersion == null) {
			return "";
		}
		else {
			return _formVersion;
		}
	}

	@Override
	public void setFormVersion(String formVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formVersion = formVersion;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFormVersion() {
		return getColumnOriginalValue("formVersion");
	}

	@Override
	public String getFormConfig() {
		if (_formConfig == null) {
			return "";
		}
		else {
			return _formConfig;
		}
	}

	@Override
	public void setFormConfig(String formConfig) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formConfig = formConfig;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FormDefinition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FormDefinition toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FormDefinition>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormDefinitionImpl formDefinitionImpl = new FormDefinitionImpl();

		formDefinitionImpl.setUuid(getUuid());
		formDefinitionImpl.setFormDefinitionId(getFormDefinitionId());
		formDefinitionImpl.setGroupId(getGroupId());
		formDefinitionImpl.setCompanyId(getCompanyId());
		formDefinitionImpl.setCreatedBy(getCreatedBy());
		formDefinitionImpl.setModifiedBy(getModifiedBy());
		formDefinitionImpl.setCreatedDate(getCreatedDate());
		formDefinitionImpl.setModifiedDate(getModifiedDate());
		formDefinitionImpl.setFormName(getFormName());
		formDefinitionImpl.setFormTitle(getFormTitle());
		formDefinitionImpl.setFormDescription(getFormDescription());
		formDefinitionImpl.setFormVersion(getFormVersion());
		formDefinitionImpl.setFormConfig(getFormConfig());
		formDefinitionImpl.setStatus(getStatus());
		formDefinitionImpl.setStatusByUserId(getStatusByUserId());
		formDefinitionImpl.setStatusByUserName(getStatusByUserName());
		formDefinitionImpl.setStatusDate(getStatusDate());

		formDefinitionImpl.resetOriginalValues();

		return formDefinitionImpl;
	}

	@Override
	public FormDefinition cloneWithOriginalValues() {
		FormDefinitionImpl formDefinitionImpl = new FormDefinitionImpl();

		formDefinitionImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		formDefinitionImpl.setFormDefinitionId(
			this.<Long>getColumnOriginalValue("formDefinitionId"));
		formDefinitionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		formDefinitionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		formDefinitionImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		formDefinitionImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		formDefinitionImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		formDefinitionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		formDefinitionImpl.setFormName(
			this.<String>getColumnOriginalValue("formName"));
		formDefinitionImpl.setFormTitle(
			this.<String>getColumnOriginalValue("formTitle"));
		formDefinitionImpl.setFormDescription(
			this.<String>getColumnOriginalValue("formDescription"));
		formDefinitionImpl.setFormVersion(
			this.<String>getColumnOriginalValue("formVersion"));
		formDefinitionImpl.setFormConfig(
			this.<String>getColumnOriginalValue("formConfig"));
		formDefinitionImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		formDefinitionImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		formDefinitionImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		formDefinitionImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return formDefinitionImpl;
	}

	@Override
	public int compareTo(FormDefinition formDefinition) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreatedDate(), formDefinition.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FormDefinition)) {
			return false;
		}

		FormDefinition formDefinition = (FormDefinition)object;

		long primaryKey = formDefinition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FormDefinition> toCacheModel() {
		FormDefinitionCacheModel formDefinitionCacheModel =
			new FormDefinitionCacheModel();

		formDefinitionCacheModel.uuid = getUuid();

		String uuid = formDefinitionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			formDefinitionCacheModel.uuid = null;
		}

		formDefinitionCacheModel.formDefinitionId = getFormDefinitionId();

		formDefinitionCacheModel.groupId = getGroupId();

		formDefinitionCacheModel.companyId = getCompanyId();

		formDefinitionCacheModel.createdBy = getCreatedBy();

		formDefinitionCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			formDefinitionCacheModel.createdDate = createdDate.getTime();
		}
		else {
			formDefinitionCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			formDefinitionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			formDefinitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		formDefinitionCacheModel.formName = getFormName();

		String formName = formDefinitionCacheModel.formName;

		if ((formName != null) && (formName.length() == 0)) {
			formDefinitionCacheModel.formName = null;
		}

		formDefinitionCacheModel.formTitle = getFormTitle();

		String formTitle = formDefinitionCacheModel.formTitle;

		if ((formTitle != null) && (formTitle.length() == 0)) {
			formDefinitionCacheModel.formTitle = null;
		}

		formDefinitionCacheModel.formDescription = getFormDescription();

		String formDescription = formDefinitionCacheModel.formDescription;

		if ((formDescription != null) && (formDescription.length() == 0)) {
			formDefinitionCacheModel.formDescription = null;
		}

		formDefinitionCacheModel.formVersion = getFormVersion();

		String formVersion = formDefinitionCacheModel.formVersion;

		if ((formVersion != null) && (formVersion.length() == 0)) {
			formDefinitionCacheModel.formVersion = null;
		}

		formDefinitionCacheModel.formConfig = getFormConfig();

		String formConfig = formDefinitionCacheModel.formConfig;

		if ((formConfig != null) && (formConfig.length() == 0)) {
			formDefinitionCacheModel.formConfig = null;
		}

		formDefinitionCacheModel.status = getStatus();

		formDefinitionCacheModel.statusByUserId = getStatusByUserId();

		formDefinitionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = formDefinitionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			formDefinitionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			formDefinitionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			formDefinitionCacheModel.statusDate = Long.MIN_VALUE;
		}

		return formDefinitionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FormDefinition, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FormDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FormDefinition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FormDefinition)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FormDefinition>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FormDefinition.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _formDefinitionId;
	private long _groupId;
	private long _companyId;
	private long _createdBy;
	private long _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _formName;
	private String _formTitle;
	private String _formDescription;
	private String _formVersion;
	private String _formConfig;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FormDefinition, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FormDefinition)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("formDefinitionId", _formDefinitionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("formName", _formName);
		_columnOriginalValues.put("formTitle", _formTitle);
		_columnOriginalValues.put("formDescription", _formDescription);
		_columnOriginalValues.put("formVersion", _formVersion);
		_columnOriginalValues.put("formConfig", _formConfig);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("formDefinitionId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createdBy", 16L);

		columnBitmasks.put("modifiedBy", 32L);

		columnBitmasks.put("createdDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("formName", 256L);

		columnBitmasks.put("formTitle", 512L);

		columnBitmasks.put("formDescription", 1024L);

		columnBitmasks.put("formVersion", 2048L);

		columnBitmasks.put("formConfig", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("statusByUserId", 16384L);

		columnBitmasks.put("statusByUserName", 32768L);

		columnBitmasks.put("statusDate", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FormDefinition _escapedModel;

}