/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.form.builder.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import gov.omsb.form.builder.model.FormRecordEntry;
import gov.omsb.form.builder.model.FormRecordEntryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FormRecordEntry service. Represents a row in the &quot;df_form_record_entry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FormRecordEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormRecordEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FormRecordEntryImpl
 * @generated
 */
public class FormRecordEntryModelImpl
	extends BaseModelImpl<FormRecordEntry> implements FormRecordEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form record entry model instance should use the <code>FormRecordEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "df_form_record_entry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"formRecordEntryId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"formDefinitionId", Types.BIGINT}, {"recordId", Types.BIGINT},
		{"dfTableName", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formRecordEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("formDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("recordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dfTableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table df_form_record_entry (uuid_ VARCHAR(75) null,formRecordEntryId LONG not null primary key,groupId LONG,companyId LONG,createdBy LONG,modifiedBy LONG,createdDate DATE null,modifiedDate DATE null,formDefinitionId LONG,recordId LONG,dfTableName VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table df_form_record_entry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY formRecordEntry.formRecordEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY df_form_record_entry.formRecordEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FORMDEFINITIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RECORDID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FORMRECORDENTRYID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FormRecordEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formRecordEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormRecordEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formRecordEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FormRecordEntry.class;
	}

	@Override
	public String getModelClassName() {
		return FormRecordEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FormRecordEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FormRecordEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FormRecordEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FormRecordEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FormRecordEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FormRecordEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FormRecordEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FormRecordEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FormRecordEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FormRecordEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FormRecordEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FormRecordEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<FormRecordEntry, Object>>();
		Map<String, BiConsumer<FormRecordEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FormRecordEntry, ?>>();

		attributeGetterFunctions.put("uuid", FormRecordEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FormRecordEntry, String>)FormRecordEntry::setUuid);
		attributeGetterFunctions.put(
			"formRecordEntryId", FormRecordEntry::getFormRecordEntryId);
		attributeSetterBiConsumers.put(
			"formRecordEntryId",
			(BiConsumer<FormRecordEntry, Long>)
				FormRecordEntry::setFormRecordEntryId);
		attributeGetterFunctions.put("groupId", FormRecordEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FormRecordEntry, Long>)FormRecordEntry::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FormRecordEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FormRecordEntry, Long>)FormRecordEntry::setCompanyId);
		attributeGetterFunctions.put(
			"createdBy", FormRecordEntry::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<FormRecordEntry, Long>)FormRecordEntry::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", FormRecordEntry::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FormRecordEntry, Long>)FormRecordEntry::setModifiedBy);
		attributeGetterFunctions.put(
			"createdDate", FormRecordEntry::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<FormRecordEntry, Date>)FormRecordEntry::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", FormRecordEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FormRecordEntry, Date>)
				FormRecordEntry::setModifiedDate);
		attributeGetterFunctions.put(
			"formDefinitionId", FormRecordEntry::getFormDefinitionId);
		attributeSetterBiConsumers.put(
			"formDefinitionId",
			(BiConsumer<FormRecordEntry, Long>)
				FormRecordEntry::setFormDefinitionId);
		attributeGetterFunctions.put("recordId", FormRecordEntry::getRecordId);
		attributeSetterBiConsumers.put(
			"recordId",
			(BiConsumer<FormRecordEntry, Long>)FormRecordEntry::setRecordId);
		attributeGetterFunctions.put(
			"dfTableName", FormRecordEntry::getDfTableName);
		attributeSetterBiConsumers.put(
			"dfTableName",
			(BiConsumer<FormRecordEntry, String>)
				FormRecordEntry::setDfTableName);
		attributeGetterFunctions.put("status", FormRecordEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FormRecordEntry, Integer>)FormRecordEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FormRecordEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FormRecordEntry, Long>)
				FormRecordEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", FormRecordEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<FormRecordEntry, String>)
				FormRecordEntry::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", FormRecordEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FormRecordEntry, Date>)FormRecordEntry::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getFormRecordEntryId() {
		return _formRecordEntryId;
	}

	@Override
	public void setFormRecordEntryId(long formRecordEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formRecordEntryId = formRecordEntryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getFormDefinitionId() {
		return _formDefinitionId;
	}

	@Override
	public void setFormDefinitionId(long formDefinitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formDefinitionId = formDefinitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFormDefinitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("formDefinitionId"));
	}

	@Override
	public long getRecordId() {
		return _recordId;
	}

	@Override
	public void setRecordId(long recordId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordId = recordId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRecordId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("recordId"));
	}

	@Override
	public String getDfTableName() {
		if (_dfTableName == null) {
			return "";
		}
		else {
			return _dfTableName;
		}
	}

	@Override
	public void setDfTableName(String dfTableName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dfTableName = dfTableName;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FormRecordEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FormRecordEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FormRecordEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormRecordEntryImpl formRecordEntryImpl = new FormRecordEntryImpl();

		formRecordEntryImpl.setUuid(getUuid());
		formRecordEntryImpl.setFormRecordEntryId(getFormRecordEntryId());
		formRecordEntryImpl.setGroupId(getGroupId());
		formRecordEntryImpl.setCompanyId(getCompanyId());
		formRecordEntryImpl.setCreatedBy(getCreatedBy());
		formRecordEntryImpl.setModifiedBy(getModifiedBy());
		formRecordEntryImpl.setCreatedDate(getCreatedDate());
		formRecordEntryImpl.setModifiedDate(getModifiedDate());
		formRecordEntryImpl.setFormDefinitionId(getFormDefinitionId());
		formRecordEntryImpl.setRecordId(getRecordId());
		formRecordEntryImpl.setDfTableName(getDfTableName());
		formRecordEntryImpl.setStatus(getStatus());
		formRecordEntryImpl.setStatusByUserId(getStatusByUserId());
		formRecordEntryImpl.setStatusByUserName(getStatusByUserName());
		formRecordEntryImpl.setStatusDate(getStatusDate());

		formRecordEntryImpl.resetOriginalValues();

		return formRecordEntryImpl;
	}

	@Override
	public FormRecordEntry cloneWithOriginalValues() {
		FormRecordEntryImpl formRecordEntryImpl = new FormRecordEntryImpl();

		formRecordEntryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		formRecordEntryImpl.setFormRecordEntryId(
			this.<Long>getColumnOriginalValue("formRecordEntryId"));
		formRecordEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		formRecordEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		formRecordEntryImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		formRecordEntryImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		formRecordEntryImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		formRecordEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		formRecordEntryImpl.setFormDefinitionId(
			this.<Long>getColumnOriginalValue("formDefinitionId"));
		formRecordEntryImpl.setRecordId(
			this.<Long>getColumnOriginalValue("recordId"));
		formRecordEntryImpl.setDfTableName(
			this.<String>getColumnOriginalValue("dfTableName"));
		formRecordEntryImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		formRecordEntryImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		formRecordEntryImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		formRecordEntryImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return formRecordEntryImpl;
	}

	@Override
	public int compareTo(FormRecordEntry formRecordEntry) {
		long primaryKey = formRecordEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FormRecordEntry)) {
			return false;
		}

		FormRecordEntry formRecordEntry = (FormRecordEntry)object;

		long primaryKey = formRecordEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FormRecordEntry> toCacheModel() {
		FormRecordEntryCacheModel formRecordEntryCacheModel =
			new FormRecordEntryCacheModel();

		formRecordEntryCacheModel.uuid = getUuid();

		String uuid = formRecordEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			formRecordEntryCacheModel.uuid = null;
		}

		formRecordEntryCacheModel.formRecordEntryId = getFormRecordEntryId();

		formRecordEntryCacheModel.groupId = getGroupId();

		formRecordEntryCacheModel.companyId = getCompanyId();

		formRecordEntryCacheModel.createdBy = getCreatedBy();

		formRecordEntryCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			formRecordEntryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			formRecordEntryCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			formRecordEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			formRecordEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		formRecordEntryCacheModel.formDefinitionId = getFormDefinitionId();

		formRecordEntryCacheModel.recordId = getRecordId();

		formRecordEntryCacheModel.dfTableName = getDfTableName();

		String dfTableName = formRecordEntryCacheModel.dfTableName;

		if ((dfTableName != null) && (dfTableName.length() == 0)) {
			formRecordEntryCacheModel.dfTableName = null;
		}

		formRecordEntryCacheModel.status = getStatus();

		formRecordEntryCacheModel.statusByUserId = getStatusByUserId();

		formRecordEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = formRecordEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			formRecordEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			formRecordEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			formRecordEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return formRecordEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FormRecordEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FormRecordEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FormRecordEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FormRecordEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FormRecordEntry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FormRecordEntry.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _formRecordEntryId;
	private long _groupId;
	private long _companyId;
	private long _createdBy;
	private long _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _formDefinitionId;
	private long _recordId;
	private String _dfTableName;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FormRecordEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FormRecordEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("formRecordEntryId", _formRecordEntryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("formDefinitionId", _formDefinitionId);
		_columnOriginalValues.put("recordId", _recordId);
		_columnOriginalValues.put("dfTableName", _dfTableName);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("formRecordEntryId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createdBy", 16L);

		columnBitmasks.put("modifiedBy", 32L);

		columnBitmasks.put("createdDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("formDefinitionId", 256L);

		columnBitmasks.put("recordId", 512L);

		columnBitmasks.put("dfTableName", 1024L);

		columnBitmasks.put("status", 2048L);

		columnBitmasks.put("statusByUserId", 4096L);

		columnBitmasks.put("statusByUserName", 8192L);

		columnBitmasks.put("statusDate", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FormRecordEntry _escapedModel;

}