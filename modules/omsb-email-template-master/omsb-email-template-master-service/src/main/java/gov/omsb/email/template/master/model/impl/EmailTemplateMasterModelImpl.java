/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.email.template.master.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gov.omsb.email.template.master.model.EmailTemplateMaster;
import gov.omsb.email.template.master.model.EmailTemplateMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmailTemplateMaster service. Represents a row in the &quot;omsb_email_template&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmailTemplateMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailTemplateMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmailTemplateMasterImpl
 * @generated
 */
public class EmailTemplateMasterModelImpl
	extends BaseModelImpl<EmailTemplateMaster>
	implements EmailTemplateMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email template master model instance should use the <code>EmailTemplateMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "omsb_email_template";

	public static final Object[][] TABLE_COLUMNS = {
		{"templateId", Types.BIGINT}, {"templateName", Types.VARCHAR},
		{"templateDescription", Types.VARCHAR}, {"senderType", Types.VARCHAR},
		{"senderEmailId", Types.VARCHAR}, {"defaultCC", Types.VARCHAR},
		{"defaultBCC", Types.VARCHAR}, {"subject", Types.CLOB},
		{"dynamicBody", Types.CLOB}, {"staticBody", Types.CLOB},
		{"signature", Types.CLOB}, {"userNotification", Types.CLOB},
		{"isRichText", Types.BOOLEAN}, {"createdBy", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("templateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("templateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("templateDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("senderType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("senderEmailId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultCC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultBCC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subject", Types.CLOB);
		TABLE_COLUMNS_MAP.put("dynamicBody", Types.CLOB);
		TABLE_COLUMNS_MAP.put("staticBody", Types.CLOB);
		TABLE_COLUMNS_MAP.put("signature", Types.CLOB);
		TABLE_COLUMNS_MAP.put("userNotification", Types.CLOB);
		TABLE_COLUMNS_MAP.put("isRichText", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table omsb_email_template (templateId LONG not null primary key,templateName VARCHAR(75) null,templateDescription VARCHAR(75) null,senderType VARCHAR(75) null,senderEmailId VARCHAR(75) null,defaultCC VARCHAR(75) null,defaultBCC VARCHAR(75) null,subject TEXT null,dynamicBody TEXT null,staticBody TEXT null,signature TEXT null,userNotification TEXT null,isRichText BOOLEAN,createdBy LONG,createdDate DATE null,modifiedBy LONG,modifiedDate DATE null,groupId LONG,companyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table omsb_email_template";

	public static final String ORDER_BY_JPQL =
		" ORDER BY emailTemplateMaster.templateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY omsb_email_template.templateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEMPLATENAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEMPLATEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmailTemplateMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _templateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _templateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailTemplateMaster.class;
	}

	@Override
	public String getModelClassName() {
		return EmailTemplateMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmailTemplateMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmailTemplateMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailTemplateMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmailTemplateMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmailTemplateMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmailTemplateMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmailTemplateMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmailTemplateMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmailTemplateMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EmailTemplateMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmailTemplateMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmailTemplateMaster, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmailTemplateMaster, Object>>();
		Map<String, BiConsumer<EmailTemplateMaster, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EmailTemplateMaster, ?>>();

		attributeGetterFunctions.put(
			"templateId", EmailTemplateMaster::getTemplateId);
		attributeSetterBiConsumers.put(
			"templateId",
			(BiConsumer<EmailTemplateMaster, Long>)
				EmailTemplateMaster::setTemplateId);
		attributeGetterFunctions.put(
			"templateName", EmailTemplateMaster::getTemplateName);
		attributeSetterBiConsumers.put(
			"templateName",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setTemplateName);
		attributeGetterFunctions.put(
			"templateDescription", EmailTemplateMaster::getTemplateDescription);
		attributeSetterBiConsumers.put(
			"templateDescription",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setTemplateDescription);
		attributeGetterFunctions.put(
			"senderType", EmailTemplateMaster::getSenderType);
		attributeSetterBiConsumers.put(
			"senderType",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setSenderType);
		attributeGetterFunctions.put(
			"senderEmailId", EmailTemplateMaster::getSenderEmailId);
		attributeSetterBiConsumers.put(
			"senderEmailId",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setSenderEmailId);
		attributeGetterFunctions.put(
			"defaultCC", EmailTemplateMaster::getDefaultCC);
		attributeSetterBiConsumers.put(
			"defaultCC",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setDefaultCC);
		attributeGetterFunctions.put(
			"defaultBCC", EmailTemplateMaster::getDefaultBCC);
		attributeSetterBiConsumers.put(
			"defaultBCC",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setDefaultBCC);
		attributeGetterFunctions.put(
			"subject", EmailTemplateMaster::getSubject);
		attributeSetterBiConsumers.put(
			"subject",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setSubject);
		attributeGetterFunctions.put(
			"dynamicBody", EmailTemplateMaster::getDynamicBody);
		attributeSetterBiConsumers.put(
			"dynamicBody",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setDynamicBody);
		attributeGetterFunctions.put(
			"staticBody", EmailTemplateMaster::getStaticBody);
		attributeSetterBiConsumers.put(
			"staticBody",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setStaticBody);
		attributeGetterFunctions.put(
			"signature", EmailTemplateMaster::getSignature);
		attributeSetterBiConsumers.put(
			"signature",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setSignature);
		attributeGetterFunctions.put(
			"userNotification", EmailTemplateMaster::getUserNotification);
		attributeSetterBiConsumers.put(
			"userNotification",
			(BiConsumer<EmailTemplateMaster, String>)
				EmailTemplateMaster::setUserNotification);
		attributeGetterFunctions.put(
			"isRichText", EmailTemplateMaster::getIsRichText);
		attributeSetterBiConsumers.put(
			"isRichText",
			(BiConsumer<EmailTemplateMaster, Boolean>)
				EmailTemplateMaster::setIsRichText);
		attributeGetterFunctions.put(
			"createdBy", EmailTemplateMaster::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<EmailTemplateMaster, Long>)
				EmailTemplateMaster::setCreatedBy);
		attributeGetterFunctions.put(
			"createdDate", EmailTemplateMaster::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<EmailTemplateMaster, Date>)
				EmailTemplateMaster::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedBy", EmailTemplateMaster::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<EmailTemplateMaster, Long>)
				EmailTemplateMaster::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedDate", EmailTemplateMaster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmailTemplateMaster, Date>)
				EmailTemplateMaster::setModifiedDate);
		attributeGetterFunctions.put(
			"groupId", EmailTemplateMaster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmailTemplateMaster, Long>)
				EmailTemplateMaster::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmailTemplateMaster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmailTemplateMaster, Long>)
				EmailTemplateMaster::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTemplateId() {
		return _templateId;
	}

	@Override
	public void setTemplateId(long templateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_templateId = templateId;
	}

	@Override
	public String getTemplateName() {
		if (_templateName == null) {
			return "";
		}
		else {
			return _templateName;
		}
	}

	@Override
	public void setTemplateName(String templateName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_templateName = templateName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTemplateName() {
		return getColumnOriginalValue("templateName");
	}

	@Override
	public String getTemplateDescription() {
		if (_templateDescription == null) {
			return "";
		}
		else {
			return _templateDescription;
		}
	}

	@Override
	public void setTemplateDescription(String templateDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_templateDescription = templateDescription;
	}

	@Override
	public String getSenderType() {
		if (_senderType == null) {
			return "";
		}
		else {
			return _senderType;
		}
	}

	@Override
	public void setSenderType(String senderType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_senderType = senderType;
	}

	@Override
	public String getSenderEmailId() {
		if (_senderEmailId == null) {
			return "";
		}
		else {
			return _senderEmailId;
		}
	}

	@Override
	public void setSenderEmailId(String senderEmailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_senderEmailId = senderEmailId;
	}

	@Override
	public String getDefaultCC() {
		if (_defaultCC == null) {
			return "";
		}
		else {
			return _defaultCC;
		}
	}

	@Override
	public void setDefaultCC(String defaultCC) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_defaultCC = defaultCC;
	}

	@Override
	public String getDefaultBCC() {
		if (_defaultBCC == null) {
			return "";
		}
		else {
			return _defaultBCC;
		}
	}

	@Override
	public void setDefaultBCC(String defaultBCC) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_defaultBCC = defaultBCC;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subject = subject;
	}

	@Override
	public String getDynamicBody() {
		if (_dynamicBody == null) {
			return "";
		}
		else {
			return _dynamicBody;
		}
	}

	@Override
	public void setDynamicBody(String dynamicBody) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dynamicBody = dynamicBody;
	}

	@Override
	public String getStaticBody() {
		if (_staticBody == null) {
			return "";
		}
		else {
			return _staticBody;
		}
	}

	@Override
	public void setStaticBody(String staticBody) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_staticBody = staticBody;
	}

	@Override
	public String getSignature() {
		if (_signature == null) {
			return "";
		}
		else {
			return _signature;
		}
	}

	@Override
	public void setSignature(String signature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signature = signature;
	}

	@Override
	public String getUserNotification() {
		if (_userNotification == null) {
			return "";
		}
		else {
			return _userNotification;
		}
	}

	@Override
	public void setUserNotification(String userNotification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userNotification = userNotification;
	}

	@Override
	public boolean getIsRichText() {
		return _isRichText;
	}

	@Override
	public boolean isIsRichText() {
		return _isRichText;
	}

	@Override
	public void setIsRichText(boolean isRichText) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isRichText = isRichText;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmailTemplateMaster.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailTemplateMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmailTemplateMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailTemplateMasterImpl emailTemplateMasterImpl =
			new EmailTemplateMasterImpl();

		emailTemplateMasterImpl.setTemplateId(getTemplateId());
		emailTemplateMasterImpl.setTemplateName(getTemplateName());
		emailTemplateMasterImpl.setTemplateDescription(
			getTemplateDescription());
		emailTemplateMasterImpl.setSenderType(getSenderType());
		emailTemplateMasterImpl.setSenderEmailId(getSenderEmailId());
		emailTemplateMasterImpl.setDefaultCC(getDefaultCC());
		emailTemplateMasterImpl.setDefaultBCC(getDefaultBCC());
		emailTemplateMasterImpl.setSubject(getSubject());
		emailTemplateMasterImpl.setDynamicBody(getDynamicBody());
		emailTemplateMasterImpl.setStaticBody(getStaticBody());
		emailTemplateMasterImpl.setSignature(getSignature());
		emailTemplateMasterImpl.setUserNotification(getUserNotification());
		emailTemplateMasterImpl.setIsRichText(isIsRichText());
		emailTemplateMasterImpl.setCreatedBy(getCreatedBy());
		emailTemplateMasterImpl.setCreatedDate(getCreatedDate());
		emailTemplateMasterImpl.setModifiedBy(getModifiedBy());
		emailTemplateMasterImpl.setModifiedDate(getModifiedDate());
		emailTemplateMasterImpl.setGroupId(getGroupId());
		emailTemplateMasterImpl.setCompanyId(getCompanyId());

		emailTemplateMasterImpl.resetOriginalValues();

		return emailTemplateMasterImpl;
	}

	@Override
	public EmailTemplateMaster cloneWithOriginalValues() {
		EmailTemplateMasterImpl emailTemplateMasterImpl =
			new EmailTemplateMasterImpl();

		emailTemplateMasterImpl.setTemplateId(
			this.<Long>getColumnOriginalValue("templateId"));
		emailTemplateMasterImpl.setTemplateName(
			this.<String>getColumnOriginalValue("templateName"));
		emailTemplateMasterImpl.setTemplateDescription(
			this.<String>getColumnOriginalValue("templateDescription"));
		emailTemplateMasterImpl.setSenderType(
			this.<String>getColumnOriginalValue("senderType"));
		emailTemplateMasterImpl.setSenderEmailId(
			this.<String>getColumnOriginalValue("senderEmailId"));
		emailTemplateMasterImpl.setDefaultCC(
			this.<String>getColumnOriginalValue("defaultCC"));
		emailTemplateMasterImpl.setDefaultBCC(
			this.<String>getColumnOriginalValue("defaultBCC"));
		emailTemplateMasterImpl.setSubject(
			this.<String>getColumnOriginalValue("subject"));
		emailTemplateMasterImpl.setDynamicBody(
			this.<String>getColumnOriginalValue("dynamicBody"));
		emailTemplateMasterImpl.setStaticBody(
			this.<String>getColumnOriginalValue("staticBody"));
		emailTemplateMasterImpl.setSignature(
			this.<String>getColumnOriginalValue("signature"));
		emailTemplateMasterImpl.setUserNotification(
			this.<String>getColumnOriginalValue("userNotification"));
		emailTemplateMasterImpl.setIsRichText(
			this.<Boolean>getColumnOriginalValue("isRichText"));
		emailTemplateMasterImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		emailTemplateMasterImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		emailTemplateMasterImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		emailTemplateMasterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		emailTemplateMasterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		emailTemplateMasterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));

		return emailTemplateMasterImpl;
	}

	@Override
	public int compareTo(EmailTemplateMaster emailTemplateMaster) {
		long primaryKey = emailTemplateMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmailTemplateMaster)) {
			return false;
		}

		EmailTemplateMaster emailTemplateMaster = (EmailTemplateMaster)object;

		long primaryKey = emailTemplateMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailTemplateMaster> toCacheModel() {
		EmailTemplateMasterCacheModel emailTemplateMasterCacheModel =
			new EmailTemplateMasterCacheModel();

		emailTemplateMasterCacheModel.templateId = getTemplateId();

		emailTemplateMasterCacheModel.templateName = getTemplateName();

		String templateName = emailTemplateMasterCacheModel.templateName;

		if ((templateName != null) && (templateName.length() == 0)) {
			emailTemplateMasterCacheModel.templateName = null;
		}

		emailTemplateMasterCacheModel.templateDescription =
			getTemplateDescription();

		String templateDescription =
			emailTemplateMasterCacheModel.templateDescription;

		if ((templateDescription != null) &&
			(templateDescription.length() == 0)) {

			emailTemplateMasterCacheModel.templateDescription = null;
		}

		emailTemplateMasterCacheModel.senderType = getSenderType();

		String senderType = emailTemplateMasterCacheModel.senderType;

		if ((senderType != null) && (senderType.length() == 0)) {
			emailTemplateMasterCacheModel.senderType = null;
		}

		emailTemplateMasterCacheModel.senderEmailId = getSenderEmailId();

		String senderEmailId = emailTemplateMasterCacheModel.senderEmailId;

		if ((senderEmailId != null) && (senderEmailId.length() == 0)) {
			emailTemplateMasterCacheModel.senderEmailId = null;
		}

		emailTemplateMasterCacheModel.defaultCC = getDefaultCC();

		String defaultCC = emailTemplateMasterCacheModel.defaultCC;

		if ((defaultCC != null) && (defaultCC.length() == 0)) {
			emailTemplateMasterCacheModel.defaultCC = null;
		}

		emailTemplateMasterCacheModel.defaultBCC = getDefaultBCC();

		String defaultBCC = emailTemplateMasterCacheModel.defaultBCC;

		if ((defaultBCC != null) && (defaultBCC.length() == 0)) {
			emailTemplateMasterCacheModel.defaultBCC = null;
		}

		emailTemplateMasterCacheModel.subject = getSubject();

		String subject = emailTemplateMasterCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			emailTemplateMasterCacheModel.subject = null;
		}

		emailTemplateMasterCacheModel.dynamicBody = getDynamicBody();

		String dynamicBody = emailTemplateMasterCacheModel.dynamicBody;

		if ((dynamicBody != null) && (dynamicBody.length() == 0)) {
			emailTemplateMasterCacheModel.dynamicBody = null;
		}

		emailTemplateMasterCacheModel.staticBody = getStaticBody();

		String staticBody = emailTemplateMasterCacheModel.staticBody;

		if ((staticBody != null) && (staticBody.length() == 0)) {
			emailTemplateMasterCacheModel.staticBody = null;
		}

		emailTemplateMasterCacheModel.signature = getSignature();

		String signature = emailTemplateMasterCacheModel.signature;

		if ((signature != null) && (signature.length() == 0)) {
			emailTemplateMasterCacheModel.signature = null;
		}

		emailTemplateMasterCacheModel.userNotification = getUserNotification();

		String userNotification =
			emailTemplateMasterCacheModel.userNotification;

		if ((userNotification != null) && (userNotification.length() == 0)) {
			emailTemplateMasterCacheModel.userNotification = null;
		}

		emailTemplateMasterCacheModel.isRichText = isIsRichText();

		emailTemplateMasterCacheModel.createdBy = getCreatedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			emailTemplateMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			emailTemplateMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		emailTemplateMasterCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			emailTemplateMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			emailTemplateMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		emailTemplateMasterCacheModel.groupId = getGroupId();

		emailTemplateMasterCacheModel.companyId = getCompanyId();

		return emailTemplateMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmailTemplateMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmailTemplateMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailTemplateMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EmailTemplateMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmailTemplateMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EmailTemplateMaster.class, ModelWrapper.class);

	}

	private long _templateId;
	private String _templateName;
	private String _templateDescription;
	private String _senderType;
	private String _senderEmailId;
	private String _defaultCC;
	private String _defaultBCC;
	private String _subject;
	private String _dynamicBody;
	private String _staticBody;
	private String _signature;
	private String _userNotification;
	private boolean _isRichText;
	private long _createdBy;
	private Date _createdDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _groupId;
	private long _companyId;

	public <T> T getColumnValue(String columnName) {
		Function<EmailTemplateMaster, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmailTemplateMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("templateId", _templateId);
		_columnOriginalValues.put("templateName", _templateName);
		_columnOriginalValues.put("templateDescription", _templateDescription);
		_columnOriginalValues.put("senderType", _senderType);
		_columnOriginalValues.put("senderEmailId", _senderEmailId);
		_columnOriginalValues.put("defaultCC", _defaultCC);
		_columnOriginalValues.put("defaultBCC", _defaultBCC);
		_columnOriginalValues.put("subject", _subject);
		_columnOriginalValues.put("dynamicBody", _dynamicBody);
		_columnOriginalValues.put("staticBody", _staticBody);
		_columnOriginalValues.put("signature", _signature);
		_columnOriginalValues.put("userNotification", _userNotification);
		_columnOriginalValues.put("isRichText", _isRichText);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("templateId", 1L);

		columnBitmasks.put("templateName", 2L);

		columnBitmasks.put("templateDescription", 4L);

		columnBitmasks.put("senderType", 8L);

		columnBitmasks.put("senderEmailId", 16L);

		columnBitmasks.put("defaultCC", 32L);

		columnBitmasks.put("defaultBCC", 64L);

		columnBitmasks.put("subject", 128L);

		columnBitmasks.put("dynamicBody", 256L);

		columnBitmasks.put("staticBody", 512L);

		columnBitmasks.put("signature", 1024L);

		columnBitmasks.put("userNotification", 2048L);

		columnBitmasks.put("isRichText", 4096L);

		columnBitmasks.put("createdBy", 8192L);

		columnBitmasks.put("createdDate", 16384L);

		columnBitmasks.put("modifiedBy", 32768L);

		columnBitmasks.put("modifiedDate", 65536L);

		columnBitmasks.put("groupId", 131072L);

		columnBitmasks.put("companyId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmailTemplateMaster _escapedModel;

}