/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.superset.dashboard.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gov.omsb.superset.dashboard.model.RoleDashboardConfig;
import gov.omsb.superset.dashboard.model.RoleDashboardConfigModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RoleDashboardConfig service. Represents a row in the &quot;role_dashboard_config&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RoleDashboardConfigModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoleDashboardConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RoleDashboardConfigImpl
 * @generated
 */
public class RoleDashboardConfigModelImpl
	extends BaseModelImpl<RoleDashboardConfig>
	implements RoleDashboardConfigModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a role dashboard config model instance should use the <code>RoleDashboardConfig</code> interface instead.
	 */
	public static final String TABLE_NAME = "role_dashboard_config";

	public static final Object[][] TABLE_COLUMNS = {
		{"configId", Types.BIGINT}, {"roleId", Types.BIGINT},
		{"dashboardId", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("configId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dashboardId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table role_dashboard_config (configId LONG not null primary key,roleId LONG,dashboardId VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,createdBy LONG,modifiedBy LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table role_dashboard_config";

	public static final String ORDER_BY_JPQL =
		" ORDER BY roleDashboardConfig.configId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY role_dashboard_config.configId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROLEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONFIGID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RoleDashboardConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _configId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _configId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RoleDashboardConfig.class;
	}

	@Override
	public String getModelClassName() {
		return RoleDashboardConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RoleDashboardConfig, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RoleDashboardConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RoleDashboardConfig, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RoleDashboardConfig)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RoleDashboardConfig, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RoleDashboardConfig, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RoleDashboardConfig)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RoleDashboardConfig, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RoleDashboardConfig, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RoleDashboardConfig, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RoleDashboardConfig, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RoleDashboardConfig, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<RoleDashboardConfig, Object>>();
		Map<String, BiConsumer<RoleDashboardConfig, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<RoleDashboardConfig, ?>>();

		attributeGetterFunctions.put(
			"configId", RoleDashboardConfig::getConfigId);
		attributeSetterBiConsumers.put(
			"configId",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setConfigId);
		attributeGetterFunctions.put("roleId", RoleDashboardConfig::getRoleId);
		attributeSetterBiConsumers.put(
			"roleId",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setRoleId);
		attributeGetterFunctions.put(
			"dashboardId", RoleDashboardConfig::getDashboardId);
		attributeSetterBiConsumers.put(
			"dashboardId",
			(BiConsumer<RoleDashboardConfig, String>)
				RoleDashboardConfig::setDashboardId);
		attributeGetterFunctions.put(
			"companyId", RoleDashboardConfig::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setCompanyId);
		attributeGetterFunctions.put(
			"groupId", RoleDashboardConfig::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setGroupId);
		attributeGetterFunctions.put("userId", RoleDashboardConfig::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setUserId);
		attributeGetterFunctions.put(
			"createdDate", RoleDashboardConfig::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<RoleDashboardConfig, Date>)
				RoleDashboardConfig::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", RoleDashboardConfig::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RoleDashboardConfig, Date>)
				RoleDashboardConfig::setModifiedDate);
		attributeGetterFunctions.put(
			"createdBy", RoleDashboardConfig::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", RoleDashboardConfig::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<RoleDashboardConfig, Long>)
				RoleDashboardConfig::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getConfigId() {
		return _configId;
	}

	@Override
	public void setConfigId(long configId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_configId = configId;
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roleId = roleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRoleId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("roleId"));
	}

	@Override
	public String getDashboardId() {
		if (_dashboardId == null) {
			return "";
		}
		else {
			return _dashboardId;
		}
	}

	@Override
	public void setDashboardId(String dashboardId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dashboardId = dashboardId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RoleDashboardConfig.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RoleDashboardConfig toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RoleDashboardConfig>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RoleDashboardConfigImpl roleDashboardConfigImpl =
			new RoleDashboardConfigImpl();

		roleDashboardConfigImpl.setConfigId(getConfigId());
		roleDashboardConfigImpl.setRoleId(getRoleId());
		roleDashboardConfigImpl.setDashboardId(getDashboardId());
		roleDashboardConfigImpl.setCompanyId(getCompanyId());
		roleDashboardConfigImpl.setGroupId(getGroupId());
		roleDashboardConfigImpl.setUserId(getUserId());
		roleDashboardConfigImpl.setCreatedDate(getCreatedDate());
		roleDashboardConfigImpl.setModifiedDate(getModifiedDate());
		roleDashboardConfigImpl.setCreatedBy(getCreatedBy());
		roleDashboardConfigImpl.setModifiedBy(getModifiedBy());

		roleDashboardConfigImpl.resetOriginalValues();

		return roleDashboardConfigImpl;
	}

	@Override
	public RoleDashboardConfig cloneWithOriginalValues() {
		RoleDashboardConfigImpl roleDashboardConfigImpl =
			new RoleDashboardConfigImpl();

		roleDashboardConfigImpl.setConfigId(
			this.<Long>getColumnOriginalValue("configId"));
		roleDashboardConfigImpl.setRoleId(
			this.<Long>getColumnOriginalValue("roleId"));
		roleDashboardConfigImpl.setDashboardId(
			this.<String>getColumnOriginalValue("dashboardId"));
		roleDashboardConfigImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		roleDashboardConfigImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		roleDashboardConfigImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		roleDashboardConfigImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		roleDashboardConfigImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		roleDashboardConfigImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		roleDashboardConfigImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));

		return roleDashboardConfigImpl;
	}

	@Override
	public int compareTo(RoleDashboardConfig roleDashboardConfig) {
		long primaryKey = roleDashboardConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RoleDashboardConfig)) {
			return false;
		}

		RoleDashboardConfig roleDashboardConfig = (RoleDashboardConfig)object;

		long primaryKey = roleDashboardConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RoleDashboardConfig> toCacheModel() {
		RoleDashboardConfigCacheModel roleDashboardConfigCacheModel =
			new RoleDashboardConfigCacheModel();

		roleDashboardConfigCacheModel.configId = getConfigId();

		roleDashboardConfigCacheModel.roleId = getRoleId();

		roleDashboardConfigCacheModel.dashboardId = getDashboardId();

		String dashboardId = roleDashboardConfigCacheModel.dashboardId;

		if ((dashboardId != null) && (dashboardId.length() == 0)) {
			roleDashboardConfigCacheModel.dashboardId = null;
		}

		roleDashboardConfigCacheModel.companyId = getCompanyId();

		roleDashboardConfigCacheModel.groupId = getGroupId();

		roleDashboardConfigCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			roleDashboardConfigCacheModel.createdDate = createdDate.getTime();
		}
		else {
			roleDashboardConfigCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			roleDashboardConfigCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			roleDashboardConfigCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		roleDashboardConfigCacheModel.createdBy = getCreatedBy();

		roleDashboardConfigCacheModel.modifiedBy = getModifiedBy();

		return roleDashboardConfigCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RoleDashboardConfig, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RoleDashboardConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RoleDashboardConfig, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RoleDashboardConfig)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RoleDashboardConfig>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RoleDashboardConfig.class, ModelWrapper.class);

	}

	private long _configId;
	private long _roleId;
	private String _dashboardId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdBy;
	private long _modifiedBy;

	public <T> T getColumnValue(String columnName) {
		Function<RoleDashboardConfig, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RoleDashboardConfig)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("configId", _configId);
		_columnOriginalValues.put("roleId", _roleId);
		_columnOriginalValues.put("dashboardId", _dashboardId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("configId", 1L);

		columnBitmasks.put("roleId", 2L);

		columnBitmasks.put("dashboardId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("createdDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("createdBy", 256L);

		columnBitmasks.put("modifiedBy", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RoleDashboardConfig _escapedModel;

}