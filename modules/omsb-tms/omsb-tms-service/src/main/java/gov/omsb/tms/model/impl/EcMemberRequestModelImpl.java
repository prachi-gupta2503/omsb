/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import gov.omsb.tms.model.EcMemberRequest;
import gov.omsb.tms.model.EcMemberRequestModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EcMemberRequest service. Represents a row in the &quot;ec_member_request&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EcMemberRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EcMemberRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EcMemberRequestImpl
 * @generated
 */
@JSON(strict = true)
public class EcMemberRequestModelImpl
	extends BaseModelImpl<EcMemberRequest> implements EcMemberRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ec member request model instance should use the <code>EcMemberRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "ec_member_request";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ec_member_request_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"modified_date", Types.TIMESTAMP},
		{"program_id", Types.BIGINT}, {"potential_ec_member_id", Types.BIGINT},
		{"potential_ec_member_role_id", Types.BIGINT},
		{"latest_ec_member_request_state_id", Types.BIGINT},
		{"covering_letter_id", Types.BIGINT}, {"cv_id", Types.BIGINT},
		{"no_objection_letter_id", Types.BIGINT},
		{"passport_copy_id", Types.BIGINT},
		{"national_id_copy_id", Types.BIGINT},
		{"qarar_request_id", Types.BIGINT}, {"qarar_doc_id", Types.BIGINT},
		{"comments", Types.VARCHAR},
		{"potential_ec_member_lruserid", Types.BIGINT},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"userName", Types.VARCHAR}, {"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ec_member_request_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("program_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("potential_ec_member_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("potential_ec_member_role_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put(
			"latest_ec_member_request_state_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("covering_letter_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cv_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("no_objection_letter_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("passport_copy_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("national_id_copy_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("qarar_request_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("qarar_doc_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("potential_ec_member_lruserid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ec_member_request (uuid_ VARCHAR(75) null,ec_member_request_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,program_id LONG,potential_ec_member_id LONG,potential_ec_member_role_id LONG,latest_ec_member_request_state_id LONG,covering_letter_id LONG,cv_id LONG,no_objection_letter_id LONG,passport_copy_id LONG,national_id_copy_id LONG,qarar_request_id LONG,qarar_doc_id LONG,comments STRING null,potential_ec_member_lruserid LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,userName VARCHAR(75) null,userId LONG)";

	public static final String TABLE_SQL_DROP = "drop table ec_member_request";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ecMemberRequest.ecMemberRequestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ec_member_request.ec_member_request_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long POTENTIALECMEMBERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long POTENTIALECMEMBERLRUSERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ECMEMBERREQUESTID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EcMemberRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ecMemberRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEcMemberRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ecMemberRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EcMemberRequest.class;
	}

	@Override
	public String getModelClassName() {
		return EcMemberRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EcMemberRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EcMemberRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EcMemberRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EcMemberRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EcMemberRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EcMemberRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EcMemberRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EcMemberRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EcMemberRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EcMemberRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EcMemberRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EcMemberRequest, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EcMemberRequest, Object>>();
		Map<String, BiConsumer<EcMemberRequest, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EcMemberRequest, ?>>();

		attributeGetterFunctions.put("uuid", EcMemberRequest::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EcMemberRequest, String>)EcMemberRequest::setUuid);
		attributeGetterFunctions.put(
			"ecMemberRequestId", EcMemberRequest::getEcMemberRequestId);
		attributeSetterBiConsumers.put(
			"ecMemberRequestId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setEcMemberRequestId);
		attributeGetterFunctions.put("groupId", EcMemberRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EcMemberRequest, Long>)EcMemberRequest::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EcMemberRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EcMemberRequest, Long>)EcMemberRequest::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", EcMemberRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EcMemberRequest, Date>)EcMemberRequest::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EcMemberRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EcMemberRequest, Date>)
				EcMemberRequest::setModifiedDate);
		attributeGetterFunctions.put(
			"programId", EcMemberRequest::getProgramId);
		attributeSetterBiConsumers.put(
			"programId",
			(BiConsumer<EcMemberRequest, Long>)EcMemberRequest::setProgramId);
		attributeGetterFunctions.put(
			"potentialEcMemberId", EcMemberRequest::getPotentialEcMemberId);
		attributeSetterBiConsumers.put(
			"potentialEcMemberId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setPotentialEcMemberId);
		attributeGetterFunctions.put(
			"potentialEcMemberRoleId",
			EcMemberRequest::getPotentialEcMemberRoleId);
		attributeSetterBiConsumers.put(
			"potentialEcMemberRoleId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setPotentialEcMemberRoleId);
		attributeGetterFunctions.put(
			"latestEcMemberRequestStateId",
			EcMemberRequest::getLatestEcMemberRequestStateId);
		attributeSetterBiConsumers.put(
			"latestEcMemberRequestStateId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setLatestEcMemberRequestStateId);
		attributeGetterFunctions.put(
			"coveringLetterId", EcMemberRequest::getCoveringLetterId);
		attributeSetterBiConsumers.put(
			"coveringLetterId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setCoveringLetterId);
		attributeGetterFunctions.put("cvId", EcMemberRequest::getCvId);
		attributeSetterBiConsumers.put(
			"cvId",
			(BiConsumer<EcMemberRequest, Long>)EcMemberRequest::setCvId);
		attributeGetterFunctions.put(
			"noObjectionLetterId", EcMemberRequest::getNoObjectionLetterId);
		attributeSetterBiConsumers.put(
			"noObjectionLetterId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setNoObjectionLetterId);
		attributeGetterFunctions.put(
			"passportCopyId", EcMemberRequest::getPassportCopyId);
		attributeSetterBiConsumers.put(
			"passportCopyId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setPassportCopyId);
		attributeGetterFunctions.put(
			"nationalIdCopyId", EcMemberRequest::getNationalIdCopyId);
		attributeSetterBiConsumers.put(
			"nationalIdCopyId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setNationalIdCopyId);
		attributeGetterFunctions.put(
			"qararRequestId", EcMemberRequest::getQararRequestId);
		attributeSetterBiConsumers.put(
			"qararRequestId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setQararRequestId);
		attributeGetterFunctions.put(
			"qararDocId", EcMemberRequest::getQararDocId);
		attributeSetterBiConsumers.put(
			"qararDocId",
			(BiConsumer<EcMemberRequest, Long>)EcMemberRequest::setQararDocId);
		attributeGetterFunctions.put("comments", EcMemberRequest::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<EcMemberRequest, String>)EcMemberRequest::setComments);
		attributeGetterFunctions.put(
			"potentialEcMemberLruserid",
			EcMemberRequest::getPotentialEcMemberLruserid);
		attributeSetterBiConsumers.put(
			"potentialEcMemberLruserid",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setPotentialEcMemberLruserid);
		attributeGetterFunctions.put("status", EcMemberRequest::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EcMemberRequest, Integer>)EcMemberRequest::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", EcMemberRequest::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<EcMemberRequest, Long>)
				EcMemberRequest::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", EcMemberRequest::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<EcMemberRequest, String>)
				EcMemberRequest::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", EcMemberRequest::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<EcMemberRequest, Date>)EcMemberRequest::setStatusDate);
		attributeGetterFunctions.put("userName", EcMemberRequest::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EcMemberRequest, String>)EcMemberRequest::setUserName);
		attributeGetterFunctions.put("userId", EcMemberRequest::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EcMemberRequest, Long>)EcMemberRequest::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEcMemberRequestId() {
		return _ecMemberRequestId;
	}

	@Override
	public void setEcMemberRequestId(long ecMemberRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecMemberRequestId = ecMemberRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getProgramId() {
		return _programId;
	}

	@Override
	public void setProgramId(long programId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programId = programId;
	}

	@JSON
	@Override
	public long getPotentialEcMemberId() {
		return _potentialEcMemberId;
	}

	@Override
	public void setPotentialEcMemberId(long potentialEcMemberId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_potentialEcMemberId = potentialEcMemberId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPotentialEcMemberId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("potential_ec_member_id"));
	}

	@JSON
	@Override
	public long getPotentialEcMemberRoleId() {
		return _potentialEcMemberRoleId;
	}

	@Override
	public void setPotentialEcMemberRoleId(long potentialEcMemberRoleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_potentialEcMemberRoleId = potentialEcMemberRoleId;
	}

	@JSON
	@Override
	public long getLatestEcMemberRequestStateId() {
		return _latestEcMemberRequestStateId;
	}

	@Override
	public void setLatestEcMemberRequestStateId(
		long latestEcMemberRequestStateId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_latestEcMemberRequestStateId = latestEcMemberRequestStateId;
	}

	@JSON
	@Override
	public long getCoveringLetterId() {
		return _coveringLetterId;
	}

	@Override
	public void setCoveringLetterId(long coveringLetterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coveringLetterId = coveringLetterId;
	}

	@JSON
	@Override
	public long getCvId() {
		return _cvId;
	}

	@Override
	public void setCvId(long cvId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cvId = cvId;
	}

	@JSON
	@Override
	public long getNoObjectionLetterId() {
		return _noObjectionLetterId;
	}

	@Override
	public void setNoObjectionLetterId(long noObjectionLetterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noObjectionLetterId = noObjectionLetterId;
	}

	@JSON
	@Override
	public long getPassportCopyId() {
		return _passportCopyId;
	}

	@Override
	public void setPassportCopyId(long passportCopyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passportCopyId = passportCopyId;
	}

	@JSON
	@Override
	public long getNationalIdCopyId() {
		return _nationalIdCopyId;
	}

	@Override
	public void setNationalIdCopyId(long nationalIdCopyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalIdCopyId = nationalIdCopyId;
	}

	@JSON
	@Override
	public long getQararRequestId() {
		return _qararRequestId;
	}

	@Override
	public void setQararRequestId(long qararRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qararRequestId = qararRequestId;
	}

	@JSON
	@Override
	public long getQararDocId() {
		return _qararDocId;
	}

	@Override
	public void setQararDocId(long qararDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qararDocId = qararDocId;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public String getComments(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getComments(languageId);
	}

	@Override
	public String getComments(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getComments(languageId, useDefault);
	}

	@Override
	public String getComments(String languageId) {
		return LocalizationUtil.getLocalization(getComments(), languageId);
	}

	@Override
	public String getComments(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getComments(), languageId, useDefault);
	}

	@Override
	public String getCommentsCurrentLanguageId() {
		return _commentsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCommentsCurrentValue() {
		Locale locale = getLocale(_commentsCurrentLanguageId);

		return getComments(locale);
	}

	@Override
	public Map<Locale, String> getCommentsMap() {
		return LocalizationUtil.getLocalizationMap(getComments());
	}

	@Override
	public void setComments(String comments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comments = comments;
	}

	@Override
	public void setComments(String comments, Locale locale) {
		setComments(comments, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setComments(
		String comments, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(comments)) {
			setComments(
				LocalizationUtil.updateLocalization(
					getComments(), "Comments", comments, languageId,
					defaultLanguageId));
		}
		else {
			setComments(
				LocalizationUtil.removeLocalization(
					getComments(), "Comments", languageId));
		}
	}

	@Override
	public void setCommentsCurrentLanguageId(String languageId) {
		_commentsCurrentLanguageId = languageId;
	}

	@Override
	public void setCommentsMap(Map<Locale, String> commentsMap) {
		setCommentsMap(commentsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCommentsMap(
		Map<Locale, String> commentsMap, Locale defaultLocale) {

		if (commentsMap == null) {
			return;
		}

		setComments(
			LocalizationUtil.updateLocalization(
				commentsMap, getComments(), "Comments",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getPotentialEcMemberLruserid() {
		return _potentialEcMemberLruserid;
	}

	@Override
	public void setPotentialEcMemberLruserid(long potentialEcMemberLruserid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_potentialEcMemberLruserid = potentialEcMemberLruserid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPotentialEcMemberLruserid() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("potential_ec_member_lruserid"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(EcMemberRequest.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EcMemberRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> commentsMap = getCommentsMap();

		for (Map.Entry<Locale, String> entry : commentsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getComments();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			EcMemberRequest.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String comments = getComments(defaultLocale);

		if (Validator.isNull(comments)) {
			setComments(getComments(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setComments(
				getComments(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public EcMemberRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EcMemberRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EcMemberRequestImpl ecMemberRequestImpl = new EcMemberRequestImpl();

		ecMemberRequestImpl.setUuid(getUuid());
		ecMemberRequestImpl.setEcMemberRequestId(getEcMemberRequestId());
		ecMemberRequestImpl.setGroupId(getGroupId());
		ecMemberRequestImpl.setCompanyId(getCompanyId());
		ecMemberRequestImpl.setCreateDate(getCreateDate());
		ecMemberRequestImpl.setModifiedDate(getModifiedDate());
		ecMemberRequestImpl.setProgramId(getProgramId());
		ecMemberRequestImpl.setPotentialEcMemberId(getPotentialEcMemberId());
		ecMemberRequestImpl.setPotentialEcMemberRoleId(
			getPotentialEcMemberRoleId());
		ecMemberRequestImpl.setLatestEcMemberRequestStateId(
			getLatestEcMemberRequestStateId());
		ecMemberRequestImpl.setCoveringLetterId(getCoveringLetterId());
		ecMemberRequestImpl.setCvId(getCvId());
		ecMemberRequestImpl.setNoObjectionLetterId(getNoObjectionLetterId());
		ecMemberRequestImpl.setPassportCopyId(getPassportCopyId());
		ecMemberRequestImpl.setNationalIdCopyId(getNationalIdCopyId());
		ecMemberRequestImpl.setQararRequestId(getQararRequestId());
		ecMemberRequestImpl.setQararDocId(getQararDocId());
		ecMemberRequestImpl.setComments(getComments());
		ecMemberRequestImpl.setPotentialEcMemberLruserid(
			getPotentialEcMemberLruserid());
		ecMemberRequestImpl.setStatus(getStatus());
		ecMemberRequestImpl.setStatusByUserId(getStatusByUserId());
		ecMemberRequestImpl.setStatusByUserName(getStatusByUserName());
		ecMemberRequestImpl.setStatusDate(getStatusDate());
		ecMemberRequestImpl.setUserName(getUserName());
		ecMemberRequestImpl.setUserId(getUserId());

		ecMemberRequestImpl.resetOriginalValues();

		return ecMemberRequestImpl;
	}

	@Override
	public EcMemberRequest cloneWithOriginalValues() {
		EcMemberRequestImpl ecMemberRequestImpl = new EcMemberRequestImpl();

		ecMemberRequestImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		ecMemberRequestImpl.setEcMemberRequestId(
			this.<Long>getColumnOriginalValue("ec_member_request_id"));
		ecMemberRequestImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		ecMemberRequestImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		ecMemberRequestImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		ecMemberRequestImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		ecMemberRequestImpl.setProgramId(
			this.<Long>getColumnOriginalValue("program_id"));
		ecMemberRequestImpl.setPotentialEcMemberId(
			this.<Long>getColumnOriginalValue("potential_ec_member_id"));
		ecMemberRequestImpl.setPotentialEcMemberRoleId(
			this.<Long>getColumnOriginalValue("potential_ec_member_role_id"));
		ecMemberRequestImpl.setLatestEcMemberRequestStateId(
			this.<Long>getColumnOriginalValue(
				"latest_ec_member_request_state_id"));
		ecMemberRequestImpl.setCoveringLetterId(
			this.<Long>getColumnOriginalValue("covering_letter_id"));
		ecMemberRequestImpl.setCvId(this.<Long>getColumnOriginalValue("cv_id"));
		ecMemberRequestImpl.setNoObjectionLetterId(
			this.<Long>getColumnOriginalValue("no_objection_letter_id"));
		ecMemberRequestImpl.setPassportCopyId(
			this.<Long>getColumnOriginalValue("passport_copy_id"));
		ecMemberRequestImpl.setNationalIdCopyId(
			this.<Long>getColumnOriginalValue("national_id_copy_id"));
		ecMemberRequestImpl.setQararRequestId(
			this.<Long>getColumnOriginalValue("qarar_request_id"));
		ecMemberRequestImpl.setQararDocId(
			this.<Long>getColumnOriginalValue("qarar_doc_id"));
		ecMemberRequestImpl.setComments(
			this.<String>getColumnOriginalValue("comments"));
		ecMemberRequestImpl.setPotentialEcMemberLruserid(
			this.<Long>getColumnOriginalValue("potential_ec_member_lruserid"));
		ecMemberRequestImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		ecMemberRequestImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		ecMemberRequestImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		ecMemberRequestImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		ecMemberRequestImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ecMemberRequestImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));

		return ecMemberRequestImpl;
	}

	@Override
	public int compareTo(EcMemberRequest ecMemberRequest) {
		long primaryKey = ecMemberRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EcMemberRequest)) {
			return false;
		}

		EcMemberRequest ecMemberRequest = (EcMemberRequest)object;

		long primaryKey = ecMemberRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EcMemberRequest> toCacheModel() {
		EcMemberRequestCacheModel ecMemberRequestCacheModel =
			new EcMemberRequestCacheModel();

		ecMemberRequestCacheModel.uuid = getUuid();

		String uuid = ecMemberRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ecMemberRequestCacheModel.uuid = null;
		}

		ecMemberRequestCacheModel.ecMemberRequestId = getEcMemberRequestId();

		ecMemberRequestCacheModel.groupId = getGroupId();

		ecMemberRequestCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ecMemberRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			ecMemberRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ecMemberRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ecMemberRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ecMemberRequestCacheModel.programId = getProgramId();

		ecMemberRequestCacheModel.potentialEcMemberId =
			getPotentialEcMemberId();

		ecMemberRequestCacheModel.potentialEcMemberRoleId =
			getPotentialEcMemberRoleId();

		ecMemberRequestCacheModel.latestEcMemberRequestStateId =
			getLatestEcMemberRequestStateId();

		ecMemberRequestCacheModel.coveringLetterId = getCoveringLetterId();

		ecMemberRequestCacheModel.cvId = getCvId();

		ecMemberRequestCacheModel.noObjectionLetterId =
			getNoObjectionLetterId();

		ecMemberRequestCacheModel.passportCopyId = getPassportCopyId();

		ecMemberRequestCacheModel.nationalIdCopyId = getNationalIdCopyId();

		ecMemberRequestCacheModel.qararRequestId = getQararRequestId();

		ecMemberRequestCacheModel.qararDocId = getQararDocId();

		ecMemberRequestCacheModel.comments = getComments();

		String comments = ecMemberRequestCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			ecMemberRequestCacheModel.comments = null;
		}

		ecMemberRequestCacheModel.potentialEcMemberLruserid =
			getPotentialEcMemberLruserid();

		ecMemberRequestCacheModel.status = getStatus();

		ecMemberRequestCacheModel.statusByUserId = getStatusByUserId();

		ecMemberRequestCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = ecMemberRequestCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			ecMemberRequestCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			ecMemberRequestCacheModel.statusDate = statusDate.getTime();
		}
		else {
			ecMemberRequestCacheModel.statusDate = Long.MIN_VALUE;
		}

		ecMemberRequestCacheModel.userName = getUserName();

		String userName = ecMemberRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ecMemberRequestCacheModel.userName = null;
		}

		ecMemberRequestCacheModel.userId = getUserId();

		return ecMemberRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EcMemberRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EcMemberRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EcMemberRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((EcMemberRequest)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EcMemberRequest>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EcMemberRequest.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _ecMemberRequestId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _programId;
	private long _potentialEcMemberId;
	private long _potentialEcMemberRoleId;
	private long _latestEcMemberRequestStateId;
	private long _coveringLetterId;
	private long _cvId;
	private long _noObjectionLetterId;
	private long _passportCopyId;
	private long _nationalIdCopyId;
	private long _qararRequestId;
	private long _qararDocId;
	private String _comments;
	private String _commentsCurrentLanguageId;
	private long _potentialEcMemberLruserid;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _userName;
	private long _userId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EcMemberRequest, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EcMemberRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("ec_member_request_id", _ecMemberRequestId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("program_id", _programId);
		_columnOriginalValues.put(
			"potential_ec_member_id", _potentialEcMemberId);
		_columnOriginalValues.put(
			"potential_ec_member_role_id", _potentialEcMemberRoleId);
		_columnOriginalValues.put(
			"latest_ec_member_request_state_id", _latestEcMemberRequestStateId);
		_columnOriginalValues.put("covering_letter_id", _coveringLetterId);
		_columnOriginalValues.put("cv_id", _cvId);
		_columnOriginalValues.put(
			"no_objection_letter_id", _noObjectionLetterId);
		_columnOriginalValues.put("passport_copy_id", _passportCopyId);
		_columnOriginalValues.put("national_id_copy_id", _nationalIdCopyId);
		_columnOriginalValues.put("qarar_request_id", _qararRequestId);
		_columnOriginalValues.put("qarar_doc_id", _qararDocId);
		_columnOriginalValues.put("comments", _comments);
		_columnOriginalValues.put(
			"potential_ec_member_lruserid", _potentialEcMemberLruserid);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("userId", _userId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("ec_member_request_id", "ecMemberRequestId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("program_id", "programId");
		attributeNames.put("potential_ec_member_id", "potentialEcMemberId");
		attributeNames.put(
			"potential_ec_member_role_id", "potentialEcMemberRoleId");
		attributeNames.put(
			"latest_ec_member_request_state_id",
			"latestEcMemberRequestStateId");
		attributeNames.put("covering_letter_id", "coveringLetterId");
		attributeNames.put("cv_id", "cvId");
		attributeNames.put("no_objection_letter_id", "noObjectionLetterId");
		attributeNames.put("passport_copy_id", "passportCopyId");
		attributeNames.put("national_id_copy_id", "nationalIdCopyId");
		attributeNames.put("qarar_request_id", "qararRequestId");
		attributeNames.put("qarar_doc_id", "qararDocId");
		attributeNames.put(
			"potential_ec_member_lruserid", "potentialEcMemberLruserid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("ec_member_request_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("modified_date", 32L);

		columnBitmasks.put("program_id", 64L);

		columnBitmasks.put("potential_ec_member_id", 128L);

		columnBitmasks.put("potential_ec_member_role_id", 256L);

		columnBitmasks.put("latest_ec_member_request_state_id", 512L);

		columnBitmasks.put("covering_letter_id", 1024L);

		columnBitmasks.put("cv_id", 2048L);

		columnBitmasks.put("no_objection_letter_id", 4096L);

		columnBitmasks.put("passport_copy_id", 8192L);

		columnBitmasks.put("national_id_copy_id", 16384L);

		columnBitmasks.put("qarar_request_id", 32768L);

		columnBitmasks.put("qarar_doc_id", 65536L);

		columnBitmasks.put("comments", 131072L);

		columnBitmasks.put("potential_ec_member_lruserid", 262144L);

		columnBitmasks.put("status", 524288L);

		columnBitmasks.put("statusByUserId", 1048576L);

		columnBitmasks.put("statusByUserName", 2097152L);

		columnBitmasks.put("statusDate", 4194304L);

		columnBitmasks.put("userName", 8388608L);

		columnBitmasks.put("userId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EcMemberRequest _escapedModel;

}