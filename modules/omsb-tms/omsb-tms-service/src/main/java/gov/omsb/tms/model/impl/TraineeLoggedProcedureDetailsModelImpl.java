/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.TraineeLoggedProcedureDetails;
import gov.omsb.tms.model.TraineeLoggedProcedureDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TraineeLoggedProcedureDetails service. Represents a row in the &quot;trainee_logged_procedure_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TraineeLoggedProcedureDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TraineeLoggedProcedureDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TraineeLoggedProcedureDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class TraineeLoggedProcedureDetailsModelImpl
	extends BaseModelImpl<TraineeLoggedProcedureDetails>
	implements TraineeLoggedProcedureDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trainee logged procedure details model instance should use the <code>TraineeLoggedProcedureDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "trainee_logged_procedure_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR},
		{"trainee_logged_procedure_details_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"created_by", Types.BIGINT},
		{"modified_date", Types.TIMESTAMP}, {"modified_by", Types.BIGINT},
		{"program_duration_id", Types.BIGINT}, {"rotation_id", Types.BIGINT},
		{"trainee_level_id", Types.BIGINT},
		{"procedure_group_id", Types.BIGINT}, {"procedure_id", Types.BIGINT},
		{"gender_id", Types.BIGINT}, {"patient_type_id", Types.BIGINT},
		{"visit_type_id", Types.BIGINT}, {"cpt_code", Types.VARCHAR},
		{"training_sites_id", Types.BIGINT}, {"role_type_id", Types.BIGINT},
		{"faculty_id", Types.BIGINT}, {"trainee_id", Types.BIGINT},
		{"patient_id", Types.VARCHAR}, {"patient_dob", Types.TIMESTAMP},
		{"procedure_performed_date", Types.TIMESTAMP},
		{"diagnosis_description", Types.VARCHAR},
		{"trainee_comments", Types.VARCHAR},
		{"supervisor_comments", Types.VARCHAR},
		{"procedure_status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put(
			"trainee_logged_procedure_details_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("program_duration_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rotation_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trainee_level_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("procedure_group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("procedure_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gender_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("patient_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("visit_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cpt_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("training_sites_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("role_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("faculty_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trainee_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("patient_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("patient_dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("procedure_performed_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("diagnosis_description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainee_comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supervisor_comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procedure_status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table trainee_logged_procedure_details (uuid_ VARCHAR(75) null,trainee_logged_procedure_details_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,created_by LONG,modified_date DATE null,modified_by LONG,program_duration_id LONG,rotation_id LONG,trainee_level_id LONG,procedure_group_id LONG,procedure_id LONG,gender_id LONG,patient_type_id LONG,visit_type_id LONG,cpt_code STRING null,training_sites_id LONG,role_type_id LONG,faculty_id LONG,trainee_id LONG,patient_id VARCHAR(75) null,patient_dob DATE null,procedure_performed_date DATE null,diagnosis_description STRING null,trainee_comments STRING null,supervisor_comments STRING null,procedure_status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table trainee_logged_procedure_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY traineeLoggedProcedureDetails.traineeLoggedProcedureDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY trainee_logged_procedure_details.trainee_logged_procedure_details_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PATIENTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAINEEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAINEELOGGEDPROCEDUREDETAILSID_COLUMN_BITMASK =
		32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TraineeLoggedProcedureDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _traineeLoggedProcedureDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTraineeLoggedProcedureDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _traineeLoggedProcedureDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TraineeLoggedProcedureDetails.class;
	}

	@Override
	public String getModelClassName() {
		return TraineeLoggedProcedureDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TraineeLoggedProcedureDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TraineeLoggedProcedureDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TraineeLoggedProcedureDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TraineeLoggedProcedureDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TraineeLoggedProcedureDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TraineeLoggedProcedureDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TraineeLoggedProcedureDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TraineeLoggedProcedureDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TraineeLoggedProcedureDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<TraineeLoggedProcedureDetails, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<TraineeLoggedProcedureDetails, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<TraineeLoggedProcedureDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TraineeLoggedProcedureDetails, Object>>();
		Map<String, BiConsumer<TraineeLoggedProcedureDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<TraineeLoggedProcedureDetails, ?>>();

		attributeGetterFunctions.put(
			"uuid", TraineeLoggedProcedureDetails::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setUuid);
		attributeGetterFunctions.put(
			"traineeLoggedProcedureDetailsId",
			TraineeLoggedProcedureDetails::getTraineeLoggedProcedureDetailsId);
		attributeSetterBiConsumers.put(
			"traineeLoggedProcedureDetailsId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::
					setTraineeLoggedProcedureDetailsId);
		attributeGetterFunctions.put(
			"groupId", TraineeLoggedProcedureDetails::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setGroupId);
		attributeGetterFunctions.put(
			"companyId", TraineeLoggedProcedureDetails::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", TraineeLoggedProcedureDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TraineeLoggedProcedureDetails, Date>)
				TraineeLoggedProcedureDetails::setCreateDate);
		attributeGetterFunctions.put(
			"createdBy", TraineeLoggedProcedureDetails::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", TraineeLoggedProcedureDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TraineeLoggedProcedureDetails, Date>)
				TraineeLoggedProcedureDetails::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedBy", TraineeLoggedProcedureDetails::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setModifiedBy);
		attributeGetterFunctions.put(
			"programDurationId",
			TraineeLoggedProcedureDetails::getProgramDurationId);
		attributeSetterBiConsumers.put(
			"programDurationId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setProgramDurationId);
		attributeGetterFunctions.put(
			"rotationId", TraineeLoggedProcedureDetails::getRotationId);
		attributeSetterBiConsumers.put(
			"rotationId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setRotationId);
		attributeGetterFunctions.put(
			"traineeLevelId", TraineeLoggedProcedureDetails::getTraineeLevelId);
		attributeSetterBiConsumers.put(
			"traineeLevelId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setTraineeLevelId);
		attributeGetterFunctions.put(
			"procedureGroupId",
			TraineeLoggedProcedureDetails::getProcedureGroupId);
		attributeSetterBiConsumers.put(
			"procedureGroupId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setProcedureGroupId);
		attributeGetterFunctions.put(
			"procedureId", TraineeLoggedProcedureDetails::getProcedureId);
		attributeSetterBiConsumers.put(
			"procedureId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setProcedureId);
		attributeGetterFunctions.put(
			"genderId", TraineeLoggedProcedureDetails::getGenderId);
		attributeSetterBiConsumers.put(
			"genderId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setGenderId);
		attributeGetterFunctions.put(
			"patientTypeId", TraineeLoggedProcedureDetails::getPatientTypeId);
		attributeSetterBiConsumers.put(
			"patientTypeId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setPatientTypeId);
		attributeGetterFunctions.put(
			"visitTypeId", TraineeLoggedProcedureDetails::getVisitTypeId);
		attributeSetterBiConsumers.put(
			"visitTypeId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setVisitTypeId);
		attributeGetterFunctions.put(
			"cptCode", TraineeLoggedProcedureDetails::getCptCode);
		attributeSetterBiConsumers.put(
			"cptCode",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setCptCode);
		attributeGetterFunctions.put(
			"trainingSitesId",
			TraineeLoggedProcedureDetails::getTrainingSitesId);
		attributeSetterBiConsumers.put(
			"trainingSitesId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setTrainingSitesId);
		attributeGetterFunctions.put(
			"roleTypeId", TraineeLoggedProcedureDetails::getRoleTypeId);
		attributeSetterBiConsumers.put(
			"roleTypeId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setRoleTypeId);
		attributeGetterFunctions.put(
			"facultyId", TraineeLoggedProcedureDetails::getFacultyId);
		attributeSetterBiConsumers.put(
			"facultyId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setFacultyId);
		attributeGetterFunctions.put(
			"traineeId", TraineeLoggedProcedureDetails::getTraineeId);
		attributeSetterBiConsumers.put(
			"traineeId",
			(BiConsumer<TraineeLoggedProcedureDetails, Long>)
				TraineeLoggedProcedureDetails::setTraineeId);
		attributeGetterFunctions.put(
			"patientId", TraineeLoggedProcedureDetails::getPatientId);
		attributeSetterBiConsumers.put(
			"patientId",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setPatientId);
		attributeGetterFunctions.put(
			"patientDOB", TraineeLoggedProcedureDetails::getPatientDOB);
		attributeSetterBiConsumers.put(
			"patientDOB",
			(BiConsumer<TraineeLoggedProcedureDetails, Date>)
				TraineeLoggedProcedureDetails::setPatientDOB);
		attributeGetterFunctions.put(
			"procedurePerformedDate",
			TraineeLoggedProcedureDetails::getProcedurePerformedDate);
		attributeSetterBiConsumers.put(
			"procedurePerformedDate",
			(BiConsumer<TraineeLoggedProcedureDetails, Date>)
				TraineeLoggedProcedureDetails::setProcedurePerformedDate);
		attributeGetterFunctions.put(
			"diagnosisDescription",
			TraineeLoggedProcedureDetails::getDiagnosisDescription);
		attributeSetterBiConsumers.put(
			"diagnosisDescription",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setDiagnosisDescription);
		attributeGetterFunctions.put(
			"traineeComments",
			TraineeLoggedProcedureDetails::getTraineeComments);
		attributeSetterBiConsumers.put(
			"traineeComments",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setTraineeComments);
		attributeGetterFunctions.put(
			"supervisorComments",
			TraineeLoggedProcedureDetails::getSupervisorComments);
		attributeSetterBiConsumers.put(
			"supervisorComments",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setSupervisorComments);
		attributeGetterFunctions.put(
			"procedureStatus",
			TraineeLoggedProcedureDetails::getProcedureStatus);
		attributeSetterBiConsumers.put(
			"procedureStatus",
			(BiConsumer<TraineeLoggedProcedureDetails, String>)
				TraineeLoggedProcedureDetails::setProcedureStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getTraineeLoggedProcedureDetailsId() {
		return _traineeLoggedProcedureDetailsId;
	}

	@Override
	public void setTraineeLoggedProcedureDetailsId(
		long traineeLoggedProcedureDetailsId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeLoggedProcedureDetailsId = traineeLoggedProcedureDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public long getProgramDurationId() {
		return _programDurationId;
	}

	@Override
	public void setProgramDurationId(long programDurationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programDurationId = programDurationId;
	}

	@JSON
	@Override
	public long getRotationId() {
		return _rotationId;
	}

	@Override
	public void setRotationId(long rotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationId = rotationId;
	}

	@JSON
	@Override
	public long getTraineeLevelId() {
		return _traineeLevelId;
	}

	@Override
	public void setTraineeLevelId(long traineeLevelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeLevelId = traineeLevelId;
	}

	@JSON
	@Override
	public long getProcedureGroupId() {
		return _procedureGroupId;
	}

	@Override
	public void setProcedureGroupId(long procedureGroupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procedureGroupId = procedureGroupId;
	}

	@JSON
	@Override
	public long getProcedureId() {
		return _procedureId;
	}

	@Override
	public void setProcedureId(long procedureId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procedureId = procedureId;
	}

	@JSON
	@Override
	public long getGenderId() {
		return _genderId;
	}

	@Override
	public void setGenderId(long genderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_genderId = genderId;
	}

	@JSON
	@Override
	public long getPatientTypeId() {
		return _patientTypeId;
	}

	@Override
	public void setPatientTypeId(long patientTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientTypeId = patientTypeId;
	}

	@JSON
	@Override
	public long getVisitTypeId() {
		return _visitTypeId;
	}

	@Override
	public void setVisitTypeId(long visitTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_visitTypeId = visitTypeId;
	}

	@JSON
	@Override
	public String getCptCode() {
		if (_cptCode == null) {
			return "";
		}
		else {
			return _cptCode;
		}
	}

	@Override
	public String getCptCode(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCptCode(languageId);
	}

	@Override
	public String getCptCode(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCptCode(languageId, useDefault);
	}

	@Override
	public String getCptCode(String languageId) {
		return LocalizationUtil.getLocalization(getCptCode(), languageId);
	}

	@Override
	public String getCptCode(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getCptCode(), languageId, useDefault);
	}

	@Override
	public String getCptCodeCurrentLanguageId() {
		return _cptCodeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCptCodeCurrentValue() {
		Locale locale = getLocale(_cptCodeCurrentLanguageId);

		return getCptCode(locale);
	}

	@Override
	public Map<Locale, String> getCptCodeMap() {
		return LocalizationUtil.getLocalizationMap(getCptCode());
	}

	@Override
	public void setCptCode(String cptCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cptCode = cptCode;
	}

	@Override
	public void setCptCode(String cptCode, Locale locale) {
		setCptCode(cptCode, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setCptCode(
		String cptCode, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(cptCode)) {
			setCptCode(
				LocalizationUtil.updateLocalization(
					getCptCode(), "CptCode", cptCode, languageId,
					defaultLanguageId));
		}
		else {
			setCptCode(
				LocalizationUtil.removeLocalization(
					getCptCode(), "CptCode", languageId));
		}
	}

	@Override
	public void setCptCodeCurrentLanguageId(String languageId) {
		_cptCodeCurrentLanguageId = languageId;
	}

	@Override
	public void setCptCodeMap(Map<Locale, String> cptCodeMap) {
		setCptCodeMap(cptCodeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setCptCodeMap(
		Map<Locale, String> cptCodeMap, Locale defaultLocale) {

		if (cptCodeMap == null) {
			return;
		}

		setCptCode(
			LocalizationUtil.updateLocalization(
				cptCodeMap, getCptCode(), "CptCode",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getTrainingSitesId() {
		return _trainingSitesId;
	}

	@Override
	public void setTrainingSitesId(long trainingSitesId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSitesId = trainingSitesId;
	}

	@JSON
	@Override
	public long getRoleTypeId() {
		return _roleTypeId;
	}

	@Override
	public void setRoleTypeId(long roleTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roleTypeId = roleTypeId;
	}

	@JSON
	@Override
	public long getFacultyId() {
		return _facultyId;
	}

	@Override
	public void setFacultyId(long facultyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_facultyId = facultyId;
	}

	@JSON
	@Override
	public long getTraineeId() {
		return _traineeId;
	}

	@Override
	public void setTraineeId(long traineeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeId = traineeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTraineeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("trainee_id"));
	}

	@JSON
	@Override
	public String getPatientId() {
		if (_patientId == null) {
			return "";
		}
		else {
			return _patientId;
		}
	}

	@Override
	public void setPatientId(String patientId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientId = patientId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPatientId() {
		return getColumnOriginalValue("patient_id");
	}

	@JSON
	@Override
	public Date getPatientDOB() {
		return _patientDOB;
	}

	@Override
	public void setPatientDOB(Date patientDOB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientDOB = patientDOB;
	}

	@JSON
	@Override
	public Date getProcedurePerformedDate() {
		return _procedurePerformedDate;
	}

	@Override
	public void setProcedurePerformedDate(Date procedurePerformedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procedurePerformedDate = procedurePerformedDate;
	}

	@JSON
	@Override
	public String getDiagnosisDescription() {
		if (_diagnosisDescription == null) {
			return "";
		}
		else {
			return _diagnosisDescription;
		}
	}

	@Override
	public String getDiagnosisDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDiagnosisDescription(languageId);
	}

	@Override
	public String getDiagnosisDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDiagnosisDescription(languageId, useDefault);
	}

	@Override
	public String getDiagnosisDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getDiagnosisDescription(), languageId);
	}

	@Override
	public String getDiagnosisDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDiagnosisDescription(), languageId, useDefault);
	}

	@Override
	public String getDiagnosisDescriptionCurrentLanguageId() {
		return _diagnosisDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDiagnosisDescriptionCurrentValue() {
		Locale locale = getLocale(_diagnosisDescriptionCurrentLanguageId);

		return getDiagnosisDescription(locale);
	}

	@Override
	public Map<Locale, String> getDiagnosisDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDiagnosisDescription());
	}

	@Override
	public void setDiagnosisDescription(String diagnosisDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_diagnosisDescription = diagnosisDescription;
	}

	@Override
	public void setDiagnosisDescription(
		String diagnosisDescription, Locale locale) {

		setDiagnosisDescription(
			diagnosisDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDiagnosisDescription(
		String diagnosisDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(diagnosisDescription)) {
			setDiagnosisDescription(
				LocalizationUtil.updateLocalization(
					getDiagnosisDescription(), "DiagnosisDescription",
					diagnosisDescription, languageId, defaultLanguageId));
		}
		else {
			setDiagnosisDescription(
				LocalizationUtil.removeLocalization(
					getDiagnosisDescription(), "DiagnosisDescription",
					languageId));
		}
	}

	@Override
	public void setDiagnosisDescriptionCurrentLanguageId(String languageId) {
		_diagnosisDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDiagnosisDescriptionMap(
		Map<Locale, String> diagnosisDescriptionMap) {

		setDiagnosisDescriptionMap(
			diagnosisDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDiagnosisDescriptionMap(
		Map<Locale, String> diagnosisDescriptionMap, Locale defaultLocale) {

		if (diagnosisDescriptionMap == null) {
			return;
		}

		setDiagnosisDescription(
			LocalizationUtil.updateLocalization(
				diagnosisDescriptionMap, getDiagnosisDescription(),
				"DiagnosisDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getTraineeComments() {
		if (_traineeComments == null) {
			return "";
		}
		else {
			return _traineeComments;
		}
	}

	@Override
	public String getTraineeComments(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTraineeComments(languageId);
	}

	@Override
	public String getTraineeComments(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTraineeComments(languageId, useDefault);
	}

	@Override
	public String getTraineeComments(String languageId) {
		return LocalizationUtil.getLocalization(
			getTraineeComments(), languageId);
	}

	@Override
	public String getTraineeComments(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTraineeComments(), languageId, useDefault);
	}

	@Override
	public String getTraineeCommentsCurrentLanguageId() {
		return _traineeCommentsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTraineeCommentsCurrentValue() {
		Locale locale = getLocale(_traineeCommentsCurrentLanguageId);

		return getTraineeComments(locale);
	}

	@Override
	public Map<Locale, String> getTraineeCommentsMap() {
		return LocalizationUtil.getLocalizationMap(getTraineeComments());
	}

	@Override
	public void setTraineeComments(String traineeComments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeComments = traineeComments;
	}

	@Override
	public void setTraineeComments(String traineeComments, Locale locale) {
		setTraineeComments(traineeComments, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTraineeComments(
		String traineeComments, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(traineeComments)) {
			setTraineeComments(
				LocalizationUtil.updateLocalization(
					getTraineeComments(), "TraineeComments", traineeComments,
					languageId, defaultLanguageId));
		}
		else {
			setTraineeComments(
				LocalizationUtil.removeLocalization(
					getTraineeComments(), "TraineeComments", languageId));
		}
	}

	@Override
	public void setTraineeCommentsCurrentLanguageId(String languageId) {
		_traineeCommentsCurrentLanguageId = languageId;
	}

	@Override
	public void setTraineeCommentsMap(Map<Locale, String> traineeCommentsMap) {
		setTraineeCommentsMap(traineeCommentsMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTraineeCommentsMap(
		Map<Locale, String> traineeCommentsMap, Locale defaultLocale) {

		if (traineeCommentsMap == null) {
			return;
		}

		setTraineeComments(
			LocalizationUtil.updateLocalization(
				traineeCommentsMap, getTraineeComments(), "TraineeComments",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSupervisorComments() {
		if (_supervisorComments == null) {
			return "";
		}
		else {
			return _supervisorComments;
		}
	}

	@Override
	public String getSupervisorComments(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSupervisorComments(languageId);
	}

	@Override
	public String getSupervisorComments(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSupervisorComments(languageId, useDefault);
	}

	@Override
	public String getSupervisorComments(String languageId) {
		return LocalizationUtil.getLocalization(
			getSupervisorComments(), languageId);
	}

	@Override
	public String getSupervisorComments(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSupervisorComments(), languageId, useDefault);
	}

	@Override
	public String getSupervisorCommentsCurrentLanguageId() {
		return _supervisorCommentsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSupervisorCommentsCurrentValue() {
		Locale locale = getLocale(_supervisorCommentsCurrentLanguageId);

		return getSupervisorComments(locale);
	}

	@Override
	public Map<Locale, String> getSupervisorCommentsMap() {
		return LocalizationUtil.getLocalizationMap(getSupervisorComments());
	}

	@Override
	public void setSupervisorComments(String supervisorComments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_supervisorComments = supervisorComments;
	}

	@Override
	public void setSupervisorComments(
		String supervisorComments, Locale locale) {

		setSupervisorComments(
			supervisorComments, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSupervisorComments(
		String supervisorComments, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(supervisorComments)) {
			setSupervisorComments(
				LocalizationUtil.updateLocalization(
					getSupervisorComments(), "SupervisorComments",
					supervisorComments, languageId, defaultLanguageId));
		}
		else {
			setSupervisorComments(
				LocalizationUtil.removeLocalization(
					getSupervisorComments(), "SupervisorComments", languageId));
		}
	}

	@Override
	public void setSupervisorCommentsCurrentLanguageId(String languageId) {
		_supervisorCommentsCurrentLanguageId = languageId;
	}

	@Override
	public void setSupervisorCommentsMap(
		Map<Locale, String> supervisorCommentsMap) {

		setSupervisorCommentsMap(
			supervisorCommentsMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSupervisorCommentsMap(
		Map<Locale, String> supervisorCommentsMap, Locale defaultLocale) {

		if (supervisorCommentsMap == null) {
			return;
		}

		setSupervisorComments(
			LocalizationUtil.updateLocalization(
				supervisorCommentsMap, getSupervisorComments(),
				"SupervisorComments", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getProcedureStatus() {
		if (_procedureStatus == null) {
			return "";
		}
		else {
			return _procedureStatus;
		}
	}

	@Override
	public void setProcedureStatus(String procedureStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procedureStatus = procedureStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				TraineeLoggedProcedureDetails.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TraineeLoggedProcedureDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> cptCodeMap = getCptCodeMap();

		for (Map.Entry<Locale, String> entry : cptCodeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> diagnosisDescriptionMap =
			getDiagnosisDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				diagnosisDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> traineeCommentsMap = getTraineeCommentsMap();

		for (Map.Entry<Locale, String> entry : traineeCommentsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> supervisorCommentsMap = getSupervisorCommentsMap();

		for (Map.Entry<Locale, String> entry :
				supervisorCommentsMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getCptCode();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			TraineeLoggedProcedureDetails.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String cptCode = getCptCode(defaultLocale);

		if (Validator.isNull(cptCode)) {
			setCptCode(getCptCode(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setCptCode(getCptCode(defaultLocale), defaultLocale, defaultLocale);
		}

		String diagnosisDescription = getDiagnosisDescription(defaultLocale);

		if (Validator.isNull(diagnosisDescription)) {
			setDiagnosisDescription(
				getDiagnosisDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDiagnosisDescription(
				getDiagnosisDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String traineeComments = getTraineeComments(defaultLocale);

		if (Validator.isNull(traineeComments)) {
			setTraineeComments(
				getTraineeComments(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTraineeComments(
				getTraineeComments(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String supervisorComments = getSupervisorComments(defaultLocale);

		if (Validator.isNull(supervisorComments)) {
			setSupervisorComments(
				getSupervisorComments(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSupervisorComments(
				getSupervisorComments(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public TraineeLoggedProcedureDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TraineeLoggedProcedureDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TraineeLoggedProcedureDetailsImpl traineeLoggedProcedureDetailsImpl =
			new TraineeLoggedProcedureDetailsImpl();

		traineeLoggedProcedureDetailsImpl.setUuid(getUuid());
		traineeLoggedProcedureDetailsImpl.setTraineeLoggedProcedureDetailsId(
			getTraineeLoggedProcedureDetailsId());
		traineeLoggedProcedureDetailsImpl.setGroupId(getGroupId());
		traineeLoggedProcedureDetailsImpl.setCompanyId(getCompanyId());
		traineeLoggedProcedureDetailsImpl.setCreateDate(getCreateDate());
		traineeLoggedProcedureDetailsImpl.setCreatedBy(getCreatedBy());
		traineeLoggedProcedureDetailsImpl.setModifiedDate(getModifiedDate());
		traineeLoggedProcedureDetailsImpl.setModifiedBy(getModifiedBy());
		traineeLoggedProcedureDetailsImpl.setProgramDurationId(
			getProgramDurationId());
		traineeLoggedProcedureDetailsImpl.setRotationId(getRotationId());
		traineeLoggedProcedureDetailsImpl.setTraineeLevelId(
			getTraineeLevelId());
		traineeLoggedProcedureDetailsImpl.setProcedureGroupId(
			getProcedureGroupId());
		traineeLoggedProcedureDetailsImpl.setProcedureId(getProcedureId());
		traineeLoggedProcedureDetailsImpl.setGenderId(getGenderId());
		traineeLoggedProcedureDetailsImpl.setPatientTypeId(getPatientTypeId());
		traineeLoggedProcedureDetailsImpl.setVisitTypeId(getVisitTypeId());
		traineeLoggedProcedureDetailsImpl.setCptCode(getCptCode());
		traineeLoggedProcedureDetailsImpl.setTrainingSitesId(
			getTrainingSitesId());
		traineeLoggedProcedureDetailsImpl.setRoleTypeId(getRoleTypeId());
		traineeLoggedProcedureDetailsImpl.setFacultyId(getFacultyId());
		traineeLoggedProcedureDetailsImpl.setTraineeId(getTraineeId());
		traineeLoggedProcedureDetailsImpl.setPatientId(getPatientId());
		traineeLoggedProcedureDetailsImpl.setPatientDOB(getPatientDOB());
		traineeLoggedProcedureDetailsImpl.setProcedurePerformedDate(
			getProcedurePerformedDate());
		traineeLoggedProcedureDetailsImpl.setDiagnosisDescription(
			getDiagnosisDescription());
		traineeLoggedProcedureDetailsImpl.setTraineeComments(
			getTraineeComments());
		traineeLoggedProcedureDetailsImpl.setSupervisorComments(
			getSupervisorComments());
		traineeLoggedProcedureDetailsImpl.setProcedureStatus(
			getProcedureStatus());

		traineeLoggedProcedureDetailsImpl.resetOriginalValues();

		return traineeLoggedProcedureDetailsImpl;
	}

	@Override
	public TraineeLoggedProcedureDetails cloneWithOriginalValues() {
		TraineeLoggedProcedureDetailsImpl traineeLoggedProcedureDetailsImpl =
			new TraineeLoggedProcedureDetailsImpl();

		traineeLoggedProcedureDetailsImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		traineeLoggedProcedureDetailsImpl.setTraineeLoggedProcedureDetailsId(
			this.<Long>getColumnOriginalValue(
				"trainee_logged_procedure_details_id"));
		traineeLoggedProcedureDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		traineeLoggedProcedureDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		traineeLoggedProcedureDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		traineeLoggedProcedureDetailsImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("created_by"));
		traineeLoggedProcedureDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		traineeLoggedProcedureDetailsImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modified_by"));
		traineeLoggedProcedureDetailsImpl.setProgramDurationId(
			this.<Long>getColumnOriginalValue("program_duration_id"));
		traineeLoggedProcedureDetailsImpl.setRotationId(
			this.<Long>getColumnOriginalValue("rotation_id"));
		traineeLoggedProcedureDetailsImpl.setTraineeLevelId(
			this.<Long>getColumnOriginalValue("trainee_level_id"));
		traineeLoggedProcedureDetailsImpl.setProcedureGroupId(
			this.<Long>getColumnOriginalValue("procedure_group_id"));
		traineeLoggedProcedureDetailsImpl.setProcedureId(
			this.<Long>getColumnOriginalValue("procedure_id"));
		traineeLoggedProcedureDetailsImpl.setGenderId(
			this.<Long>getColumnOriginalValue("gender_id"));
		traineeLoggedProcedureDetailsImpl.setPatientTypeId(
			this.<Long>getColumnOriginalValue("patient_type_id"));
		traineeLoggedProcedureDetailsImpl.setVisitTypeId(
			this.<Long>getColumnOriginalValue("visit_type_id"));
		traineeLoggedProcedureDetailsImpl.setCptCode(
			this.<String>getColumnOriginalValue("cpt_code"));
		traineeLoggedProcedureDetailsImpl.setTrainingSitesId(
			this.<Long>getColumnOriginalValue("training_sites_id"));
		traineeLoggedProcedureDetailsImpl.setRoleTypeId(
			this.<Long>getColumnOriginalValue("role_type_id"));
		traineeLoggedProcedureDetailsImpl.setFacultyId(
			this.<Long>getColumnOriginalValue("faculty_id"));
		traineeLoggedProcedureDetailsImpl.setTraineeId(
			this.<Long>getColumnOriginalValue("trainee_id"));
		traineeLoggedProcedureDetailsImpl.setPatientId(
			this.<String>getColumnOriginalValue("patient_id"));
		traineeLoggedProcedureDetailsImpl.setPatientDOB(
			this.<Date>getColumnOriginalValue("patient_dob"));
		traineeLoggedProcedureDetailsImpl.setProcedurePerformedDate(
			this.<Date>getColumnOriginalValue("procedure_performed_date"));
		traineeLoggedProcedureDetailsImpl.setDiagnosisDescription(
			this.<String>getColumnOriginalValue("diagnosis_description"));
		traineeLoggedProcedureDetailsImpl.setTraineeComments(
			this.<String>getColumnOriginalValue("trainee_comments"));
		traineeLoggedProcedureDetailsImpl.setSupervisorComments(
			this.<String>getColumnOriginalValue("supervisor_comments"));
		traineeLoggedProcedureDetailsImpl.setProcedureStatus(
			this.<String>getColumnOriginalValue("procedure_status"));

		return traineeLoggedProcedureDetailsImpl;
	}

	@Override
	public int compareTo(
		TraineeLoggedProcedureDetails traineeLoggedProcedureDetails) {

		long primaryKey = traineeLoggedProcedureDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TraineeLoggedProcedureDetails)) {
			return false;
		}

		TraineeLoggedProcedureDetails traineeLoggedProcedureDetails =
			(TraineeLoggedProcedureDetails)object;

		long primaryKey = traineeLoggedProcedureDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TraineeLoggedProcedureDetails> toCacheModel() {
		TraineeLoggedProcedureDetailsCacheModel
			traineeLoggedProcedureDetailsCacheModel =
				new TraineeLoggedProcedureDetailsCacheModel();

		traineeLoggedProcedureDetailsCacheModel.uuid = getUuid();

		String uuid = traineeLoggedProcedureDetailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			traineeLoggedProcedureDetailsCacheModel.uuid = null;
		}

		traineeLoggedProcedureDetailsCacheModel.
			traineeLoggedProcedureDetailsId =
				getTraineeLoggedProcedureDetailsId();

		traineeLoggedProcedureDetailsCacheModel.groupId = getGroupId();

		traineeLoggedProcedureDetailsCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			traineeLoggedProcedureDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			traineeLoggedProcedureDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		traineeLoggedProcedureDetailsCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			traineeLoggedProcedureDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			traineeLoggedProcedureDetailsCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		traineeLoggedProcedureDetailsCacheModel.modifiedBy = getModifiedBy();

		traineeLoggedProcedureDetailsCacheModel.programDurationId =
			getProgramDurationId();

		traineeLoggedProcedureDetailsCacheModel.rotationId = getRotationId();

		traineeLoggedProcedureDetailsCacheModel.traineeLevelId =
			getTraineeLevelId();

		traineeLoggedProcedureDetailsCacheModel.procedureGroupId =
			getProcedureGroupId();

		traineeLoggedProcedureDetailsCacheModel.procedureId = getProcedureId();

		traineeLoggedProcedureDetailsCacheModel.genderId = getGenderId();

		traineeLoggedProcedureDetailsCacheModel.patientTypeId =
			getPatientTypeId();

		traineeLoggedProcedureDetailsCacheModel.visitTypeId = getVisitTypeId();

		traineeLoggedProcedureDetailsCacheModel.cptCode = getCptCode();

		String cptCode = traineeLoggedProcedureDetailsCacheModel.cptCode;

		if ((cptCode != null) && (cptCode.length() == 0)) {
			traineeLoggedProcedureDetailsCacheModel.cptCode = null;
		}

		traineeLoggedProcedureDetailsCacheModel.trainingSitesId =
			getTrainingSitesId();

		traineeLoggedProcedureDetailsCacheModel.roleTypeId = getRoleTypeId();

		traineeLoggedProcedureDetailsCacheModel.facultyId = getFacultyId();

		traineeLoggedProcedureDetailsCacheModel.traineeId = getTraineeId();

		traineeLoggedProcedureDetailsCacheModel.patientId = getPatientId();

		String patientId = traineeLoggedProcedureDetailsCacheModel.patientId;

		if ((patientId != null) && (patientId.length() == 0)) {
			traineeLoggedProcedureDetailsCacheModel.patientId = null;
		}

		Date patientDOB = getPatientDOB();

		if (patientDOB != null) {
			traineeLoggedProcedureDetailsCacheModel.patientDOB =
				patientDOB.getTime();
		}
		else {
			traineeLoggedProcedureDetailsCacheModel.patientDOB = Long.MIN_VALUE;
		}

		Date procedurePerformedDate = getProcedurePerformedDate();

		if (procedurePerformedDate != null) {
			traineeLoggedProcedureDetailsCacheModel.procedurePerformedDate =
				procedurePerformedDate.getTime();
		}
		else {
			traineeLoggedProcedureDetailsCacheModel.procedurePerformedDate =
				Long.MIN_VALUE;
		}

		traineeLoggedProcedureDetailsCacheModel.diagnosisDescription =
			getDiagnosisDescription();

		String diagnosisDescription =
			traineeLoggedProcedureDetailsCacheModel.diagnosisDescription;

		if ((diagnosisDescription != null) &&
			(diagnosisDescription.length() == 0)) {

			traineeLoggedProcedureDetailsCacheModel.diagnosisDescription = null;
		}

		traineeLoggedProcedureDetailsCacheModel.traineeComments =
			getTraineeComments();

		String traineeComments =
			traineeLoggedProcedureDetailsCacheModel.traineeComments;

		if ((traineeComments != null) && (traineeComments.length() == 0)) {
			traineeLoggedProcedureDetailsCacheModel.traineeComments = null;
		}

		traineeLoggedProcedureDetailsCacheModel.supervisorComments =
			getSupervisorComments();

		String supervisorComments =
			traineeLoggedProcedureDetailsCacheModel.supervisorComments;

		if ((supervisorComments != null) &&
			(supervisorComments.length() == 0)) {

			traineeLoggedProcedureDetailsCacheModel.supervisorComments = null;
		}

		traineeLoggedProcedureDetailsCacheModel.procedureStatus =
			getProcedureStatus();

		String procedureStatus =
			traineeLoggedProcedureDetailsCacheModel.procedureStatus;

		if ((procedureStatus != null) && (procedureStatus.length() == 0)) {
			traineeLoggedProcedureDetailsCacheModel.procedureStatus = null;
		}

		return traineeLoggedProcedureDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TraineeLoggedProcedureDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TraineeLoggedProcedureDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TraineeLoggedProcedureDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TraineeLoggedProcedureDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TraineeLoggedProcedureDetails>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TraineeLoggedProcedureDetails.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _traineeLoggedProcedureDetailsId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _programDurationId;
	private long _rotationId;
	private long _traineeLevelId;
	private long _procedureGroupId;
	private long _procedureId;
	private long _genderId;
	private long _patientTypeId;
	private long _visitTypeId;
	private String _cptCode;
	private String _cptCodeCurrentLanguageId;
	private long _trainingSitesId;
	private long _roleTypeId;
	private long _facultyId;
	private long _traineeId;
	private String _patientId;
	private Date _patientDOB;
	private Date _procedurePerformedDate;
	private String _diagnosisDescription;
	private String _diagnosisDescriptionCurrentLanguageId;
	private String _traineeComments;
	private String _traineeCommentsCurrentLanguageId;
	private String _supervisorComments;
	private String _supervisorCommentsCurrentLanguageId;
	private String _procedureStatus;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TraineeLoggedProcedureDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TraineeLoggedProcedureDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"trainee_logged_procedure_details_id",
			_traineeLoggedProcedureDetailsId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("created_by", _createdBy);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("modified_by", _modifiedBy);
		_columnOriginalValues.put("program_duration_id", _programDurationId);
		_columnOriginalValues.put("rotation_id", _rotationId);
		_columnOriginalValues.put("trainee_level_id", _traineeLevelId);
		_columnOriginalValues.put("procedure_group_id", _procedureGroupId);
		_columnOriginalValues.put("procedure_id", _procedureId);
		_columnOriginalValues.put("gender_id", _genderId);
		_columnOriginalValues.put("patient_type_id", _patientTypeId);
		_columnOriginalValues.put("visit_type_id", _visitTypeId);
		_columnOriginalValues.put("cpt_code", _cptCode);
		_columnOriginalValues.put("training_sites_id", _trainingSitesId);
		_columnOriginalValues.put("role_type_id", _roleTypeId);
		_columnOriginalValues.put("faculty_id", _facultyId);
		_columnOriginalValues.put("trainee_id", _traineeId);
		_columnOriginalValues.put("patient_id", _patientId);
		_columnOriginalValues.put("patient_dob", _patientDOB);
		_columnOriginalValues.put(
			"procedure_performed_date", _procedurePerformedDate);
		_columnOriginalValues.put(
			"diagnosis_description", _diagnosisDescription);
		_columnOriginalValues.put("trainee_comments", _traineeComments);
		_columnOriginalValues.put("supervisor_comments", _supervisorComments);
		_columnOriginalValues.put("procedure_status", _procedureStatus);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"trainee_logged_procedure_details_id",
			"traineeLoggedProcedureDetailsId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("created_by", "createdBy");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("modified_by", "modifiedBy");
		attributeNames.put("program_duration_id", "programDurationId");
		attributeNames.put("rotation_id", "rotationId");
		attributeNames.put("trainee_level_id", "traineeLevelId");
		attributeNames.put("procedure_group_id", "procedureGroupId");
		attributeNames.put("procedure_id", "procedureId");
		attributeNames.put("gender_id", "genderId");
		attributeNames.put("patient_type_id", "patientTypeId");
		attributeNames.put("visit_type_id", "visitTypeId");
		attributeNames.put("cpt_code", "cptCode");
		attributeNames.put("training_sites_id", "trainingSitesId");
		attributeNames.put("role_type_id", "roleTypeId");
		attributeNames.put("faculty_id", "facultyId");
		attributeNames.put("trainee_id", "traineeId");
		attributeNames.put("patient_id", "patientId");
		attributeNames.put("patient_dob", "patientDOB");
		attributeNames.put(
			"procedure_performed_date", "procedurePerformedDate");
		attributeNames.put("diagnosis_description", "diagnosisDescription");
		attributeNames.put("trainee_comments", "traineeComments");
		attributeNames.put("supervisor_comments", "supervisorComments");
		attributeNames.put("procedure_status", "procedureStatus");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("trainee_logged_procedure_details_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("created_by", 32L);

		columnBitmasks.put("modified_date", 64L);

		columnBitmasks.put("modified_by", 128L);

		columnBitmasks.put("program_duration_id", 256L);

		columnBitmasks.put("rotation_id", 512L);

		columnBitmasks.put("trainee_level_id", 1024L);

		columnBitmasks.put("procedure_group_id", 2048L);

		columnBitmasks.put("procedure_id", 4096L);

		columnBitmasks.put("gender_id", 8192L);

		columnBitmasks.put("patient_type_id", 16384L);

		columnBitmasks.put("visit_type_id", 32768L);

		columnBitmasks.put("cpt_code", 65536L);

		columnBitmasks.put("training_sites_id", 131072L);

		columnBitmasks.put("role_type_id", 262144L);

		columnBitmasks.put("faculty_id", 524288L);

		columnBitmasks.put("trainee_id", 1048576L);

		columnBitmasks.put("patient_id", 2097152L);

		columnBitmasks.put("patient_dob", 4194304L);

		columnBitmasks.put("procedure_performed_date", 8388608L);

		columnBitmasks.put("diagnosis_description", 16777216L);

		columnBitmasks.put("trainee_comments", 33554432L);

		columnBitmasks.put("supervisor_comments", 67108864L);

		columnBitmasks.put("procedure_status", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TraineeLoggedProcedureDetails _escapedModel;

}