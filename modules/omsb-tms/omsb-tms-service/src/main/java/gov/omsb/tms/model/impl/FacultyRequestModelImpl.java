/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import gov.omsb.tms.model.FacultyRequest;
import gov.omsb.tms.model.FacultyRequestModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FacultyRequest service. Represents a row in the &quot;faculty_request&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FacultyRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FacultyRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FacultyRequestImpl
 * @generated
 */
@JSON(strict = true)
public class FacultyRequestModelImpl
	extends BaseModelImpl<FacultyRequest> implements FacultyRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a faculty request model instance should use the <code>FacultyRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "faculty_request";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"faculty_request_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"created_by", Types.BIGINT},
		{"modified_date", Types.TIMESTAMP}, {"modified_by", Types.BIGINT},
		{"program_id", Types.BIGINT}, {"potential_faculty_id", Types.BIGINT},
		{"potential_faculty_type_id", Types.BIGINT},
		{"lastest_faculty_request_state_id", Types.BIGINT},
		{"covering_letter_id", Types.BIGINT}, {"cv_id", Types.BIGINT},
		{"passport_copy_id", Types.BIGINT},
		{"notional_id_copy_id", Types.BIGINT}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("faculty_request_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("program_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("potential_faculty_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("potential_faculty_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastest_faculty_request_state_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("covering_letter_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cv_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("passport_copy_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("notional_id_copy_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table faculty_request (uuid_ VARCHAR(75) null,faculty_request_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,created_by LONG,modified_date DATE null,modified_by LONG,program_id LONG,potential_faculty_id LONG,potential_faculty_type_id LONG,lastest_faculty_request_state_id LONG,covering_letter_id LONG,cv_id LONG,passport_copy_id LONG,notional_id_copy_id LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table faculty_request";

	public static final String ORDER_BY_JPQL =
		" ORDER BY facultyRequest.facultyRequestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY faculty_request.faculty_request_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FACULTYREQUESTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FacultyRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _facultyRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFacultyRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _facultyRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FacultyRequest.class;
	}

	@Override
	public String getModelClassName() {
		return FacultyRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FacultyRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FacultyRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FacultyRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FacultyRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FacultyRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FacultyRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FacultyRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FacultyRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FacultyRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FacultyRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FacultyRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FacultyRequest, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FacultyRequest, Object>>();
		Map<String, BiConsumer<FacultyRequest, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FacultyRequest, ?>>();

		attributeGetterFunctions.put("uuid", FacultyRequest::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FacultyRequest, String>)FacultyRequest::setUuid);
		attributeGetterFunctions.put(
			"facultyRequestId", FacultyRequest::getFacultyRequestId);
		attributeSetterBiConsumers.put(
			"facultyRequestId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setFacultyRequestId);
		attributeGetterFunctions.put("groupId", FacultyRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FacultyRequest, Long>)FacultyRequest::setGroupId);
		attributeGetterFunctions.put("companyId", FacultyRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FacultyRequest, Long>)FacultyRequest::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", FacultyRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FacultyRequest, Date>)FacultyRequest::setCreateDate);
		attributeGetterFunctions.put("createdBy", FacultyRequest::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<FacultyRequest, Long>)FacultyRequest::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", FacultyRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FacultyRequest, Date>)FacultyRequest::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedBy", FacultyRequest::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FacultyRequest, Long>)FacultyRequest::setModifiedBy);
		attributeGetterFunctions.put("programId", FacultyRequest::getProgramId);
		attributeSetterBiConsumers.put(
			"programId",
			(BiConsumer<FacultyRequest, Long>)FacultyRequest::setProgramId);
		attributeGetterFunctions.put(
			"potentialFacultyId", FacultyRequest::getPotentialFacultyId);
		attributeSetterBiConsumers.put(
			"potentialFacultyId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setPotentialFacultyId);
		attributeGetterFunctions.put(
			"potentialFacultyTypeId",
			FacultyRequest::getPotentialFacultyTypeId);
		attributeSetterBiConsumers.put(
			"potentialFacultyTypeId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setPotentialFacultyTypeId);
		attributeGetterFunctions.put(
			"lastestFacultyRequestStateId",
			FacultyRequest::getLastestFacultyRequestStateId);
		attributeSetterBiConsumers.put(
			"lastestFacultyRequestStateId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setLastestFacultyRequestStateId);
		attributeGetterFunctions.put(
			"coveringLetterId", FacultyRequest::getCoveringLetterId);
		attributeSetterBiConsumers.put(
			"coveringLetterId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setCoveringLetterId);
		attributeGetterFunctions.put("cvId", FacultyRequest::getCvId);
		attributeSetterBiConsumers.put(
			"cvId", (BiConsumer<FacultyRequest, Long>)FacultyRequest::setCvId);
		attributeGetterFunctions.put(
			"passportCopyId", FacultyRequest::getPassportCopyId);
		attributeSetterBiConsumers.put(
			"passportCopyId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setPassportCopyId);
		attributeGetterFunctions.put(
			"notionalIdCopyId", FacultyRequest::getNotionalIdCopyId);
		attributeSetterBiConsumers.put(
			"notionalIdCopyId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setNotionalIdCopyId);
		attributeGetterFunctions.put("status", FacultyRequest::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FacultyRequest, Integer>)FacultyRequest::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FacultyRequest::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FacultyRequest, Long>)
				FacultyRequest::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", FacultyRequest::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<FacultyRequest, String>)
				FacultyRequest::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", FacultyRequest::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FacultyRequest, Date>)FacultyRequest::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFacultyRequestId() {
		return _facultyRequestId;
	}

	@Override
	public void setFacultyRequestId(long facultyRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_facultyRequestId = facultyRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public long getProgramId() {
		return _programId;
	}

	@Override
	public void setProgramId(long programId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programId = programId;
	}

	@JSON
	@Override
	public long getPotentialFacultyId() {
		return _potentialFacultyId;
	}

	@Override
	public void setPotentialFacultyId(long potentialFacultyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_potentialFacultyId = potentialFacultyId;
	}

	@JSON
	@Override
	public long getPotentialFacultyTypeId() {
		return _potentialFacultyTypeId;
	}

	@Override
	public void setPotentialFacultyTypeId(long potentialFacultyTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_potentialFacultyTypeId = potentialFacultyTypeId;
	}

	@JSON
	@Override
	public long getLastestFacultyRequestStateId() {
		return _lastestFacultyRequestStateId;
	}

	@Override
	public void setLastestFacultyRequestStateId(
		long lastestFacultyRequestStateId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastestFacultyRequestStateId = lastestFacultyRequestStateId;
	}

	@JSON
	@Override
	public long getCoveringLetterId() {
		return _coveringLetterId;
	}

	@Override
	public void setCoveringLetterId(long coveringLetterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coveringLetterId = coveringLetterId;
	}

	@JSON
	@Override
	public long getCvId() {
		return _cvId;
	}

	@Override
	public void setCvId(long cvId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cvId = cvId;
	}

	@JSON
	@Override
	public long getPassportCopyId() {
		return _passportCopyId;
	}

	@Override
	public void setPassportCopyId(long passportCopyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passportCopyId = passportCopyId;
	}

	@JSON
	@Override
	public long getNotionalIdCopyId() {
		return _notionalIdCopyId;
	}

	@Override
	public void setNotionalIdCopyId(long notionalIdCopyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notionalIdCopyId = notionalIdCopyId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FacultyRequest.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FacultyRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FacultyRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FacultyRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FacultyRequestImpl facultyRequestImpl = new FacultyRequestImpl();

		facultyRequestImpl.setUuid(getUuid());
		facultyRequestImpl.setFacultyRequestId(getFacultyRequestId());
		facultyRequestImpl.setGroupId(getGroupId());
		facultyRequestImpl.setCompanyId(getCompanyId());
		facultyRequestImpl.setCreateDate(getCreateDate());
		facultyRequestImpl.setCreatedBy(getCreatedBy());
		facultyRequestImpl.setModifiedDate(getModifiedDate());
		facultyRequestImpl.setModifiedBy(getModifiedBy());
		facultyRequestImpl.setProgramId(getProgramId());
		facultyRequestImpl.setPotentialFacultyId(getPotentialFacultyId());
		facultyRequestImpl.setPotentialFacultyTypeId(
			getPotentialFacultyTypeId());
		facultyRequestImpl.setLastestFacultyRequestStateId(
			getLastestFacultyRequestStateId());
		facultyRequestImpl.setCoveringLetterId(getCoveringLetterId());
		facultyRequestImpl.setCvId(getCvId());
		facultyRequestImpl.setPassportCopyId(getPassportCopyId());
		facultyRequestImpl.setNotionalIdCopyId(getNotionalIdCopyId());
		facultyRequestImpl.setStatus(getStatus());
		facultyRequestImpl.setStatusByUserId(getStatusByUserId());
		facultyRequestImpl.setStatusByUserName(getStatusByUserName());
		facultyRequestImpl.setStatusDate(getStatusDate());

		facultyRequestImpl.resetOriginalValues();

		return facultyRequestImpl;
	}

	@Override
	public FacultyRequest cloneWithOriginalValues() {
		FacultyRequestImpl facultyRequestImpl = new FacultyRequestImpl();

		facultyRequestImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		facultyRequestImpl.setFacultyRequestId(
			this.<Long>getColumnOriginalValue("faculty_request_id"));
		facultyRequestImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		facultyRequestImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		facultyRequestImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		facultyRequestImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("created_by"));
		facultyRequestImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		facultyRequestImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modified_by"));
		facultyRequestImpl.setProgramId(
			this.<Long>getColumnOriginalValue("program_id"));
		facultyRequestImpl.setPotentialFacultyId(
			this.<Long>getColumnOriginalValue("potential_faculty_id"));
		facultyRequestImpl.setPotentialFacultyTypeId(
			this.<Long>getColumnOriginalValue("potential_faculty_type_id"));
		facultyRequestImpl.setLastestFacultyRequestStateId(
			this.<Long>getColumnOriginalValue(
				"lastest_faculty_request_state_id"));
		facultyRequestImpl.setCoveringLetterId(
			this.<Long>getColumnOriginalValue("covering_letter_id"));
		facultyRequestImpl.setCvId(this.<Long>getColumnOriginalValue("cv_id"));
		facultyRequestImpl.setPassportCopyId(
			this.<Long>getColumnOriginalValue("passport_copy_id"));
		facultyRequestImpl.setNotionalIdCopyId(
			this.<Long>getColumnOriginalValue("notional_id_copy_id"));
		facultyRequestImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		facultyRequestImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		facultyRequestImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		facultyRequestImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return facultyRequestImpl;
	}

	@Override
	public int compareTo(FacultyRequest facultyRequest) {
		long primaryKey = facultyRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FacultyRequest)) {
			return false;
		}

		FacultyRequest facultyRequest = (FacultyRequest)object;

		long primaryKey = facultyRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FacultyRequest> toCacheModel() {
		FacultyRequestCacheModel facultyRequestCacheModel =
			new FacultyRequestCacheModel();

		facultyRequestCacheModel.uuid = getUuid();

		String uuid = facultyRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			facultyRequestCacheModel.uuid = null;
		}

		facultyRequestCacheModel.facultyRequestId = getFacultyRequestId();

		facultyRequestCacheModel.groupId = getGroupId();

		facultyRequestCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			facultyRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			facultyRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		facultyRequestCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			facultyRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			facultyRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		facultyRequestCacheModel.modifiedBy = getModifiedBy();

		facultyRequestCacheModel.programId = getProgramId();

		facultyRequestCacheModel.potentialFacultyId = getPotentialFacultyId();

		facultyRequestCacheModel.potentialFacultyTypeId =
			getPotentialFacultyTypeId();

		facultyRequestCacheModel.lastestFacultyRequestStateId =
			getLastestFacultyRequestStateId();

		facultyRequestCacheModel.coveringLetterId = getCoveringLetterId();

		facultyRequestCacheModel.cvId = getCvId();

		facultyRequestCacheModel.passportCopyId = getPassportCopyId();

		facultyRequestCacheModel.notionalIdCopyId = getNotionalIdCopyId();

		facultyRequestCacheModel.status = getStatus();

		facultyRequestCacheModel.statusByUserId = getStatusByUserId();

		facultyRequestCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = facultyRequestCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			facultyRequestCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			facultyRequestCacheModel.statusDate = statusDate.getTime();
		}
		else {
			facultyRequestCacheModel.statusDate = Long.MIN_VALUE;
		}

		return facultyRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FacultyRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FacultyRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FacultyRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FacultyRequest)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FacultyRequest>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FacultyRequest.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _facultyRequestId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _programId;
	private long _potentialFacultyId;
	private long _potentialFacultyTypeId;
	private long _lastestFacultyRequestStateId;
	private long _coveringLetterId;
	private long _cvId;
	private long _passportCopyId;
	private long _notionalIdCopyId;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FacultyRequest, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FacultyRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("faculty_request_id", _facultyRequestId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("created_by", _createdBy);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("modified_by", _modifiedBy);
		_columnOriginalValues.put("program_id", _programId);
		_columnOriginalValues.put("potential_faculty_id", _potentialFacultyId);
		_columnOriginalValues.put(
			"potential_faculty_type_id", _potentialFacultyTypeId);
		_columnOriginalValues.put(
			"lastest_faculty_request_state_id", _lastestFacultyRequestStateId);
		_columnOriginalValues.put("covering_letter_id", _coveringLetterId);
		_columnOriginalValues.put("cv_id", _cvId);
		_columnOriginalValues.put("passport_copy_id", _passportCopyId);
		_columnOriginalValues.put("notional_id_copy_id", _notionalIdCopyId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("faculty_request_id", "facultyRequestId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("created_by", "createdBy");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("modified_by", "modifiedBy");
		attributeNames.put("program_id", "programId");
		attributeNames.put("potential_faculty_id", "potentialFacultyId");
		attributeNames.put(
			"potential_faculty_type_id", "potentialFacultyTypeId");
		attributeNames.put(
			"lastest_faculty_request_state_id", "lastestFacultyRequestStateId");
		attributeNames.put("covering_letter_id", "coveringLetterId");
		attributeNames.put("cv_id", "cvId");
		attributeNames.put("passport_copy_id", "passportCopyId");
		attributeNames.put("notional_id_copy_id", "notionalIdCopyId");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("faculty_request_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("created_by", 32L);

		columnBitmasks.put("modified_date", 64L);

		columnBitmasks.put("modified_by", 128L);

		columnBitmasks.put("program_id", 256L);

		columnBitmasks.put("potential_faculty_id", 512L);

		columnBitmasks.put("potential_faculty_type_id", 1024L);

		columnBitmasks.put("lastest_faculty_request_state_id", 2048L);

		columnBitmasks.put("covering_letter_id", 4096L);

		columnBitmasks.put("cv_id", 8192L);

		columnBitmasks.put("passport_copy_id", 16384L);

		columnBitmasks.put("notional_id_copy_id", 32768L);

		columnBitmasks.put("status", 65536L);

		columnBitmasks.put("statusByUserId", 131072L);

		columnBitmasks.put("statusByUserName", 262144L);

		columnBitmasks.put("statusDate", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FacultyRequest _escapedModel;

}