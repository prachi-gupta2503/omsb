/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.RotationMaster;
import gov.omsb.tms.model.RotationMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RotationMaster service. Represents a row in the &quot;rotation_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RotationMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RotationMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RotationMasterImpl
 * @generated
 */
@JSON(strict = true)
public class RotationMasterModelImpl
	extends BaseModelImpl<RotationMaster> implements RotationMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rotation master model instance should use the <code>RotationMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "rotation_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"rotation_master_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"modified_date", Types.TIMESTAMP},
		{"rotation_code", Types.VARCHAR},
		{"rotation_short_name", Types.VARCHAR},
		{"rotation_name", Types.VARCHAR}, {"rotation_status", Types.BOOLEAN},
		{"rotation_objecctives", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rotation_master_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("rotation_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rotation_short_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rotation_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rotation_status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("rotation_objecctives", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rotation_master (uuid_ VARCHAR(75) null,rotation_master_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,rotation_code STRING null,rotation_short_name STRING null,rotation_name STRING null,rotation_status BOOLEAN,rotation_objecctives STRING null)";

	public static final String TABLE_SQL_DROP = "drop table rotation_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rotationMaster.rotationMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rotation_master.rotation_master_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROTATIONCODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROTATIONNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROTATIONSTATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROTATIONMASTERID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RotationMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rotationMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRotationMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rotationMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RotationMaster.class;
	}

	@Override
	public String getModelClassName() {
		return RotationMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RotationMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RotationMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RotationMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RotationMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RotationMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RotationMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RotationMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RotationMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RotationMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RotationMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RotationMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RotationMaster, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RotationMaster, Object>>();
		Map<String, BiConsumer<RotationMaster, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RotationMaster, ?>>();

		attributeGetterFunctions.put("uuid", RotationMaster::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<RotationMaster, String>)RotationMaster::setUuid);
		attributeGetterFunctions.put(
			"rotationMasterId", RotationMaster::getRotationMasterId);
		attributeSetterBiConsumers.put(
			"rotationMasterId",
			(BiConsumer<RotationMaster, Long>)
				RotationMaster::setRotationMasterId);
		attributeGetterFunctions.put("groupId", RotationMaster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RotationMaster, Long>)RotationMaster::setGroupId);
		attributeGetterFunctions.put("companyId", RotationMaster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RotationMaster, Long>)RotationMaster::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", RotationMaster::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RotationMaster, Date>)RotationMaster::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RotationMaster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RotationMaster, Date>)RotationMaster::setModifiedDate);
		attributeGetterFunctions.put(
			"rotationCode", RotationMaster::getRotationCode);
		attributeSetterBiConsumers.put(
			"rotationCode",
			(BiConsumer<RotationMaster, String>)
				RotationMaster::setRotationCode);
		attributeGetterFunctions.put(
			"rotationShortName", RotationMaster::getRotationShortName);
		attributeSetterBiConsumers.put(
			"rotationShortName",
			(BiConsumer<RotationMaster, String>)
				RotationMaster::setRotationShortName);
		attributeGetterFunctions.put(
			"rotationName", RotationMaster::getRotationName);
		attributeSetterBiConsumers.put(
			"rotationName",
			(BiConsumer<RotationMaster, String>)
				RotationMaster::setRotationName);
		attributeGetterFunctions.put(
			"rotationStatus", RotationMaster::getRotationStatus);
		attributeSetterBiConsumers.put(
			"rotationStatus",
			(BiConsumer<RotationMaster, Boolean>)
				RotationMaster::setRotationStatus);
		attributeGetterFunctions.put(
			"rotationObjectives", RotationMaster::getRotationObjectives);
		attributeSetterBiConsumers.put(
			"rotationObjectives",
			(BiConsumer<RotationMaster, String>)
				RotationMaster::setRotationObjectives);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRotationMasterId() {
		return _rotationMasterId;
	}

	@Override
	public void setRotationMasterId(long rotationMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationMasterId = rotationMasterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRotationCode() {
		if (_rotationCode == null) {
			return "";
		}
		else {
			return _rotationCode;
		}
	}

	@Override
	public String getRotationCode(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationCode(languageId);
	}

	@Override
	public String getRotationCode(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationCode(languageId, useDefault);
	}

	@Override
	public String getRotationCode(String languageId) {
		return LocalizationUtil.getLocalization(getRotationCode(), languageId);
	}

	@Override
	public String getRotationCode(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getRotationCode(), languageId, useDefault);
	}

	@Override
	public String getRotationCodeCurrentLanguageId() {
		return _rotationCodeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRotationCodeCurrentValue() {
		Locale locale = getLocale(_rotationCodeCurrentLanguageId);

		return getRotationCode(locale);
	}

	@Override
	public Map<Locale, String> getRotationCodeMap() {
		return LocalizationUtil.getLocalizationMap(getRotationCode());
	}

	@Override
	public void setRotationCode(String rotationCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationCode = rotationCode;
	}

	@Override
	public void setRotationCode(String rotationCode, Locale locale) {
		setRotationCode(rotationCode, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationCode(
		String rotationCode, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(rotationCode)) {
			setRotationCode(
				LocalizationUtil.updateLocalization(
					getRotationCode(), "RotationCode", rotationCode, languageId,
					defaultLanguageId));
		}
		else {
			setRotationCode(
				LocalizationUtil.removeLocalization(
					getRotationCode(), "RotationCode", languageId));
		}
	}

	@Override
	public void setRotationCodeCurrentLanguageId(String languageId) {
		_rotationCodeCurrentLanguageId = languageId;
	}

	@Override
	public void setRotationCodeMap(Map<Locale, String> rotationCodeMap) {
		setRotationCodeMap(rotationCodeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationCodeMap(
		Map<Locale, String> rotationCodeMap, Locale defaultLocale) {

		if (rotationCodeMap == null) {
			return;
		}

		setRotationCode(
			LocalizationUtil.updateLocalization(
				rotationCodeMap, getRotationCode(), "RotationCode",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRotationCode() {
		return getColumnOriginalValue("rotation_code");
	}

	@JSON
	@Override
	public String getRotationShortName() {
		if (_rotationShortName == null) {
			return "";
		}
		else {
			return _rotationShortName;
		}
	}

	@Override
	public String getRotationShortName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationShortName(languageId);
	}

	@Override
	public String getRotationShortName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationShortName(languageId, useDefault);
	}

	@Override
	public String getRotationShortName(String languageId) {
		return LocalizationUtil.getLocalization(
			getRotationShortName(), languageId);
	}

	@Override
	public String getRotationShortName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getRotationShortName(), languageId, useDefault);
	}

	@Override
	public String getRotationShortNameCurrentLanguageId() {
		return _rotationShortNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRotationShortNameCurrentValue() {
		Locale locale = getLocale(_rotationShortNameCurrentLanguageId);

		return getRotationShortName(locale);
	}

	@Override
	public Map<Locale, String> getRotationShortNameMap() {
		return LocalizationUtil.getLocalizationMap(getRotationShortName());
	}

	@Override
	public void setRotationShortName(String rotationShortName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationShortName = rotationShortName;
	}

	@Override
	public void setRotationShortName(String rotationShortName, Locale locale) {
		setRotationShortName(
			rotationShortName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationShortName(
		String rotationShortName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(rotationShortName)) {
			setRotationShortName(
				LocalizationUtil.updateLocalization(
					getRotationShortName(), "RotationShortName",
					rotationShortName, languageId, defaultLanguageId));
		}
		else {
			setRotationShortName(
				LocalizationUtil.removeLocalization(
					getRotationShortName(), "RotationShortName", languageId));
		}
	}

	@Override
	public void setRotationShortNameCurrentLanguageId(String languageId) {
		_rotationShortNameCurrentLanguageId = languageId;
	}

	@Override
	public void setRotationShortNameMap(
		Map<Locale, String> rotationShortNameMap) {

		setRotationShortNameMap(rotationShortNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationShortNameMap(
		Map<Locale, String> rotationShortNameMap, Locale defaultLocale) {

		if (rotationShortNameMap == null) {
			return;
		}

		setRotationShortName(
			LocalizationUtil.updateLocalization(
				rotationShortNameMap, getRotationShortName(),
				"RotationShortName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getRotationName() {
		if (_rotationName == null) {
			return "";
		}
		else {
			return _rotationName;
		}
	}

	@Override
	public String getRotationName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationName(languageId);
	}

	@Override
	public String getRotationName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationName(languageId, useDefault);
	}

	@Override
	public String getRotationName(String languageId) {
		return LocalizationUtil.getLocalization(getRotationName(), languageId);
	}

	@Override
	public String getRotationName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getRotationName(), languageId, useDefault);
	}

	@Override
	public String getRotationNameCurrentLanguageId() {
		return _rotationNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRotationNameCurrentValue() {
		Locale locale = getLocale(_rotationNameCurrentLanguageId);

		return getRotationName(locale);
	}

	@Override
	public Map<Locale, String> getRotationNameMap() {
		return LocalizationUtil.getLocalizationMap(getRotationName());
	}

	@Override
	public void setRotationName(String rotationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationName = rotationName;
	}

	@Override
	public void setRotationName(String rotationName, Locale locale) {
		setRotationName(rotationName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationName(
		String rotationName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(rotationName)) {
			setRotationName(
				LocalizationUtil.updateLocalization(
					getRotationName(), "RotationName", rotationName, languageId,
					defaultLanguageId));
		}
		else {
			setRotationName(
				LocalizationUtil.removeLocalization(
					getRotationName(), "RotationName", languageId));
		}
	}

	@Override
	public void setRotationNameCurrentLanguageId(String languageId) {
		_rotationNameCurrentLanguageId = languageId;
	}

	@Override
	public void setRotationNameMap(Map<Locale, String> rotationNameMap) {
		setRotationNameMap(rotationNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationNameMap(
		Map<Locale, String> rotationNameMap, Locale defaultLocale) {

		if (rotationNameMap == null) {
			return;
		}

		setRotationName(
			LocalizationUtil.updateLocalization(
				rotationNameMap, getRotationName(), "RotationName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRotationName() {
		return getColumnOriginalValue("rotation_name");
	}

	@JSON
	@Override
	public Boolean getRotationStatus() {
		return _rotationStatus;
	}

	@Override
	public void setRotationStatus(Boolean rotationStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationStatus = rotationStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Boolean getOriginalRotationStatus() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("rotation_status"));
	}

	@JSON
	@Override
	public String getRotationObjectives() {
		if (_rotationObjectives == null) {
			return "";
		}
		else {
			return _rotationObjectives;
		}
	}

	@Override
	public String getRotationObjectives(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationObjectives(languageId);
	}

	@Override
	public String getRotationObjectives(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRotationObjectives(languageId, useDefault);
	}

	@Override
	public String getRotationObjectives(String languageId) {
		return LocalizationUtil.getLocalization(
			getRotationObjectives(), languageId);
	}

	@Override
	public String getRotationObjectives(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getRotationObjectives(), languageId, useDefault);
	}

	@Override
	public String getRotationObjectivesCurrentLanguageId() {
		return _rotationObjectivesCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRotationObjectivesCurrentValue() {
		Locale locale = getLocale(_rotationObjectivesCurrentLanguageId);

		return getRotationObjectives(locale);
	}

	@Override
	public Map<Locale, String> getRotationObjectivesMap() {
		return LocalizationUtil.getLocalizationMap(getRotationObjectives());
	}

	@Override
	public void setRotationObjectives(String rotationObjectives) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationObjectives = rotationObjectives;
	}

	@Override
	public void setRotationObjectives(
		String rotationObjectives, Locale locale) {

		setRotationObjectives(
			rotationObjectives, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationObjectives(
		String rotationObjectives, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(rotationObjectives)) {
			setRotationObjectives(
				LocalizationUtil.updateLocalization(
					getRotationObjectives(), "RotationObjectives",
					rotationObjectives, languageId, defaultLanguageId));
		}
		else {
			setRotationObjectives(
				LocalizationUtil.removeLocalization(
					getRotationObjectives(), "RotationObjectives", languageId));
		}
	}

	@Override
	public void setRotationObjectivesCurrentLanguageId(String languageId) {
		_rotationObjectivesCurrentLanguageId = languageId;
	}

	@Override
	public void setRotationObjectivesMap(
		Map<Locale, String> rotationObjectivesMap) {

		setRotationObjectivesMap(
			rotationObjectivesMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRotationObjectivesMap(
		Map<Locale, String> rotationObjectivesMap, Locale defaultLocale) {

		if (rotationObjectivesMap == null) {
			return;
		}

		setRotationObjectives(
			LocalizationUtil.updateLocalization(
				rotationObjectivesMap, getRotationObjectives(),
				"RotationObjectives", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(RotationMaster.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RotationMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> rotationCodeMap = getRotationCodeMap();

		for (Map.Entry<Locale, String> entry : rotationCodeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> rotationShortNameMap = getRotationShortNameMap();

		for (Map.Entry<Locale, String> entry :
				rotationShortNameMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> rotationNameMap = getRotationNameMap();

		for (Map.Entry<Locale, String> entry : rotationNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> rotationObjectivesMap = getRotationObjectivesMap();

		for (Map.Entry<Locale, String> entry :
				rotationObjectivesMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getRotationCode();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			RotationMaster.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String rotationCode = getRotationCode(defaultLocale);

		if (Validator.isNull(rotationCode)) {
			setRotationCode(
				getRotationCode(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRotationCode(
				getRotationCode(defaultLocale), defaultLocale, defaultLocale);
		}

		String rotationShortName = getRotationShortName(defaultLocale);

		if (Validator.isNull(rotationShortName)) {
			setRotationShortName(
				getRotationShortName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRotationShortName(
				getRotationShortName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String rotationName = getRotationName(defaultLocale);

		if (Validator.isNull(rotationName)) {
			setRotationName(
				getRotationName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRotationName(
				getRotationName(defaultLocale), defaultLocale, defaultLocale);
		}

		String rotationObjectives = getRotationObjectives(defaultLocale);

		if (Validator.isNull(rotationObjectives)) {
			setRotationObjectives(
				getRotationObjectives(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRotationObjectives(
				getRotationObjectives(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public RotationMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RotationMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RotationMasterImpl rotationMasterImpl = new RotationMasterImpl();

		rotationMasterImpl.setUuid(getUuid());
		rotationMasterImpl.setRotationMasterId(getRotationMasterId());
		rotationMasterImpl.setGroupId(getGroupId());
		rotationMasterImpl.setCompanyId(getCompanyId());
		rotationMasterImpl.setCreateDate(getCreateDate());
		rotationMasterImpl.setModifiedDate(getModifiedDate());
		rotationMasterImpl.setRotationCode(getRotationCode());
		rotationMasterImpl.setRotationShortName(getRotationShortName());
		rotationMasterImpl.setRotationName(getRotationName());
		rotationMasterImpl.setRotationStatus(getRotationStatus());
		rotationMasterImpl.setRotationObjectives(getRotationObjectives());

		rotationMasterImpl.resetOriginalValues();

		return rotationMasterImpl;
	}

	@Override
	public RotationMaster cloneWithOriginalValues() {
		RotationMasterImpl rotationMasterImpl = new RotationMasterImpl();

		rotationMasterImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		rotationMasterImpl.setRotationMasterId(
			this.<Long>getColumnOriginalValue("rotation_master_id"));
		rotationMasterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		rotationMasterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		rotationMasterImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		rotationMasterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		rotationMasterImpl.setRotationCode(
			this.<String>getColumnOriginalValue("rotation_code"));
		rotationMasterImpl.setRotationShortName(
			this.<String>getColumnOriginalValue("rotation_short_name"));
		rotationMasterImpl.setRotationName(
			this.<String>getColumnOriginalValue("rotation_name"));
		rotationMasterImpl.setRotationStatus(
			this.<Boolean>getColumnOriginalValue("rotation_status"));
		rotationMasterImpl.setRotationObjectives(
			this.<String>getColumnOriginalValue("rotation_objecctives"));

		return rotationMasterImpl;
	}

	@Override
	public int compareTo(RotationMaster rotationMaster) {
		long primaryKey = rotationMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RotationMaster)) {
			return false;
		}

		RotationMaster rotationMaster = (RotationMaster)object;

		long primaryKey = rotationMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RotationMaster> toCacheModel() {
		RotationMasterCacheModel rotationMasterCacheModel =
			new RotationMasterCacheModel();

		rotationMasterCacheModel.uuid = getUuid();

		String uuid = rotationMasterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rotationMasterCacheModel.uuid = null;
		}

		rotationMasterCacheModel.rotationMasterId = getRotationMasterId();

		rotationMasterCacheModel.groupId = getGroupId();

		rotationMasterCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			rotationMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			rotationMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rotationMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rotationMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		rotationMasterCacheModel.rotationCode = getRotationCode();

		String rotationCode = rotationMasterCacheModel.rotationCode;

		if ((rotationCode != null) && (rotationCode.length() == 0)) {
			rotationMasterCacheModel.rotationCode = null;
		}

		rotationMasterCacheModel.rotationShortName = getRotationShortName();

		String rotationShortName = rotationMasterCacheModel.rotationShortName;

		if ((rotationShortName != null) && (rotationShortName.length() == 0)) {
			rotationMasterCacheModel.rotationShortName = null;
		}

		rotationMasterCacheModel.rotationName = getRotationName();

		String rotationName = rotationMasterCacheModel.rotationName;

		if ((rotationName != null) && (rotationName.length() == 0)) {
			rotationMasterCacheModel.rotationName = null;
		}

		Boolean rotationStatus = getRotationStatus();

		if (rotationStatus != null) {
			rotationMasterCacheModel.rotationStatus = rotationStatus;
		}

		rotationMasterCacheModel.rotationObjectives = getRotationObjectives();

		String rotationObjectives = rotationMasterCacheModel.rotationObjectives;

		if ((rotationObjectives != null) &&
			(rotationObjectives.length() == 0)) {

			rotationMasterCacheModel.rotationObjectives = null;
		}

		return rotationMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RotationMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RotationMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RotationMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((RotationMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RotationMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RotationMaster.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _rotationMasterId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _rotationCode;
	private String _rotationCodeCurrentLanguageId;
	private String _rotationShortName;
	private String _rotationShortNameCurrentLanguageId;
	private String _rotationName;
	private String _rotationNameCurrentLanguageId;
	private Boolean _rotationStatus;
	private String _rotationObjectives;
	private String _rotationObjectivesCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RotationMaster, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RotationMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("rotation_master_id", _rotationMasterId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("rotation_code", _rotationCode);
		_columnOriginalValues.put("rotation_short_name", _rotationShortName);
		_columnOriginalValues.put("rotation_name", _rotationName);
		_columnOriginalValues.put("rotation_status", _rotationStatus);
		_columnOriginalValues.put("rotation_objecctives", _rotationObjectives);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("rotation_master_id", "rotationMasterId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("rotation_code", "rotationCode");
		attributeNames.put("rotation_short_name", "rotationShortName");
		attributeNames.put("rotation_name", "rotationName");
		attributeNames.put("rotation_status", "rotationStatus");
		attributeNames.put("rotation_objecctives", "rotationObjectives");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("rotation_master_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("modified_date", 32L);

		columnBitmasks.put("rotation_code", 64L);

		columnBitmasks.put("rotation_short_name", 128L);

		columnBitmasks.put("rotation_name", 256L);

		columnBitmasks.put("rotation_status", 512L);

		columnBitmasks.put("rotation_objecctives", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RotationMaster _escapedModel;

}