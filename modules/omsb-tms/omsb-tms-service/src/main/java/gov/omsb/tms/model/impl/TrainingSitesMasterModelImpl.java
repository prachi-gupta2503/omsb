/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.TrainingSitesMaster;
import gov.omsb.tms.model.TrainingSitesMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TrainingSitesMaster service. Represents a row in the &quot;training_sites_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TrainingSitesMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrainingSitesMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TrainingSitesMasterImpl
 * @generated
 */
@JSON(strict = true)
public class TrainingSitesMasterModelImpl
	extends BaseModelImpl<TrainingSitesMaster>
	implements TrainingSitesMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a training sites master model instance should use the <code>TrainingSitesMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "training_sites_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"training_site_master_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"modified_date", Types.TIMESTAMP},
		{"training_site_name", Types.VARCHAR},
		{"training_site_code", Types.VARCHAR},
		{"training_site_status", Types.BOOLEAN},
		{"training_site_address", Types.VARCHAR},
		{"training_site_description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("training_site_master_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("training_site_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("training_site_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("training_site_status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("training_site_address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("training_site_description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table training_sites_master (uuid_ VARCHAR(75) null,training_site_master_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,training_site_name STRING null,training_site_code STRING null,training_site_status BOOLEAN,training_site_address STRING null,training_site_description STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table training_sites_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY trainingSitesMaster.trainingSiteMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY training_sites_master.training_site_master_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAININGSITECODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAININGSITENAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAININGSITESTATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAININGSITEMASTERID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TrainingSitesMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trainingSiteMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrainingSiteMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trainingSiteMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TrainingSitesMaster.class;
	}

	@Override
	public String getModelClassName() {
		return TrainingSitesMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TrainingSitesMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TrainingSitesMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TrainingSitesMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TrainingSitesMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TrainingSitesMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TrainingSitesMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TrainingSitesMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TrainingSitesMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TrainingSitesMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TrainingSitesMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TrainingSitesMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TrainingSitesMaster, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TrainingSitesMaster, Object>>();
		Map<String, BiConsumer<TrainingSitesMaster, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TrainingSitesMaster, ?>>();

		attributeGetterFunctions.put("uuid", TrainingSitesMaster::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<TrainingSitesMaster, String>)
				TrainingSitesMaster::setUuid);
		attributeGetterFunctions.put(
			"trainingSiteMasterId",
			TrainingSitesMaster::getTrainingSiteMasterId);
		attributeSetterBiConsumers.put(
			"trainingSiteMasterId",
			(BiConsumer<TrainingSitesMaster, Long>)
				TrainingSitesMaster::setTrainingSiteMasterId);
		attributeGetterFunctions.put(
			"groupId", TrainingSitesMaster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TrainingSitesMaster, Long>)
				TrainingSitesMaster::setGroupId);
		attributeGetterFunctions.put(
			"companyId", TrainingSitesMaster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TrainingSitesMaster, Long>)
				TrainingSitesMaster::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", TrainingSitesMaster::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TrainingSitesMaster, Date>)
				TrainingSitesMaster::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TrainingSitesMaster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TrainingSitesMaster, Date>)
				TrainingSitesMaster::setModifiedDate);
		attributeGetterFunctions.put(
			"trainingSiteName", TrainingSitesMaster::getTrainingSiteName);
		attributeSetterBiConsumers.put(
			"trainingSiteName",
			(BiConsumer<TrainingSitesMaster, String>)
				TrainingSitesMaster::setTrainingSiteName);
		attributeGetterFunctions.put(
			"trainingSiteCode", TrainingSitesMaster::getTrainingSiteCode);
		attributeSetterBiConsumers.put(
			"trainingSiteCode",
			(BiConsumer<TrainingSitesMaster, String>)
				TrainingSitesMaster::setTrainingSiteCode);
		attributeGetterFunctions.put(
			"trainingSiteStatus", TrainingSitesMaster::getTrainingSiteStatus);
		attributeSetterBiConsumers.put(
			"trainingSiteStatus",
			(BiConsumer<TrainingSitesMaster, Boolean>)
				TrainingSitesMaster::setTrainingSiteStatus);
		attributeGetterFunctions.put(
			"trainingSiteAddress", TrainingSitesMaster::getTrainingSiteAddress);
		attributeSetterBiConsumers.put(
			"trainingSiteAddress",
			(BiConsumer<TrainingSitesMaster, String>)
				TrainingSitesMaster::setTrainingSiteAddress);
		attributeGetterFunctions.put(
			"trainingSiteDescription",
			TrainingSitesMaster::getTrainingSiteDescription);
		attributeSetterBiConsumers.put(
			"trainingSiteDescription",
			(BiConsumer<TrainingSitesMaster, String>)
				TrainingSitesMaster::setTrainingSiteDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getTrainingSiteMasterId() {
		return _trainingSiteMasterId;
	}

	@Override
	public void setTrainingSiteMasterId(long trainingSiteMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSiteMasterId = trainingSiteMasterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTrainingSiteName() {
		if (_trainingSiteName == null) {
			return "";
		}
		else {
			return _trainingSiteName;
		}
	}

	@Override
	public String getTrainingSiteName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteName(languageId);
	}

	@Override
	public String getTrainingSiteName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteName(languageId, useDefault);
	}

	@Override
	public String getTrainingSiteName(String languageId) {
		return LocalizationUtil.getLocalization(
			getTrainingSiteName(), languageId);
	}

	@Override
	public String getTrainingSiteName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTrainingSiteName(), languageId, useDefault);
	}

	@Override
	public String getTrainingSiteNameCurrentLanguageId() {
		return _trainingSiteNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTrainingSiteNameCurrentValue() {
		Locale locale = getLocale(_trainingSiteNameCurrentLanguageId);

		return getTrainingSiteName(locale);
	}

	@Override
	public Map<Locale, String> getTrainingSiteNameMap() {
		return LocalizationUtil.getLocalizationMap(getTrainingSiteName());
	}

	@Override
	public void setTrainingSiteName(String trainingSiteName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSiteName = trainingSiteName;
	}

	@Override
	public void setTrainingSiteName(String trainingSiteName, Locale locale) {
		setTrainingSiteName(trainingSiteName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteName(
		String trainingSiteName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(trainingSiteName)) {
			setTrainingSiteName(
				LocalizationUtil.updateLocalization(
					getTrainingSiteName(), "TrainingSiteName", trainingSiteName,
					languageId, defaultLanguageId));
		}
		else {
			setTrainingSiteName(
				LocalizationUtil.removeLocalization(
					getTrainingSiteName(), "TrainingSiteName", languageId));
		}
	}

	@Override
	public void setTrainingSiteNameCurrentLanguageId(String languageId) {
		_trainingSiteNameCurrentLanguageId = languageId;
	}

	@Override
	public void setTrainingSiteNameMap(
		Map<Locale, String> trainingSiteNameMap) {

		setTrainingSiteNameMap(trainingSiteNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteNameMap(
		Map<Locale, String> trainingSiteNameMap, Locale defaultLocale) {

		if (trainingSiteNameMap == null) {
			return;
		}

		setTrainingSiteName(
			LocalizationUtil.updateLocalization(
				trainingSiteNameMap, getTrainingSiteName(), "TrainingSiteName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTrainingSiteName() {
		return getColumnOriginalValue("training_site_name");
	}

	@JSON
	@Override
	public String getTrainingSiteCode() {
		if (_trainingSiteCode == null) {
			return "";
		}
		else {
			return _trainingSiteCode;
		}
	}

	@Override
	public String getTrainingSiteCode(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteCode(languageId);
	}

	@Override
	public String getTrainingSiteCode(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteCode(languageId, useDefault);
	}

	@Override
	public String getTrainingSiteCode(String languageId) {
		return LocalizationUtil.getLocalization(
			getTrainingSiteCode(), languageId);
	}

	@Override
	public String getTrainingSiteCode(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTrainingSiteCode(), languageId, useDefault);
	}

	@Override
	public String getTrainingSiteCodeCurrentLanguageId() {
		return _trainingSiteCodeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTrainingSiteCodeCurrentValue() {
		Locale locale = getLocale(_trainingSiteCodeCurrentLanguageId);

		return getTrainingSiteCode(locale);
	}

	@Override
	public Map<Locale, String> getTrainingSiteCodeMap() {
		return LocalizationUtil.getLocalizationMap(getTrainingSiteCode());
	}

	@Override
	public void setTrainingSiteCode(String trainingSiteCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSiteCode = trainingSiteCode;
	}

	@Override
	public void setTrainingSiteCode(String trainingSiteCode, Locale locale) {
		setTrainingSiteCode(trainingSiteCode, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteCode(
		String trainingSiteCode, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(trainingSiteCode)) {
			setTrainingSiteCode(
				LocalizationUtil.updateLocalization(
					getTrainingSiteCode(), "TrainingSiteCode", trainingSiteCode,
					languageId, defaultLanguageId));
		}
		else {
			setTrainingSiteCode(
				LocalizationUtil.removeLocalization(
					getTrainingSiteCode(), "TrainingSiteCode", languageId));
		}
	}

	@Override
	public void setTrainingSiteCodeCurrentLanguageId(String languageId) {
		_trainingSiteCodeCurrentLanguageId = languageId;
	}

	@Override
	public void setTrainingSiteCodeMap(
		Map<Locale, String> trainingSiteCodeMap) {

		setTrainingSiteCodeMap(trainingSiteCodeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteCodeMap(
		Map<Locale, String> trainingSiteCodeMap, Locale defaultLocale) {

		if (trainingSiteCodeMap == null) {
			return;
		}

		setTrainingSiteCode(
			LocalizationUtil.updateLocalization(
				trainingSiteCodeMap, getTrainingSiteCode(), "TrainingSiteCode",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTrainingSiteCode() {
		return getColumnOriginalValue("training_site_code");
	}

	@JSON
	@Override
	public Boolean getTrainingSiteStatus() {
		return _trainingSiteStatus;
	}

	@Override
	public void setTrainingSiteStatus(Boolean trainingSiteStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSiteStatus = trainingSiteStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Boolean getOriginalTrainingSiteStatus() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("training_site_status"));
	}

	@JSON
	@Override
	public String getTrainingSiteAddress() {
		if (_trainingSiteAddress == null) {
			return "";
		}
		else {
			return _trainingSiteAddress;
		}
	}

	@Override
	public String getTrainingSiteAddress(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteAddress(languageId);
	}

	@Override
	public String getTrainingSiteAddress(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteAddress(languageId, useDefault);
	}

	@Override
	public String getTrainingSiteAddress(String languageId) {
		return LocalizationUtil.getLocalization(
			getTrainingSiteAddress(), languageId);
	}

	@Override
	public String getTrainingSiteAddress(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getTrainingSiteAddress(), languageId, useDefault);
	}

	@Override
	public String getTrainingSiteAddressCurrentLanguageId() {
		return _trainingSiteAddressCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTrainingSiteAddressCurrentValue() {
		Locale locale = getLocale(_trainingSiteAddressCurrentLanguageId);

		return getTrainingSiteAddress(locale);
	}

	@Override
	public Map<Locale, String> getTrainingSiteAddressMap() {
		return LocalizationUtil.getLocalizationMap(getTrainingSiteAddress());
	}

	@Override
	public void setTrainingSiteAddress(String trainingSiteAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSiteAddress = trainingSiteAddress;
	}

	@Override
	public void setTrainingSiteAddress(
		String trainingSiteAddress, Locale locale) {

		setTrainingSiteAddress(
			trainingSiteAddress, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteAddress(
		String trainingSiteAddress, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(trainingSiteAddress)) {
			setTrainingSiteAddress(
				LocalizationUtil.updateLocalization(
					getTrainingSiteAddress(), "TrainingSiteAddress",
					trainingSiteAddress, languageId, defaultLanguageId));
		}
		else {
			setTrainingSiteAddress(
				LocalizationUtil.removeLocalization(
					getTrainingSiteAddress(), "TrainingSiteAddress",
					languageId));
		}
	}

	@Override
	public void setTrainingSiteAddressCurrentLanguageId(String languageId) {
		_trainingSiteAddressCurrentLanguageId = languageId;
	}

	@Override
	public void setTrainingSiteAddressMap(
		Map<Locale, String> trainingSiteAddressMap) {

		setTrainingSiteAddressMap(
			trainingSiteAddressMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteAddressMap(
		Map<Locale, String> trainingSiteAddressMap, Locale defaultLocale) {

		if (trainingSiteAddressMap == null) {
			return;
		}

		setTrainingSiteAddress(
			LocalizationUtil.updateLocalization(
				trainingSiteAddressMap, getTrainingSiteAddress(),
				"TrainingSiteAddress", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getTrainingSiteDescription() {
		if (_trainingSiteDescription == null) {
			return "";
		}
		else {
			return _trainingSiteDescription;
		}
	}

	@Override
	public String getTrainingSiteDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteDescription(languageId);
	}

	@Override
	public String getTrainingSiteDescription(
		Locale locale, boolean useDefault) {

		String languageId = LocaleUtil.toLanguageId(locale);

		return getTrainingSiteDescription(languageId, useDefault);
	}

	@Override
	public String getTrainingSiteDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getTrainingSiteDescription(), languageId);
	}

	@Override
	public String getTrainingSiteDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getTrainingSiteDescription(), languageId, useDefault);
	}

	@Override
	public String getTrainingSiteDescriptionCurrentLanguageId() {
		return _trainingSiteDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTrainingSiteDescriptionCurrentValue() {
		Locale locale = getLocale(_trainingSiteDescriptionCurrentLanguageId);

		return getTrainingSiteDescription(locale);
	}

	@Override
	public Map<Locale, String> getTrainingSiteDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(
			getTrainingSiteDescription());
	}

	@Override
	public void setTrainingSiteDescription(String trainingSiteDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingSiteDescription = trainingSiteDescription;
	}

	@Override
	public void setTrainingSiteDescription(
		String trainingSiteDescription, Locale locale) {

		setTrainingSiteDescription(
			trainingSiteDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteDescription(
		String trainingSiteDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(trainingSiteDescription)) {
			setTrainingSiteDescription(
				LocalizationUtil.updateLocalization(
					getTrainingSiteDescription(), "TrainingSiteDescription",
					trainingSiteDescription, languageId, defaultLanguageId));
		}
		else {
			setTrainingSiteDescription(
				LocalizationUtil.removeLocalization(
					getTrainingSiteDescription(), "TrainingSiteDescription",
					languageId));
		}
	}

	@Override
	public void setTrainingSiteDescriptionCurrentLanguageId(String languageId) {
		_trainingSiteDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setTrainingSiteDescriptionMap(
		Map<Locale, String> trainingSiteDescriptionMap) {

		setTrainingSiteDescriptionMap(
			trainingSiteDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTrainingSiteDescriptionMap(
		Map<Locale, String> trainingSiteDescriptionMap, Locale defaultLocale) {

		if (trainingSiteDescriptionMap == null) {
			return;
		}

		setTrainingSiteDescription(
			LocalizationUtil.updateLocalization(
				trainingSiteDescriptionMap, getTrainingSiteDescription(),
				"TrainingSiteDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(TrainingSitesMaster.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TrainingSitesMaster.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> trainingSiteNameMap = getTrainingSiteNameMap();

		for (Map.Entry<Locale, String> entry : trainingSiteNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> trainingSiteCodeMap = getTrainingSiteCodeMap();

		for (Map.Entry<Locale, String> entry : trainingSiteCodeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> trainingSiteAddressMap =
			getTrainingSiteAddressMap();

		for (Map.Entry<Locale, String> entry :
				trainingSiteAddressMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> trainingSiteDescriptionMap =
			getTrainingSiteDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				trainingSiteDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTrainingSiteName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			TrainingSitesMaster.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String trainingSiteName = getTrainingSiteName(defaultLocale);

		if (Validator.isNull(trainingSiteName)) {
			setTrainingSiteName(
				getTrainingSiteName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTrainingSiteName(
				getTrainingSiteName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String trainingSiteCode = getTrainingSiteCode(defaultLocale);

		if (Validator.isNull(trainingSiteCode)) {
			setTrainingSiteCode(
				getTrainingSiteCode(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTrainingSiteCode(
				getTrainingSiteCode(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String trainingSiteAddress = getTrainingSiteAddress(defaultLocale);

		if (Validator.isNull(trainingSiteAddress)) {
			setTrainingSiteAddress(
				getTrainingSiteAddress(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTrainingSiteAddress(
				getTrainingSiteAddress(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String trainingSiteDescription = getTrainingSiteDescription(
			defaultLocale);

		if (Validator.isNull(trainingSiteDescription)) {
			setTrainingSiteDescription(
				getTrainingSiteDescription(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setTrainingSiteDescription(
				getTrainingSiteDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public TrainingSitesMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TrainingSitesMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TrainingSitesMasterImpl trainingSitesMasterImpl =
			new TrainingSitesMasterImpl();

		trainingSitesMasterImpl.setUuid(getUuid());
		trainingSitesMasterImpl.setTrainingSiteMasterId(
			getTrainingSiteMasterId());
		trainingSitesMasterImpl.setGroupId(getGroupId());
		trainingSitesMasterImpl.setCompanyId(getCompanyId());
		trainingSitesMasterImpl.setCreateDate(getCreateDate());
		trainingSitesMasterImpl.setModifiedDate(getModifiedDate());
		trainingSitesMasterImpl.setTrainingSiteName(getTrainingSiteName());
		trainingSitesMasterImpl.setTrainingSiteCode(getTrainingSiteCode());
		trainingSitesMasterImpl.setTrainingSiteStatus(getTrainingSiteStatus());
		trainingSitesMasterImpl.setTrainingSiteAddress(
			getTrainingSiteAddress());
		trainingSitesMasterImpl.setTrainingSiteDescription(
			getTrainingSiteDescription());

		trainingSitesMasterImpl.resetOriginalValues();

		return trainingSitesMasterImpl;
	}

	@Override
	public TrainingSitesMaster cloneWithOriginalValues() {
		TrainingSitesMasterImpl trainingSitesMasterImpl =
			new TrainingSitesMasterImpl();

		trainingSitesMasterImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		trainingSitesMasterImpl.setTrainingSiteMasterId(
			this.<Long>getColumnOriginalValue("training_site_master_id"));
		trainingSitesMasterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		trainingSitesMasterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		trainingSitesMasterImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		trainingSitesMasterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		trainingSitesMasterImpl.setTrainingSiteName(
			this.<String>getColumnOriginalValue("training_site_name"));
		trainingSitesMasterImpl.setTrainingSiteCode(
			this.<String>getColumnOriginalValue("training_site_code"));
		trainingSitesMasterImpl.setTrainingSiteStatus(
			this.<Boolean>getColumnOriginalValue("training_site_status"));
		trainingSitesMasterImpl.setTrainingSiteAddress(
			this.<String>getColumnOriginalValue("training_site_address"));
		trainingSitesMasterImpl.setTrainingSiteDescription(
			this.<String>getColumnOriginalValue("training_site_description"));

		return trainingSitesMasterImpl;
	}

	@Override
	public int compareTo(TrainingSitesMaster trainingSitesMaster) {
		long primaryKey = trainingSitesMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TrainingSitesMaster)) {
			return false;
		}

		TrainingSitesMaster trainingSitesMaster = (TrainingSitesMaster)object;

		long primaryKey = trainingSitesMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TrainingSitesMaster> toCacheModel() {
		TrainingSitesMasterCacheModel trainingSitesMasterCacheModel =
			new TrainingSitesMasterCacheModel();

		trainingSitesMasterCacheModel.uuid = getUuid();

		String uuid = trainingSitesMasterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			trainingSitesMasterCacheModel.uuid = null;
		}

		trainingSitesMasterCacheModel.trainingSiteMasterId =
			getTrainingSiteMasterId();

		trainingSitesMasterCacheModel.groupId = getGroupId();

		trainingSitesMasterCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			trainingSitesMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			trainingSitesMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			trainingSitesMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			trainingSitesMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		trainingSitesMasterCacheModel.trainingSiteName = getTrainingSiteName();

		String trainingSiteName =
			trainingSitesMasterCacheModel.trainingSiteName;

		if ((trainingSiteName != null) && (trainingSiteName.length() == 0)) {
			trainingSitesMasterCacheModel.trainingSiteName = null;
		}

		trainingSitesMasterCacheModel.trainingSiteCode = getTrainingSiteCode();

		String trainingSiteCode =
			trainingSitesMasterCacheModel.trainingSiteCode;

		if ((trainingSiteCode != null) && (trainingSiteCode.length() == 0)) {
			trainingSitesMasterCacheModel.trainingSiteCode = null;
		}

		Boolean trainingSiteStatus = getTrainingSiteStatus();

		if (trainingSiteStatus != null) {
			trainingSitesMasterCacheModel.trainingSiteStatus =
				trainingSiteStatus;
		}

		trainingSitesMasterCacheModel.trainingSiteAddress =
			getTrainingSiteAddress();

		String trainingSiteAddress =
			trainingSitesMasterCacheModel.trainingSiteAddress;

		if ((trainingSiteAddress != null) &&
			(trainingSiteAddress.length() == 0)) {

			trainingSitesMasterCacheModel.trainingSiteAddress = null;
		}

		trainingSitesMasterCacheModel.trainingSiteDescription =
			getTrainingSiteDescription();

		String trainingSiteDescription =
			trainingSitesMasterCacheModel.trainingSiteDescription;

		if ((trainingSiteDescription != null) &&
			(trainingSiteDescription.length() == 0)) {

			trainingSitesMasterCacheModel.trainingSiteDescription = null;
		}

		return trainingSitesMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TrainingSitesMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TrainingSitesMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TrainingSitesMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TrainingSitesMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TrainingSitesMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TrainingSitesMaster.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _trainingSiteMasterId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _trainingSiteName;
	private String _trainingSiteNameCurrentLanguageId;
	private String _trainingSiteCode;
	private String _trainingSiteCodeCurrentLanguageId;
	private Boolean _trainingSiteStatus;
	private String _trainingSiteAddress;
	private String _trainingSiteAddressCurrentLanguageId;
	private String _trainingSiteDescription;
	private String _trainingSiteDescriptionCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TrainingSitesMaster, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TrainingSitesMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"training_site_master_id", _trainingSiteMasterId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("training_site_name", _trainingSiteName);
		_columnOriginalValues.put("training_site_code", _trainingSiteCode);
		_columnOriginalValues.put("training_site_status", _trainingSiteStatus);
		_columnOriginalValues.put(
			"training_site_address", _trainingSiteAddress);
		_columnOriginalValues.put(
			"training_site_description", _trainingSiteDescription);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("training_site_master_id", "trainingSiteMasterId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("training_site_name", "trainingSiteName");
		attributeNames.put("training_site_code", "trainingSiteCode");
		attributeNames.put("training_site_status", "trainingSiteStatus");
		attributeNames.put("training_site_address", "trainingSiteAddress");
		attributeNames.put(
			"training_site_description", "trainingSiteDescription");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("training_site_master_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("modified_date", 32L);

		columnBitmasks.put("training_site_name", 64L);

		columnBitmasks.put("training_site_code", 128L);

		columnBitmasks.put("training_site_status", 256L);

		columnBitmasks.put("training_site_address", 512L);

		columnBitmasks.put("training_site_description", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TrainingSitesMaster _escapedModel;

}