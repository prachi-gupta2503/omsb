/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.TraineeAdmissionDetailsRel;
import gov.omsb.tms.model.TraineeAdmissionDetailsRelModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TraineeAdmissionDetailsRel service. Represents a row in the &quot;trainee_admission_details_rel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TraineeAdmissionDetailsRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TraineeAdmissionDetailsRelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TraineeAdmissionDetailsRelImpl
 * @generated
 */
@JSON(strict = true)
public class TraineeAdmissionDetailsRelModelImpl
	extends BaseModelImpl<TraineeAdmissionDetailsRel>
	implements TraineeAdmissionDetailsRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trainee admission details rel model instance should use the <code>TraineeAdmissionDetailsRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "trainee_admission_details_rel";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR},
		{"trainee_admission_details_rel_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"modified_date", Types.TIMESTAMP},
		{"created_by", Types.BIGINT}, {"modified_by", Types.BIGINT},
		{"trainee_id", Types.BIGINT}, {"program_duration_id", Types.BIGINT},
		{"admission_year", Types.VARCHAR}, {"omsb_number", Types.VARCHAR},
		{"trainee_address", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainee_admission_details_rel_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trainee_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("program_duration_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("admission_year", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("omsb_number", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainee_address", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table trainee_admission_details_rel (uuid_ VARCHAR(75) null,trainee_admission_details_rel_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,created_by LONG,modified_by LONG,trainee_id LONG,program_duration_id LONG,admission_year VARCHAR(75) null,omsb_number VARCHAR(75) null,trainee_address STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table trainee_admission_details_rel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY traineeAdmissionDetailsRel.traineeAdmissionDetailsRelId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY trainee_admission_details_rel.trainee_admission_details_rel_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRAMDURATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAINEEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAINEEADMISSIONDETAILSRELID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TraineeAdmissionDetailsRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _traineeAdmissionDetailsRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTraineeAdmissionDetailsRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _traineeAdmissionDetailsRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TraineeAdmissionDetailsRel.class;
	}

	@Override
	public String getModelClassName() {
		return TraineeAdmissionDetailsRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TraineeAdmissionDetailsRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TraineeAdmissionDetailsRel, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TraineeAdmissionDetailsRel, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TraineeAdmissionDetailsRel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TraineeAdmissionDetailsRel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TraineeAdmissionDetailsRel, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TraineeAdmissionDetailsRel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TraineeAdmissionDetailsRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TraineeAdmissionDetailsRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<TraineeAdmissionDetailsRel, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<TraineeAdmissionDetailsRel, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<TraineeAdmissionDetailsRel, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TraineeAdmissionDetailsRel, Object>>();
		Map<String, BiConsumer<TraineeAdmissionDetailsRel, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<TraineeAdmissionDetailsRel, ?>>();

		attributeGetterFunctions.put(
			"uuid", TraineeAdmissionDetailsRel::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<TraineeAdmissionDetailsRel, String>)
				TraineeAdmissionDetailsRel::setUuid);
		attributeGetterFunctions.put(
			"traineeAdmissionDetailsRelId",
			TraineeAdmissionDetailsRel::getTraineeAdmissionDetailsRelId);
		attributeSetterBiConsumers.put(
			"traineeAdmissionDetailsRelId",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setTraineeAdmissionDetailsRelId);
		attributeGetterFunctions.put(
			"groupId", TraineeAdmissionDetailsRel::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setGroupId);
		attributeGetterFunctions.put(
			"companyId", TraineeAdmissionDetailsRel::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", TraineeAdmissionDetailsRel::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TraineeAdmissionDetailsRel, Date>)
				TraineeAdmissionDetailsRel::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TraineeAdmissionDetailsRel::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TraineeAdmissionDetailsRel, Date>)
				TraineeAdmissionDetailsRel::setModifiedDate);
		attributeGetterFunctions.put(
			"createdBy", TraineeAdmissionDetailsRel::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", TraineeAdmissionDetailsRel::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setModifiedBy);
		attributeGetterFunctions.put(
			"traineeId", TraineeAdmissionDetailsRel::getTraineeId);
		attributeSetterBiConsumers.put(
			"traineeId",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setTraineeId);
		attributeGetterFunctions.put(
			"programDurationId",
			TraineeAdmissionDetailsRel::getProgramDurationId);
		attributeSetterBiConsumers.put(
			"programDurationId",
			(BiConsumer<TraineeAdmissionDetailsRel, Long>)
				TraineeAdmissionDetailsRel::setProgramDurationId);
		attributeGetterFunctions.put(
			"admissionYear", TraineeAdmissionDetailsRel::getAdmissionYear);
		attributeSetterBiConsumers.put(
			"admissionYear",
			(BiConsumer<TraineeAdmissionDetailsRel, String>)
				TraineeAdmissionDetailsRel::setAdmissionYear);
		attributeGetterFunctions.put(
			"omsbNumber", TraineeAdmissionDetailsRel::getOmsbNumber);
		attributeSetterBiConsumers.put(
			"omsbNumber",
			(BiConsumer<TraineeAdmissionDetailsRel, String>)
				TraineeAdmissionDetailsRel::setOmsbNumber);
		attributeGetterFunctions.put(
			"traineeAddress", TraineeAdmissionDetailsRel::getTraineeAddress);
		attributeSetterBiConsumers.put(
			"traineeAddress",
			(BiConsumer<TraineeAdmissionDetailsRel, String>)
				TraineeAdmissionDetailsRel::setTraineeAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getTraineeAdmissionDetailsRelId() {
		return _traineeAdmissionDetailsRelId;
	}

	@Override
	public void setTraineeAdmissionDetailsRelId(
		long traineeAdmissionDetailsRelId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeAdmissionDetailsRelId = traineeAdmissionDetailsRelId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public long getTraineeId() {
		return _traineeId;
	}

	@Override
	public void setTraineeId(long traineeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeId = traineeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTraineeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("trainee_id"));
	}

	@JSON
	@Override
	public long getProgramDurationId() {
		return _programDurationId;
	}

	@Override
	public void setProgramDurationId(long programDurationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programDurationId = programDurationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgramDurationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("program_duration_id"));
	}

	@JSON
	@Override
	public String getAdmissionYear() {
		if (_admissionYear == null) {
			return "";
		}
		else {
			return _admissionYear;
		}
	}

	@Override
	public void setAdmissionYear(String admissionYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_admissionYear = admissionYear;
	}

	@JSON
	@Override
	public String getOmsbNumber() {
		if (_omsbNumber == null) {
			return "";
		}
		else {
			return _omsbNumber;
		}
	}

	@Override
	public void setOmsbNumber(String omsbNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_omsbNumber = omsbNumber;
	}

	@JSON
	@Override
	public String getTraineeAddress() {
		if (_traineeAddress == null) {
			return "";
		}
		else {
			return _traineeAddress;
		}
	}

	@Override
	public String getTraineeAddress(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTraineeAddress(languageId);
	}

	@Override
	public String getTraineeAddress(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTraineeAddress(languageId, useDefault);
	}

	@Override
	public String getTraineeAddress(String languageId) {
		return LocalizationUtil.getLocalization(
			getTraineeAddress(), languageId);
	}

	@Override
	public String getTraineeAddress(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTraineeAddress(), languageId, useDefault);
	}

	@Override
	public String getTraineeAddressCurrentLanguageId() {
		return _traineeAddressCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTraineeAddressCurrentValue() {
		Locale locale = getLocale(_traineeAddressCurrentLanguageId);

		return getTraineeAddress(locale);
	}

	@Override
	public Map<Locale, String> getTraineeAddressMap() {
		return LocalizationUtil.getLocalizationMap(getTraineeAddress());
	}

	@Override
	public void setTraineeAddress(String traineeAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeAddress = traineeAddress;
	}

	@Override
	public void setTraineeAddress(String traineeAddress, Locale locale) {
		setTraineeAddress(traineeAddress, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTraineeAddress(
		String traineeAddress, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(traineeAddress)) {
			setTraineeAddress(
				LocalizationUtil.updateLocalization(
					getTraineeAddress(), "TraineeAddress", traineeAddress,
					languageId, defaultLanguageId));
		}
		else {
			setTraineeAddress(
				LocalizationUtil.removeLocalization(
					getTraineeAddress(), "TraineeAddress", languageId));
		}
	}

	@Override
	public void setTraineeAddressCurrentLanguageId(String languageId) {
		_traineeAddressCurrentLanguageId = languageId;
	}

	@Override
	public void setTraineeAddressMap(Map<Locale, String> traineeAddressMap) {
		setTraineeAddressMap(traineeAddressMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTraineeAddressMap(
		Map<Locale, String> traineeAddressMap, Locale defaultLocale) {

		if (traineeAddressMap == null) {
			return;
		}

		setTraineeAddress(
			LocalizationUtil.updateLocalization(
				traineeAddressMap, getTraineeAddress(), "TraineeAddress",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				TraineeAdmissionDetailsRel.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TraineeAdmissionDetailsRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> traineeAddressMap = getTraineeAddressMap();

		for (Map.Entry<Locale, String> entry : traineeAddressMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTraineeAddress();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			TraineeAdmissionDetailsRel.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String traineeAddress = getTraineeAddress(defaultLocale);

		if (Validator.isNull(traineeAddress)) {
			setTraineeAddress(
				getTraineeAddress(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTraineeAddress(
				getTraineeAddress(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public TraineeAdmissionDetailsRel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TraineeAdmissionDetailsRel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TraineeAdmissionDetailsRelImpl traineeAdmissionDetailsRelImpl =
			new TraineeAdmissionDetailsRelImpl();

		traineeAdmissionDetailsRelImpl.setUuid(getUuid());
		traineeAdmissionDetailsRelImpl.setTraineeAdmissionDetailsRelId(
			getTraineeAdmissionDetailsRelId());
		traineeAdmissionDetailsRelImpl.setGroupId(getGroupId());
		traineeAdmissionDetailsRelImpl.setCompanyId(getCompanyId());
		traineeAdmissionDetailsRelImpl.setCreateDate(getCreateDate());
		traineeAdmissionDetailsRelImpl.setModifiedDate(getModifiedDate());
		traineeAdmissionDetailsRelImpl.setCreatedBy(getCreatedBy());
		traineeAdmissionDetailsRelImpl.setModifiedBy(getModifiedBy());
		traineeAdmissionDetailsRelImpl.setTraineeId(getTraineeId());
		traineeAdmissionDetailsRelImpl.setProgramDurationId(
			getProgramDurationId());
		traineeAdmissionDetailsRelImpl.setAdmissionYear(getAdmissionYear());
		traineeAdmissionDetailsRelImpl.setOmsbNumber(getOmsbNumber());
		traineeAdmissionDetailsRelImpl.setTraineeAddress(getTraineeAddress());

		traineeAdmissionDetailsRelImpl.resetOriginalValues();

		return traineeAdmissionDetailsRelImpl;
	}

	@Override
	public TraineeAdmissionDetailsRel cloneWithOriginalValues() {
		TraineeAdmissionDetailsRelImpl traineeAdmissionDetailsRelImpl =
			new TraineeAdmissionDetailsRelImpl();

		traineeAdmissionDetailsRelImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		traineeAdmissionDetailsRelImpl.setTraineeAdmissionDetailsRelId(
			this.<Long>getColumnOriginalValue(
				"trainee_admission_details_rel_id"));
		traineeAdmissionDetailsRelImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		traineeAdmissionDetailsRelImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		traineeAdmissionDetailsRelImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		traineeAdmissionDetailsRelImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		traineeAdmissionDetailsRelImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("created_by"));
		traineeAdmissionDetailsRelImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modified_by"));
		traineeAdmissionDetailsRelImpl.setTraineeId(
			this.<Long>getColumnOriginalValue("trainee_id"));
		traineeAdmissionDetailsRelImpl.setProgramDurationId(
			this.<Long>getColumnOriginalValue("program_duration_id"));
		traineeAdmissionDetailsRelImpl.setAdmissionYear(
			this.<String>getColumnOriginalValue("admission_year"));
		traineeAdmissionDetailsRelImpl.setOmsbNumber(
			this.<String>getColumnOriginalValue("omsb_number"));
		traineeAdmissionDetailsRelImpl.setTraineeAddress(
			this.<String>getColumnOriginalValue("trainee_address"));

		return traineeAdmissionDetailsRelImpl;
	}

	@Override
	public int compareTo(
		TraineeAdmissionDetailsRel traineeAdmissionDetailsRel) {

		long primaryKey = traineeAdmissionDetailsRel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TraineeAdmissionDetailsRel)) {
			return false;
		}

		TraineeAdmissionDetailsRel traineeAdmissionDetailsRel =
			(TraineeAdmissionDetailsRel)object;

		long primaryKey = traineeAdmissionDetailsRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TraineeAdmissionDetailsRel> toCacheModel() {
		TraineeAdmissionDetailsRelCacheModel
			traineeAdmissionDetailsRelCacheModel =
				new TraineeAdmissionDetailsRelCacheModel();

		traineeAdmissionDetailsRelCacheModel.uuid = getUuid();

		String uuid = traineeAdmissionDetailsRelCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			traineeAdmissionDetailsRelCacheModel.uuid = null;
		}

		traineeAdmissionDetailsRelCacheModel.traineeAdmissionDetailsRelId =
			getTraineeAdmissionDetailsRelId();

		traineeAdmissionDetailsRelCacheModel.groupId = getGroupId();

		traineeAdmissionDetailsRelCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			traineeAdmissionDetailsRelCacheModel.createDate =
				createDate.getTime();
		}
		else {
			traineeAdmissionDetailsRelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			traineeAdmissionDetailsRelCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			traineeAdmissionDetailsRelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		traineeAdmissionDetailsRelCacheModel.createdBy = getCreatedBy();

		traineeAdmissionDetailsRelCacheModel.modifiedBy = getModifiedBy();

		traineeAdmissionDetailsRelCacheModel.traineeId = getTraineeId();

		traineeAdmissionDetailsRelCacheModel.programDurationId =
			getProgramDurationId();

		traineeAdmissionDetailsRelCacheModel.admissionYear = getAdmissionYear();

		String admissionYear =
			traineeAdmissionDetailsRelCacheModel.admissionYear;

		if ((admissionYear != null) && (admissionYear.length() == 0)) {
			traineeAdmissionDetailsRelCacheModel.admissionYear = null;
		}

		traineeAdmissionDetailsRelCacheModel.omsbNumber = getOmsbNumber();

		String omsbNumber = traineeAdmissionDetailsRelCacheModel.omsbNumber;

		if ((omsbNumber != null) && (omsbNumber.length() == 0)) {
			traineeAdmissionDetailsRelCacheModel.omsbNumber = null;
		}

		traineeAdmissionDetailsRelCacheModel.traineeAddress =
			getTraineeAddress();

		String traineeAddress =
			traineeAdmissionDetailsRelCacheModel.traineeAddress;

		if ((traineeAddress != null) && (traineeAddress.length() == 0)) {
			traineeAdmissionDetailsRelCacheModel.traineeAddress = null;
		}

		return traineeAdmissionDetailsRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TraineeAdmissionDetailsRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TraineeAdmissionDetailsRel, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TraineeAdmissionDetailsRel, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TraineeAdmissionDetailsRel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TraineeAdmissionDetailsRel>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TraineeAdmissionDetailsRel.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _traineeAdmissionDetailsRelId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdBy;
	private long _modifiedBy;
	private long _traineeId;
	private long _programDurationId;
	private String _admissionYear;
	private String _omsbNumber;
	private String _traineeAddress;
	private String _traineeAddressCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TraineeAdmissionDetailsRel, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TraineeAdmissionDetailsRel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"trainee_admission_details_rel_id", _traineeAdmissionDetailsRelId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("created_by", _createdBy);
		_columnOriginalValues.put("modified_by", _modifiedBy);
		_columnOriginalValues.put("trainee_id", _traineeId);
		_columnOriginalValues.put("program_duration_id", _programDurationId);
		_columnOriginalValues.put("admission_year", _admissionYear);
		_columnOriginalValues.put("omsb_number", _omsbNumber);
		_columnOriginalValues.put("trainee_address", _traineeAddress);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"trainee_admission_details_rel_id", "traineeAdmissionDetailsRelId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("created_by", "createdBy");
		attributeNames.put("modified_by", "modifiedBy");
		attributeNames.put("trainee_id", "traineeId");
		attributeNames.put("program_duration_id", "programDurationId");
		attributeNames.put("admission_year", "admissionYear");
		attributeNames.put("omsb_number", "omsbNumber");
		attributeNames.put("trainee_address", "traineeAddress");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("trainee_admission_details_rel_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("modified_date", 32L);

		columnBitmasks.put("created_by", 64L);

		columnBitmasks.put("modified_by", 128L);

		columnBitmasks.put("trainee_id", 256L);

		columnBitmasks.put("program_duration_id", 512L);

		columnBitmasks.put("admission_year", 1024L);

		columnBitmasks.put("omsb_number", 2048L);

		columnBitmasks.put("trainee_address", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TraineeAdmissionDetailsRel _escapedModel;

}