/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.ProgramMaster;
import gov.omsb.tms.model.ProgramMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProgramMaster service. Represents a row in the &quot;program_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProgramMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProgramMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProgramMasterImpl
 * @generated
 */
@JSON(strict = true)
public class ProgramMasterModelImpl
	extends BaseModelImpl<ProgramMaster> implements ProgramMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a program master model instance should use the <code>ProgramMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "program_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"program_master_id", Types.BIGINT},
		{"program_type_id", Types.BIGINT}, {"group_id", Types.BIGINT},
		{"company_id", Types.BIGINT}, {"create_date", Types.TIMESTAMP},
		{"modified_date", Types.TIMESTAMP}, {"program_code", Types.VARCHAR},
		{"program_name", Types.VARCHAR}, {"program_description", Types.VARCHAR},
		{"establishment_date", Types.TIMESTAMP},
		{"program_vision", Types.VARCHAR}, {"program_mission", Types.VARCHAR},
		{"program_status", Types.BOOLEAN},
		{"program_objectives", Types.VARCHAR},
		{"program_admission_requirements", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_master_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("program_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("program_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("establishment_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("program_vision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_mission", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("program_objectives", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_admission_requirements", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table program_master (uuid_ VARCHAR(75) null,program_master_id LONG not null primary key,program_type_id LONG,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,program_code STRING null,program_name STRING null,program_description STRING null,establishment_date DATE null,program_vision STRING null,program_mission STRING null,program_status BOOLEAN,program_objectives STRING null,program_admission_requirements STRING null)";

	public static final String TABLE_SQL_DROP = "drop table program_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY programMaster.programMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY program_master.program_master_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRAMCODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRAMNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRAMSTATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRAMTYPEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGRAMMASTERID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProgramMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _programMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProgramMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _programMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProgramMaster.class;
	}

	@Override
	public String getModelClassName() {
		return ProgramMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProgramMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProgramMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProgramMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProgramMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProgramMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProgramMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProgramMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProgramMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProgramMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ProgramMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProgramMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProgramMaster, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProgramMaster, Object>>();
		Map<String, BiConsumer<ProgramMaster, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProgramMaster, ?>>();

		attributeGetterFunctions.put("uuid", ProgramMaster::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ProgramMaster, String>)ProgramMaster::setUuid);
		attributeGetterFunctions.put(
			"programMasterId", ProgramMaster::getProgramMasterId);
		attributeSetterBiConsumers.put(
			"programMasterId",
			(BiConsumer<ProgramMaster, Long>)ProgramMaster::setProgramMasterId);
		attributeGetterFunctions.put(
			"programTypeId", ProgramMaster::getProgramTypeId);
		attributeSetterBiConsumers.put(
			"programTypeId",
			(BiConsumer<ProgramMaster, Long>)ProgramMaster::setProgramTypeId);
		attributeGetterFunctions.put("groupId", ProgramMaster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ProgramMaster, Long>)ProgramMaster::setGroupId);
		attributeGetterFunctions.put("companyId", ProgramMaster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ProgramMaster, Long>)ProgramMaster::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", ProgramMaster::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ProgramMaster, Date>)ProgramMaster::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ProgramMaster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ProgramMaster, Date>)ProgramMaster::setModifiedDate);
		attributeGetterFunctions.put(
			"programCode", ProgramMaster::getProgramCode);
		attributeSetterBiConsumers.put(
			"programCode",
			(BiConsumer<ProgramMaster, String>)ProgramMaster::setProgramCode);
		attributeGetterFunctions.put(
			"programName", ProgramMaster::getProgramName);
		attributeSetterBiConsumers.put(
			"programName",
			(BiConsumer<ProgramMaster, String>)ProgramMaster::setProgramName);
		attributeGetterFunctions.put(
			"programDescription", ProgramMaster::getProgramDescription);
		attributeSetterBiConsumers.put(
			"programDescription",
			(BiConsumer<ProgramMaster, String>)
				ProgramMaster::setProgramDescription);
		attributeGetterFunctions.put(
			"establishmentDate", ProgramMaster::getEstablishmentDate);
		attributeSetterBiConsumers.put(
			"establishmentDate",
			(BiConsumer<ProgramMaster, Date>)
				ProgramMaster::setEstablishmentDate);
		attributeGetterFunctions.put(
			"programVision", ProgramMaster::getProgramVision);
		attributeSetterBiConsumers.put(
			"programVision",
			(BiConsumer<ProgramMaster, String>)ProgramMaster::setProgramVision);
		attributeGetterFunctions.put(
			"programMission", ProgramMaster::getProgramMission);
		attributeSetterBiConsumers.put(
			"programMission",
			(BiConsumer<ProgramMaster, String>)
				ProgramMaster::setProgramMission);
		attributeGetterFunctions.put(
			"programStatus", ProgramMaster::getProgramStatus);
		attributeSetterBiConsumers.put(
			"programStatus",
			(BiConsumer<ProgramMaster, Boolean>)
				ProgramMaster::setProgramStatus);
		attributeGetterFunctions.put(
			"programObjectives", ProgramMaster::getProgramObjectives);
		attributeSetterBiConsumers.put(
			"programObjectives",
			(BiConsumer<ProgramMaster, String>)
				ProgramMaster::setProgramObjectives);
		attributeGetterFunctions.put(
			"programAdmissionRequirements",
			ProgramMaster::getProgramAdmissionRequirements);
		attributeSetterBiConsumers.put(
			"programAdmissionRequirements",
			(BiConsumer<ProgramMaster, String>)
				ProgramMaster::setProgramAdmissionRequirements);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getProgramMasterId() {
		return _programMasterId;
	}

	@Override
	public void setProgramMasterId(long programMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programMasterId = programMasterId;
	}

	@JSON
	@Override
	public long getProgramTypeId() {
		return _programTypeId;
	}

	@Override
	public void setProgramTypeId(long programTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programTypeId = programTypeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgramTypeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("program_type_id"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProgramCode() {
		if (_programCode == null) {
			return "";
		}
		else {
			return _programCode;
		}
	}

	@Override
	public String getProgramCode(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramCode(languageId);
	}

	@Override
	public String getProgramCode(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramCode(languageId, useDefault);
	}

	@Override
	public String getProgramCode(String languageId) {
		return LocalizationUtil.getLocalization(getProgramCode(), languageId);
	}

	@Override
	public String getProgramCode(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgramCode(), languageId, useDefault);
	}

	@Override
	public String getProgramCodeCurrentLanguageId() {
		return _programCodeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramCodeCurrentValue() {
		Locale locale = getLocale(_programCodeCurrentLanguageId);

		return getProgramCode(locale);
	}

	@Override
	public Map<Locale, String> getProgramCodeMap() {
		return LocalizationUtil.getLocalizationMap(getProgramCode());
	}

	@Override
	public void setProgramCode(String programCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programCode = programCode;
	}

	@Override
	public void setProgramCode(String programCode, Locale locale) {
		setProgramCode(programCode, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramCode(
		String programCode, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programCode)) {
			setProgramCode(
				LocalizationUtil.updateLocalization(
					getProgramCode(), "ProgramCode", programCode, languageId,
					defaultLanguageId));
		}
		else {
			setProgramCode(
				LocalizationUtil.removeLocalization(
					getProgramCode(), "ProgramCode", languageId));
		}
	}

	@Override
	public void setProgramCodeCurrentLanguageId(String languageId) {
		_programCodeCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramCodeMap(Map<Locale, String> programCodeMap) {
		setProgramCodeMap(programCodeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramCodeMap(
		Map<Locale, String> programCodeMap, Locale defaultLocale) {

		if (programCodeMap == null) {
			return;
		}

		setProgramCode(
			LocalizationUtil.updateLocalization(
				programCodeMap, getProgramCode(), "ProgramCode",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalProgramCode() {
		return getColumnOriginalValue("program_code");
	}

	@JSON
	@Override
	public String getProgramName() {
		if (_programName == null) {
			return "";
		}
		else {
			return _programName;
		}
	}

	@Override
	public String getProgramName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramName(languageId);
	}

	@Override
	public String getProgramName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramName(languageId, useDefault);
	}

	@Override
	public String getProgramName(String languageId) {
		return LocalizationUtil.getLocalization(getProgramName(), languageId);
	}

	@Override
	public String getProgramName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgramName(), languageId, useDefault);
	}

	@Override
	public String getProgramNameCurrentLanguageId() {
		return _programNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramNameCurrentValue() {
		Locale locale = getLocale(_programNameCurrentLanguageId);

		return getProgramName(locale);
	}

	@Override
	public Map<Locale, String> getProgramNameMap() {
		return LocalizationUtil.getLocalizationMap(getProgramName());
	}

	@Override
	public void setProgramName(String programName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programName = programName;
	}

	@Override
	public void setProgramName(String programName, Locale locale) {
		setProgramName(programName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramName(
		String programName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programName)) {
			setProgramName(
				LocalizationUtil.updateLocalization(
					getProgramName(), "ProgramName", programName, languageId,
					defaultLanguageId));
		}
		else {
			setProgramName(
				LocalizationUtil.removeLocalization(
					getProgramName(), "ProgramName", languageId));
		}
	}

	@Override
	public void setProgramNameCurrentLanguageId(String languageId) {
		_programNameCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramNameMap(Map<Locale, String> programNameMap) {
		setProgramNameMap(programNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramNameMap(
		Map<Locale, String> programNameMap, Locale defaultLocale) {

		if (programNameMap == null) {
			return;
		}

		setProgramName(
			LocalizationUtil.updateLocalization(
				programNameMap, getProgramName(), "ProgramName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalProgramName() {
		return getColumnOriginalValue("program_name");
	}

	@JSON
	@Override
	public String getProgramDescription() {
		if (_programDescription == null) {
			return "";
		}
		else {
			return _programDescription;
		}
	}

	@Override
	public String getProgramDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramDescription(languageId);
	}

	@Override
	public String getProgramDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramDescription(languageId, useDefault);
	}

	@Override
	public String getProgramDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getProgramDescription(), languageId);
	}

	@Override
	public String getProgramDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgramDescription(), languageId, useDefault);
	}

	@Override
	public String getProgramDescriptionCurrentLanguageId() {
		return _programDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramDescriptionCurrentValue() {
		Locale locale = getLocale(_programDescriptionCurrentLanguageId);

		return getProgramDescription(locale);
	}

	@Override
	public Map<Locale, String> getProgramDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getProgramDescription());
	}

	@Override
	public void setProgramDescription(String programDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programDescription = programDescription;
	}

	@Override
	public void setProgramDescription(
		String programDescription, Locale locale) {

		setProgramDescription(
			programDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramDescription(
		String programDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programDescription)) {
			setProgramDescription(
				LocalizationUtil.updateLocalization(
					getProgramDescription(), "ProgramDescription",
					programDescription, languageId, defaultLanguageId));
		}
		else {
			setProgramDescription(
				LocalizationUtil.removeLocalization(
					getProgramDescription(), "ProgramDescription", languageId));
		}
	}

	@Override
	public void setProgramDescriptionCurrentLanguageId(String languageId) {
		_programDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramDescriptionMap(
		Map<Locale, String> programDescriptionMap) {

		setProgramDescriptionMap(
			programDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramDescriptionMap(
		Map<Locale, String> programDescriptionMap, Locale defaultLocale) {

		if (programDescriptionMap == null) {
			return;
		}

		setProgramDescription(
			LocalizationUtil.updateLocalization(
				programDescriptionMap, getProgramDescription(),
				"ProgramDescription", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getEstablishmentDate() {
		return _establishmentDate;
	}

	@Override
	public void setEstablishmentDate(Date establishmentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_establishmentDate = establishmentDate;
	}

	@JSON
	@Override
	public String getProgramVision() {
		if (_programVision == null) {
			return "";
		}
		else {
			return _programVision;
		}
	}

	@Override
	public String getProgramVision(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramVision(languageId);
	}

	@Override
	public String getProgramVision(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramVision(languageId, useDefault);
	}

	@Override
	public String getProgramVision(String languageId) {
		return LocalizationUtil.getLocalization(getProgramVision(), languageId);
	}

	@Override
	public String getProgramVision(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgramVision(), languageId, useDefault);
	}

	@Override
	public String getProgramVisionCurrentLanguageId() {
		return _programVisionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramVisionCurrentValue() {
		Locale locale = getLocale(_programVisionCurrentLanguageId);

		return getProgramVision(locale);
	}

	@Override
	public Map<Locale, String> getProgramVisionMap() {
		return LocalizationUtil.getLocalizationMap(getProgramVision());
	}

	@Override
	public void setProgramVision(String programVision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programVision = programVision;
	}

	@Override
	public void setProgramVision(String programVision, Locale locale) {
		setProgramVision(programVision, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramVision(
		String programVision, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programVision)) {
			setProgramVision(
				LocalizationUtil.updateLocalization(
					getProgramVision(), "ProgramVision", programVision,
					languageId, defaultLanguageId));
		}
		else {
			setProgramVision(
				LocalizationUtil.removeLocalization(
					getProgramVision(), "ProgramVision", languageId));
		}
	}

	@Override
	public void setProgramVisionCurrentLanguageId(String languageId) {
		_programVisionCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramVisionMap(Map<Locale, String> programVisionMap) {
		setProgramVisionMap(programVisionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramVisionMap(
		Map<Locale, String> programVisionMap, Locale defaultLocale) {

		if (programVisionMap == null) {
			return;
		}

		setProgramVision(
			LocalizationUtil.updateLocalization(
				programVisionMap, getProgramVision(), "ProgramVision",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getProgramMission() {
		if (_programMission == null) {
			return "";
		}
		else {
			return _programMission;
		}
	}

	@Override
	public String getProgramMission(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramMission(languageId);
	}

	@Override
	public String getProgramMission(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramMission(languageId, useDefault);
	}

	@Override
	public String getProgramMission(String languageId) {
		return LocalizationUtil.getLocalization(
			getProgramMission(), languageId);
	}

	@Override
	public String getProgramMission(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgramMission(), languageId, useDefault);
	}

	@Override
	public String getProgramMissionCurrentLanguageId() {
		return _programMissionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramMissionCurrentValue() {
		Locale locale = getLocale(_programMissionCurrentLanguageId);

		return getProgramMission(locale);
	}

	@Override
	public Map<Locale, String> getProgramMissionMap() {
		return LocalizationUtil.getLocalizationMap(getProgramMission());
	}

	@Override
	public void setProgramMission(String programMission) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programMission = programMission;
	}

	@Override
	public void setProgramMission(String programMission, Locale locale) {
		setProgramMission(programMission, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramMission(
		String programMission, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programMission)) {
			setProgramMission(
				LocalizationUtil.updateLocalization(
					getProgramMission(), "ProgramMission", programMission,
					languageId, defaultLanguageId));
		}
		else {
			setProgramMission(
				LocalizationUtil.removeLocalization(
					getProgramMission(), "ProgramMission", languageId));
		}
	}

	@Override
	public void setProgramMissionCurrentLanguageId(String languageId) {
		_programMissionCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramMissionMap(Map<Locale, String> programMissionMap) {
		setProgramMissionMap(programMissionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramMissionMap(
		Map<Locale, String> programMissionMap, Locale defaultLocale) {

		if (programMissionMap == null) {
			return;
		}

		setProgramMission(
			LocalizationUtil.updateLocalization(
				programMissionMap, getProgramMission(), "ProgramMission",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Boolean getProgramStatus() {
		return _programStatus;
	}

	@Override
	public void setProgramStatus(Boolean programStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programStatus = programStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Boolean getOriginalProgramStatus() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("program_status"));
	}

	@JSON
	@Override
	public String getProgramObjectives() {
		if (_programObjectives == null) {
			return "";
		}
		else {
			return _programObjectives;
		}
	}

	@Override
	public String getProgramObjectives(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramObjectives(languageId);
	}

	@Override
	public String getProgramObjectives(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramObjectives(languageId, useDefault);
	}

	@Override
	public String getProgramObjectives(String languageId) {
		return LocalizationUtil.getLocalization(
			getProgramObjectives(), languageId);
	}

	@Override
	public String getProgramObjectives(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgramObjectives(), languageId, useDefault);
	}

	@Override
	public String getProgramObjectivesCurrentLanguageId() {
		return _programObjectivesCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramObjectivesCurrentValue() {
		Locale locale = getLocale(_programObjectivesCurrentLanguageId);

		return getProgramObjectives(locale);
	}

	@Override
	public Map<Locale, String> getProgramObjectivesMap() {
		return LocalizationUtil.getLocalizationMap(getProgramObjectives());
	}

	@Override
	public void setProgramObjectives(String programObjectives) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programObjectives = programObjectives;
	}

	@Override
	public void setProgramObjectives(String programObjectives, Locale locale) {
		setProgramObjectives(
			programObjectives, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramObjectives(
		String programObjectives, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programObjectives)) {
			setProgramObjectives(
				LocalizationUtil.updateLocalization(
					getProgramObjectives(), "ProgramObjectives",
					programObjectives, languageId, defaultLanguageId));
		}
		else {
			setProgramObjectives(
				LocalizationUtil.removeLocalization(
					getProgramObjectives(), "ProgramObjectives", languageId));
		}
	}

	@Override
	public void setProgramObjectivesCurrentLanguageId(String languageId) {
		_programObjectivesCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramObjectivesMap(
		Map<Locale, String> programObjectivesMap) {

		setProgramObjectivesMap(programObjectivesMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramObjectivesMap(
		Map<Locale, String> programObjectivesMap, Locale defaultLocale) {

		if (programObjectivesMap == null) {
			return;
		}

		setProgramObjectives(
			LocalizationUtil.updateLocalization(
				programObjectivesMap, getProgramObjectives(),
				"ProgramObjectives", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getProgramAdmissionRequirements() {
		if (_programAdmissionRequirements == null) {
			return "";
		}
		else {
			return _programAdmissionRequirements;
		}
	}

	@Override
	public String getProgramAdmissionRequirements(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramAdmissionRequirements(languageId);
	}

	@Override
	public String getProgramAdmissionRequirements(
		Locale locale, boolean useDefault) {

		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgramAdmissionRequirements(languageId, useDefault);
	}

	@Override
	public String getProgramAdmissionRequirements(String languageId) {
		return LocalizationUtil.getLocalization(
			getProgramAdmissionRequirements(), languageId);
	}

	@Override
	public String getProgramAdmissionRequirements(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getProgramAdmissionRequirements(), languageId, useDefault);
	}

	@Override
	public String getProgramAdmissionRequirementsCurrentLanguageId() {
		return _programAdmissionRequirementsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramAdmissionRequirementsCurrentValue() {
		Locale locale = getLocale(
			_programAdmissionRequirementsCurrentLanguageId);

		return getProgramAdmissionRequirements(locale);
	}

	@Override
	public Map<Locale, String> getProgramAdmissionRequirementsMap() {
		return LocalizationUtil.getLocalizationMap(
			getProgramAdmissionRequirements());
	}

	@Override
	public void setProgramAdmissionRequirements(
		String programAdmissionRequirements) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programAdmissionRequirements = programAdmissionRequirements;
	}

	@Override
	public void setProgramAdmissionRequirements(
		String programAdmissionRequirements, Locale locale) {

		setProgramAdmissionRequirements(
			programAdmissionRequirements, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramAdmissionRequirements(
		String programAdmissionRequirements, Locale locale,
		Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(programAdmissionRequirements)) {
			setProgramAdmissionRequirements(
				LocalizationUtil.updateLocalization(
					getProgramAdmissionRequirements(),
					"ProgramAdmissionRequirements",
					programAdmissionRequirements, languageId,
					defaultLanguageId));
		}
		else {
			setProgramAdmissionRequirements(
				LocalizationUtil.removeLocalization(
					getProgramAdmissionRequirements(),
					"ProgramAdmissionRequirements", languageId));
		}
	}

	@Override
	public void setProgramAdmissionRequirementsCurrentLanguageId(
		String languageId) {

		_programAdmissionRequirementsCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramAdmissionRequirementsMap(
		Map<Locale, String> programAdmissionRequirementsMap) {

		setProgramAdmissionRequirementsMap(
			programAdmissionRequirementsMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProgramAdmissionRequirementsMap(
		Map<Locale, String> programAdmissionRequirementsMap,
		Locale defaultLocale) {

		if (programAdmissionRequirementsMap == null) {
			return;
		}

		setProgramAdmissionRequirements(
			LocalizationUtil.updateLocalization(
				programAdmissionRequirementsMap,
				getProgramAdmissionRequirements(),
				"ProgramAdmissionRequirements",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ProgramMaster.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ProgramMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> programCodeMap = getProgramCodeMap();

		for (Map.Entry<Locale, String> entry : programCodeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programNameMap = getProgramNameMap();

		for (Map.Entry<Locale, String> entry : programNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programDescriptionMap = getProgramDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				programDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programVisionMap = getProgramVisionMap();

		for (Map.Entry<Locale, String> entry : programVisionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programMissionMap = getProgramMissionMap();

		for (Map.Entry<Locale, String> entry : programMissionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programObjectivesMap = getProgramObjectivesMap();

		for (Map.Entry<Locale, String> entry :
				programObjectivesMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programAdmissionRequirementsMap =
			getProgramAdmissionRequirementsMap();

		for (Map.Entry<Locale, String> entry :
				programAdmissionRequirementsMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getProgramCode();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			ProgramMaster.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String programCode = getProgramCode(defaultLocale);

		if (Validator.isNull(programCode)) {
			setProgramCode(
				getProgramCode(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgramCode(
				getProgramCode(defaultLocale), defaultLocale, defaultLocale);
		}

		String programName = getProgramName(defaultLocale);

		if (Validator.isNull(programName)) {
			setProgramName(
				getProgramName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgramName(
				getProgramName(defaultLocale), defaultLocale, defaultLocale);
		}

		String programDescription = getProgramDescription(defaultLocale);

		if (Validator.isNull(programDescription)) {
			setProgramDescription(
				getProgramDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgramDescription(
				getProgramDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String programVision = getProgramVision(defaultLocale);

		if (Validator.isNull(programVision)) {
			setProgramVision(
				getProgramVision(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgramVision(
				getProgramVision(defaultLocale), defaultLocale, defaultLocale);
		}

		String programMission = getProgramMission(defaultLocale);

		if (Validator.isNull(programMission)) {
			setProgramMission(
				getProgramMission(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgramMission(
				getProgramMission(defaultLocale), defaultLocale, defaultLocale);
		}

		String programObjectives = getProgramObjectives(defaultLocale);

		if (Validator.isNull(programObjectives)) {
			setProgramObjectives(
				getProgramObjectives(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgramObjectives(
				getProgramObjectives(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String programAdmissionRequirements = getProgramAdmissionRequirements(
			defaultLocale);

		if (Validator.isNull(programAdmissionRequirements)) {
			setProgramAdmissionRequirements(
				getProgramAdmissionRequirements(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setProgramAdmissionRequirements(
				getProgramAdmissionRequirements(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public ProgramMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProgramMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProgramMasterImpl programMasterImpl = new ProgramMasterImpl();

		programMasterImpl.setUuid(getUuid());
		programMasterImpl.setProgramMasterId(getProgramMasterId());
		programMasterImpl.setProgramTypeId(getProgramTypeId());
		programMasterImpl.setGroupId(getGroupId());
		programMasterImpl.setCompanyId(getCompanyId());
		programMasterImpl.setCreateDate(getCreateDate());
		programMasterImpl.setModifiedDate(getModifiedDate());
		programMasterImpl.setProgramCode(getProgramCode());
		programMasterImpl.setProgramName(getProgramName());
		programMasterImpl.setProgramDescription(getProgramDescription());
		programMasterImpl.setEstablishmentDate(getEstablishmentDate());
		programMasterImpl.setProgramVision(getProgramVision());
		programMasterImpl.setProgramMission(getProgramMission());
		programMasterImpl.setProgramStatus(getProgramStatus());
		programMasterImpl.setProgramObjectives(getProgramObjectives());
		programMasterImpl.setProgramAdmissionRequirements(
			getProgramAdmissionRequirements());

		programMasterImpl.resetOriginalValues();

		return programMasterImpl;
	}

	@Override
	public ProgramMaster cloneWithOriginalValues() {
		ProgramMasterImpl programMasterImpl = new ProgramMasterImpl();

		programMasterImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		programMasterImpl.setProgramMasterId(
			this.<Long>getColumnOriginalValue("program_master_id"));
		programMasterImpl.setProgramTypeId(
			this.<Long>getColumnOriginalValue("program_type_id"));
		programMasterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		programMasterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		programMasterImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		programMasterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		programMasterImpl.setProgramCode(
			this.<String>getColumnOriginalValue("program_code"));
		programMasterImpl.setProgramName(
			this.<String>getColumnOriginalValue("program_name"));
		programMasterImpl.setProgramDescription(
			this.<String>getColumnOriginalValue("program_description"));
		programMasterImpl.setEstablishmentDate(
			this.<Date>getColumnOriginalValue("establishment_date"));
		programMasterImpl.setProgramVision(
			this.<String>getColumnOriginalValue("program_vision"));
		programMasterImpl.setProgramMission(
			this.<String>getColumnOriginalValue("program_mission"));
		programMasterImpl.setProgramStatus(
			this.<Boolean>getColumnOriginalValue("program_status"));
		programMasterImpl.setProgramObjectives(
			this.<String>getColumnOriginalValue("program_objectives"));
		programMasterImpl.setProgramAdmissionRequirements(
			this.<String>getColumnOriginalValue(
				"program_admission_requirements"));

		return programMasterImpl;
	}

	@Override
	public int compareTo(ProgramMaster programMaster) {
		long primaryKey = programMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProgramMaster)) {
			return false;
		}

		ProgramMaster programMaster = (ProgramMaster)object;

		long primaryKey = programMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProgramMaster> toCacheModel() {
		ProgramMasterCacheModel programMasterCacheModel =
			new ProgramMasterCacheModel();

		programMasterCacheModel.uuid = getUuid();

		String uuid = programMasterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			programMasterCacheModel.uuid = null;
		}

		programMasterCacheModel.programMasterId = getProgramMasterId();

		programMasterCacheModel.programTypeId = getProgramTypeId();

		programMasterCacheModel.groupId = getGroupId();

		programMasterCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			programMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			programMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			programMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			programMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		programMasterCacheModel.programCode = getProgramCode();

		String programCode = programMasterCacheModel.programCode;

		if ((programCode != null) && (programCode.length() == 0)) {
			programMasterCacheModel.programCode = null;
		}

		programMasterCacheModel.programName = getProgramName();

		String programName = programMasterCacheModel.programName;

		if ((programName != null) && (programName.length() == 0)) {
			programMasterCacheModel.programName = null;
		}

		programMasterCacheModel.programDescription = getProgramDescription();

		String programDescription = programMasterCacheModel.programDescription;

		if ((programDescription != null) &&
			(programDescription.length() == 0)) {

			programMasterCacheModel.programDescription = null;
		}

		Date establishmentDate = getEstablishmentDate();

		if (establishmentDate != null) {
			programMasterCacheModel.establishmentDate =
				establishmentDate.getTime();
		}
		else {
			programMasterCacheModel.establishmentDate = Long.MIN_VALUE;
		}

		programMasterCacheModel.programVision = getProgramVision();

		String programVision = programMasterCacheModel.programVision;

		if ((programVision != null) && (programVision.length() == 0)) {
			programMasterCacheModel.programVision = null;
		}

		programMasterCacheModel.programMission = getProgramMission();

		String programMission = programMasterCacheModel.programMission;

		if ((programMission != null) && (programMission.length() == 0)) {
			programMasterCacheModel.programMission = null;
		}

		Boolean programStatus = getProgramStatus();

		if (programStatus != null) {
			programMasterCacheModel.programStatus = programStatus;
		}

		programMasterCacheModel.programObjectives = getProgramObjectives();

		String programObjectives = programMasterCacheModel.programObjectives;

		if ((programObjectives != null) && (programObjectives.length() == 0)) {
			programMasterCacheModel.programObjectives = null;
		}

		programMasterCacheModel.programAdmissionRequirements =
			getProgramAdmissionRequirements();

		String programAdmissionRequirements =
			programMasterCacheModel.programAdmissionRequirements;

		if ((programAdmissionRequirements != null) &&
			(programAdmissionRequirements.length() == 0)) {

			programMasterCacheModel.programAdmissionRequirements = null;
		}

		return programMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProgramMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProgramMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProgramMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ProgramMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProgramMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ProgramMaster.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _programMasterId;
	private long _programTypeId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _programCode;
	private String _programCodeCurrentLanguageId;
	private String _programName;
	private String _programNameCurrentLanguageId;
	private String _programDescription;
	private String _programDescriptionCurrentLanguageId;
	private Date _establishmentDate;
	private String _programVision;
	private String _programVisionCurrentLanguageId;
	private String _programMission;
	private String _programMissionCurrentLanguageId;
	private Boolean _programStatus;
	private String _programObjectives;
	private String _programObjectivesCurrentLanguageId;
	private String _programAdmissionRequirements;
	private String _programAdmissionRequirementsCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProgramMaster, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProgramMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("program_master_id", _programMasterId);
		_columnOriginalValues.put("program_type_id", _programTypeId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("program_code", _programCode);
		_columnOriginalValues.put("program_name", _programName);
		_columnOriginalValues.put("program_description", _programDescription);
		_columnOriginalValues.put("establishment_date", _establishmentDate);
		_columnOriginalValues.put("program_vision", _programVision);
		_columnOriginalValues.put("program_mission", _programMission);
		_columnOriginalValues.put("program_status", _programStatus);
		_columnOriginalValues.put("program_objectives", _programObjectives);
		_columnOriginalValues.put(
			"program_admission_requirements", _programAdmissionRequirements);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("program_master_id", "programMasterId");
		attributeNames.put("program_type_id", "programTypeId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("program_code", "programCode");
		attributeNames.put("program_name", "programName");
		attributeNames.put("program_description", "programDescription");
		attributeNames.put("establishment_date", "establishmentDate");
		attributeNames.put("program_vision", "programVision");
		attributeNames.put("program_mission", "programMission");
		attributeNames.put("program_status", "programStatus");
		attributeNames.put("program_objectives", "programObjectives");
		attributeNames.put(
			"program_admission_requirements", "programAdmissionRequirements");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("program_master_id", 2L);

		columnBitmasks.put("program_type_id", 4L);

		columnBitmasks.put("group_id", 8L);

		columnBitmasks.put("company_id", 16L);

		columnBitmasks.put("create_date", 32L);

		columnBitmasks.put("modified_date", 64L);

		columnBitmasks.put("program_code", 128L);

		columnBitmasks.put("program_name", 256L);

		columnBitmasks.put("program_description", 512L);

		columnBitmasks.put("establishment_date", 1024L);

		columnBitmasks.put("program_vision", 2048L);

		columnBitmasks.put("program_mission", 4096L);

		columnBitmasks.put("program_status", 8192L);

		columnBitmasks.put("program_objectives", 16384L);

		columnBitmasks.put("program_admission_requirements", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProgramMaster _escapedModel;

}