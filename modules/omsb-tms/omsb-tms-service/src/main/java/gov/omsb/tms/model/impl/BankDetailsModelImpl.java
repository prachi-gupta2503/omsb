/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.BankDetails;
import gov.omsb.tms.model.BankDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BankDetails service. Represents a row in the &quot;bank_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BankDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BankDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BankDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class BankDetailsModelImpl
	extends BaseModelImpl<BankDetails> implements BankDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bank details model instance should use the <code>BankDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "bank_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"bank_details_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"modified_date", Types.TIMESTAMP},
		{"ec_member_request_id", Types.BIGINT}, {"bank_name", Types.VARCHAR},
		{"account_number", Types.VARCHAR}, {"bank_branch", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bank_details_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ec_member_request_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bank_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("account_number", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bank_branch", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table bank_details (uuid_ VARCHAR(75) null,bank_details_id LONG not null primary key,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,ec_member_request_id LONG,bank_name STRING null,account_number STRING null,bank_branch STRING null)";

	public static final String TABLE_SQL_DROP = "drop table bank_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY bankDetails.bankDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY bank_details.bank_details_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ECMEMBERREQUESTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BANKDETAILSID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BankDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bankDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBankDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bankDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BankDetails.class;
	}

	@Override
	public String getModelClassName() {
		return BankDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BankDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BankDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BankDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BankDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BankDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BankDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BankDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BankDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BankDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BankDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BankDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BankDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<BankDetails, Object>>();
		Map<String, BiConsumer<BankDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<BankDetails, ?>>();

		attributeGetterFunctions.put("uuid", BankDetails::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<BankDetails, String>)BankDetails::setUuid);
		attributeGetterFunctions.put(
			"bankDetailsId", BankDetails::getBankDetailsId);
		attributeSetterBiConsumers.put(
			"bankDetailsId",
			(BiConsumer<BankDetails, Long>)BankDetails::setBankDetailsId);
		attributeGetterFunctions.put("groupId", BankDetails::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<BankDetails, Long>)BankDetails::setGroupId);
		attributeGetterFunctions.put("companyId", BankDetails::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<BankDetails, Long>)BankDetails::setCompanyId);
		attributeGetterFunctions.put("createDate", BankDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BankDetails, Date>)BankDetails::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", BankDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<BankDetails, Date>)BankDetails::setModifiedDate);
		attributeGetterFunctions.put(
			"ecMemberRequestId", BankDetails::getEcMemberRequestId);
		attributeSetterBiConsumers.put(
			"ecMemberRequestId",
			(BiConsumer<BankDetails, Long>)BankDetails::setEcMemberRequestId);
		attributeGetterFunctions.put("bankName", BankDetails::getBankName);
		attributeSetterBiConsumers.put(
			"bankName",
			(BiConsumer<BankDetails, String>)BankDetails::setBankName);
		attributeGetterFunctions.put(
			"accountNumber", BankDetails::getAccountNumber);
		attributeSetterBiConsumers.put(
			"accountNumber",
			(BiConsumer<BankDetails, String>)BankDetails::setAccountNumber);
		attributeGetterFunctions.put("bankBranch", BankDetails::getBankBranch);
		attributeSetterBiConsumers.put(
			"bankBranch",
			(BiConsumer<BankDetails, String>)BankDetails::setBankBranch);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getBankDetailsId() {
		return _bankDetailsId;
	}

	@Override
	public void setBankDetailsId(long bankDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankDetailsId = bankDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEcMemberRequestId() {
		return _ecMemberRequestId;
	}

	@Override
	public void setEcMemberRequestId(long ecMemberRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecMemberRequestId = ecMemberRequestId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEcMemberRequestId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ec_member_request_id"));
	}

	@JSON
	@Override
	public String getBankName() {
		if (_bankName == null) {
			return "";
		}
		else {
			return _bankName;
		}
	}

	@Override
	public String getBankName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBankName(languageId);
	}

	@Override
	public String getBankName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBankName(languageId, useDefault);
	}

	@Override
	public String getBankName(String languageId) {
		return LocalizationUtil.getLocalization(getBankName(), languageId);
	}

	@Override
	public String getBankName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getBankName(), languageId, useDefault);
	}

	@Override
	public String getBankNameCurrentLanguageId() {
		return _bankNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getBankNameCurrentValue() {
		Locale locale = getLocale(_bankNameCurrentLanguageId);

		return getBankName(locale);
	}

	@Override
	public Map<Locale, String> getBankNameMap() {
		return LocalizationUtil.getLocalizationMap(getBankName());
	}

	@Override
	public void setBankName(String bankName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankName = bankName;
	}

	@Override
	public void setBankName(String bankName, Locale locale) {
		setBankName(bankName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setBankName(
		String bankName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(bankName)) {
			setBankName(
				LocalizationUtil.updateLocalization(
					getBankName(), "BankName", bankName, languageId,
					defaultLanguageId));
		}
		else {
			setBankName(
				LocalizationUtil.removeLocalization(
					getBankName(), "BankName", languageId));
		}
	}

	@Override
	public void setBankNameCurrentLanguageId(String languageId) {
		_bankNameCurrentLanguageId = languageId;
	}

	@Override
	public void setBankNameMap(Map<Locale, String> bankNameMap) {
		setBankNameMap(bankNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setBankNameMap(
		Map<Locale, String> bankNameMap, Locale defaultLocale) {

		if (bankNameMap == null) {
			return;
		}

		setBankName(
			LocalizationUtil.updateLocalization(
				bankNameMap, getBankName(), "BankName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAccountNumber() {
		if (_accountNumber == null) {
			return "";
		}
		else {
			return _accountNumber;
		}
	}

	@Override
	public String getAccountNumber(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccountNumber(languageId);
	}

	@Override
	public String getAccountNumber(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccountNumber(languageId, useDefault);
	}

	@Override
	public String getAccountNumber(String languageId) {
		return LocalizationUtil.getLocalization(getAccountNumber(), languageId);
	}

	@Override
	public String getAccountNumber(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAccountNumber(), languageId, useDefault);
	}

	@Override
	public String getAccountNumberCurrentLanguageId() {
		return _accountNumberCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAccountNumberCurrentValue() {
		Locale locale = getLocale(_accountNumberCurrentLanguageId);

		return getAccountNumber(locale);
	}

	@Override
	public Map<Locale, String> getAccountNumberMap() {
		return LocalizationUtil.getLocalizationMap(getAccountNumber());
	}

	@Override
	public void setAccountNumber(String accountNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountNumber = accountNumber;
	}

	@Override
	public void setAccountNumber(String accountNumber, Locale locale) {
		setAccountNumber(accountNumber, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setAccountNumber(
		String accountNumber, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(accountNumber)) {
			setAccountNumber(
				LocalizationUtil.updateLocalization(
					getAccountNumber(), "AccountNumber", accountNumber,
					languageId, defaultLanguageId));
		}
		else {
			setAccountNumber(
				LocalizationUtil.removeLocalization(
					getAccountNumber(), "AccountNumber", languageId));
		}
	}

	@Override
	public void setAccountNumberCurrentLanguageId(String languageId) {
		_accountNumberCurrentLanguageId = languageId;
	}

	@Override
	public void setAccountNumberMap(Map<Locale, String> accountNumberMap) {
		setAccountNumberMap(accountNumberMap, LocaleUtil.getDefault());
	}

	@Override
	public void setAccountNumberMap(
		Map<Locale, String> accountNumberMap, Locale defaultLocale) {

		if (accountNumberMap == null) {
			return;
		}

		setAccountNumber(
			LocalizationUtil.updateLocalization(
				accountNumberMap, getAccountNumber(), "AccountNumber",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getBankBranch() {
		if (_bankBranch == null) {
			return "";
		}
		else {
			return _bankBranch;
		}
	}

	@Override
	public String getBankBranch(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBankBranch(languageId);
	}

	@Override
	public String getBankBranch(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBankBranch(languageId, useDefault);
	}

	@Override
	public String getBankBranch(String languageId) {
		return LocalizationUtil.getLocalization(getBankBranch(), languageId);
	}

	@Override
	public String getBankBranch(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getBankBranch(), languageId, useDefault);
	}

	@Override
	public String getBankBranchCurrentLanguageId() {
		return _bankBranchCurrentLanguageId;
	}

	@JSON
	@Override
	public String getBankBranchCurrentValue() {
		Locale locale = getLocale(_bankBranchCurrentLanguageId);

		return getBankBranch(locale);
	}

	@Override
	public Map<Locale, String> getBankBranchMap() {
		return LocalizationUtil.getLocalizationMap(getBankBranch());
	}

	@Override
	public void setBankBranch(String bankBranch) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankBranch = bankBranch;
	}

	@Override
	public void setBankBranch(String bankBranch, Locale locale) {
		setBankBranch(bankBranch, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setBankBranch(
		String bankBranch, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(bankBranch)) {
			setBankBranch(
				LocalizationUtil.updateLocalization(
					getBankBranch(), "BankBranch", bankBranch, languageId,
					defaultLanguageId));
		}
		else {
			setBankBranch(
				LocalizationUtil.removeLocalization(
					getBankBranch(), "BankBranch", languageId));
		}
	}

	@Override
	public void setBankBranchCurrentLanguageId(String languageId) {
		_bankBranchCurrentLanguageId = languageId;
	}

	@Override
	public void setBankBranchMap(Map<Locale, String> bankBranchMap) {
		setBankBranchMap(bankBranchMap, LocaleUtil.getDefault());
	}

	@Override
	public void setBankBranchMap(
		Map<Locale, String> bankBranchMap, Locale defaultLocale) {

		if (bankBranchMap == null) {
			return;
		}

		setBankBranch(
			LocalizationUtil.updateLocalization(
				bankBranchMap, getBankBranch(), "BankBranch",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(BankDetails.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BankDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> bankNameMap = getBankNameMap();

		for (Map.Entry<Locale, String> entry : bankNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> accountNumberMap = getAccountNumberMap();

		for (Map.Entry<Locale, String> entry : accountNumberMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> bankBranchMap = getBankBranchMap();

		for (Map.Entry<Locale, String> entry : bankBranchMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getBankName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			BankDetails.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String bankName = getBankName(defaultLocale);

		if (Validator.isNull(bankName)) {
			setBankName(getBankName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setBankName(
				getBankName(defaultLocale), defaultLocale, defaultLocale);
		}

		String accountNumber = getAccountNumber(defaultLocale);

		if (Validator.isNull(accountNumber)) {
			setAccountNumber(
				getAccountNumber(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAccountNumber(
				getAccountNumber(defaultLocale), defaultLocale, defaultLocale);
		}

		String bankBranch = getBankBranch(defaultLocale);

		if (Validator.isNull(bankBranch)) {
			setBankBranch(getBankBranch(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setBankBranch(
				getBankBranch(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public BankDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BankDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BankDetailsImpl bankDetailsImpl = new BankDetailsImpl();

		bankDetailsImpl.setUuid(getUuid());
		bankDetailsImpl.setBankDetailsId(getBankDetailsId());
		bankDetailsImpl.setGroupId(getGroupId());
		bankDetailsImpl.setCompanyId(getCompanyId());
		bankDetailsImpl.setCreateDate(getCreateDate());
		bankDetailsImpl.setModifiedDate(getModifiedDate());
		bankDetailsImpl.setEcMemberRequestId(getEcMemberRequestId());
		bankDetailsImpl.setBankName(getBankName());
		bankDetailsImpl.setAccountNumber(getAccountNumber());
		bankDetailsImpl.setBankBranch(getBankBranch());

		bankDetailsImpl.resetOriginalValues();

		return bankDetailsImpl;
	}

	@Override
	public BankDetails cloneWithOriginalValues() {
		BankDetailsImpl bankDetailsImpl = new BankDetailsImpl();

		bankDetailsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		bankDetailsImpl.setBankDetailsId(
			this.<Long>getColumnOriginalValue("bank_details_id"));
		bankDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		bankDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		bankDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		bankDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		bankDetailsImpl.setEcMemberRequestId(
			this.<Long>getColumnOriginalValue("ec_member_request_id"));
		bankDetailsImpl.setBankName(
			this.<String>getColumnOriginalValue("bank_name"));
		bankDetailsImpl.setAccountNumber(
			this.<String>getColumnOriginalValue("account_number"));
		bankDetailsImpl.setBankBranch(
			this.<String>getColumnOriginalValue("bank_branch"));

		return bankDetailsImpl;
	}

	@Override
	public int compareTo(BankDetails bankDetails) {
		long primaryKey = bankDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BankDetails)) {
			return false;
		}

		BankDetails bankDetails = (BankDetails)object;

		long primaryKey = bankDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BankDetails> toCacheModel() {
		BankDetailsCacheModel bankDetailsCacheModel =
			new BankDetailsCacheModel();

		bankDetailsCacheModel.uuid = getUuid();

		String uuid = bankDetailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bankDetailsCacheModel.uuid = null;
		}

		bankDetailsCacheModel.bankDetailsId = getBankDetailsId();

		bankDetailsCacheModel.groupId = getGroupId();

		bankDetailsCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			bankDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			bankDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bankDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bankDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bankDetailsCacheModel.ecMemberRequestId = getEcMemberRequestId();

		bankDetailsCacheModel.bankName = getBankName();

		String bankName = bankDetailsCacheModel.bankName;

		if ((bankName != null) && (bankName.length() == 0)) {
			bankDetailsCacheModel.bankName = null;
		}

		bankDetailsCacheModel.accountNumber = getAccountNumber();

		String accountNumber = bankDetailsCacheModel.accountNumber;

		if ((accountNumber != null) && (accountNumber.length() == 0)) {
			bankDetailsCacheModel.accountNumber = null;
		}

		bankDetailsCacheModel.bankBranch = getBankBranch();

		String bankBranch = bankDetailsCacheModel.bankBranch;

		if ((bankBranch != null) && (bankBranch.length() == 0)) {
			bankDetailsCacheModel.bankBranch = null;
		}

		return bankDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BankDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BankDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BankDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((BankDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BankDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BankDetails.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _bankDetailsId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _ecMemberRequestId;
	private String _bankName;
	private String _bankNameCurrentLanguageId;
	private String _accountNumber;
	private String _accountNumberCurrentLanguageId;
	private String _bankBranch;
	private String _bankBranchCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<BankDetails, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BankDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("bank_details_id", _bankDetailsId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("ec_member_request_id", _ecMemberRequestId);
		_columnOriginalValues.put("bank_name", _bankName);
		_columnOriginalValues.put("account_number", _accountNumber);
		_columnOriginalValues.put("bank_branch", _bankBranch);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("bank_details_id", "bankDetailsId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("ec_member_request_id", "ecMemberRequestId");
		attributeNames.put("bank_name", "bankName");
		attributeNames.put("account_number", "accountNumber");
		attributeNames.put("bank_branch", "bankBranch");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("bank_details_id", 2L);

		columnBitmasks.put("group_id", 4L);

		columnBitmasks.put("company_id", 8L);

		columnBitmasks.put("create_date", 16L);

		columnBitmasks.put("modified_date", 32L);

		columnBitmasks.put("ec_member_request_id", 64L);

		columnBitmasks.put("bank_name", 128L);

		columnBitmasks.put("account_number", 256L);

		columnBitmasks.put("bank_branch", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BankDetails _escapedModel;

}