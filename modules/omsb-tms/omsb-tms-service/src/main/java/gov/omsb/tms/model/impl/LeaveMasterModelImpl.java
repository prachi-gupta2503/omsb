/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import gov.omsb.tms.model.LeaveMaster;
import gov.omsb.tms.model.LeaveMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LeaveMaster service. Represents a row in the &quot;leave_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LeaveMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LeaveMasterImpl
 * @generated
 */
@JSON(strict = true)
public class LeaveMasterModelImpl
	extends BaseModelImpl<LeaveMaster> implements LeaveMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave master model instance should use the <code>LeaveMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "leave_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"leave_master_id", Types.BIGINT},
		{"trainee_id", Types.BIGINT}, {"leave_type_id", Types.BIGINT},
		{"leave_trainee_id", Types.BIGINT}, {"block_name", Types.VARCHAR},
		{"leave_from", Types.TIMESTAMP}, {"leave_to", Types.TIMESTAMP},
		{"no_of_days", Types.INTEGER}, {"contact_name", Types.VARCHAR},
		{"contact_email", Types.VARCHAR}, {"contact_no", Types.VARCHAR},
		{"reason_for_leave", Types.VARCHAR},
		{"application_date", Types.TIMESTAMP},
		{"return_from_leave", Types.TIMESTAMP},
		{"reason_for_delay", Types.VARCHAR}, {"program_id", Types.BIGINT},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"created_by", Types.BIGINT},
		{"modified_date", Types.TIMESTAMP}, {"modified_by", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leave_master_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trainee_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leave_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leave_trainee_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("block_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leave_from", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("leave_to", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("no_of_days", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("contact_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contact_email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contact_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reason_for_leave", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("application_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("return_from_leave", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("reason_for_delay", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_by", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table leave_master (uuid_ VARCHAR(75) null,leave_master_id LONG not null primary key,trainee_id LONG,leave_type_id LONG,leave_trainee_id LONG,block_name STRING null,leave_from DATE null,leave_to DATE null,no_of_days INTEGER,contact_name STRING null,contact_email VARCHAR(75) null,contact_no VARCHAR(75) null,reason_for_leave STRING null,application_date DATE null,return_from_leave DATE null,reason_for_delay STRING null,program_id LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,group_id LONG,company_id LONG,create_date DATE null,created_by LONG,modified_date DATE null,modified_by LONG)";

	public static final String TABLE_SQL_DROP = "drop table leave_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY leaveMaster.leaveMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY leave_master.leave_master_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAINEEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LEAVEMASTERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LeaveMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveMaster.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LeaveMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LeaveMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LeaveMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LeaveMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LeaveMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LeaveMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LeaveMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LeaveMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<LeaveMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LeaveMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LeaveMaster, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LeaveMaster, Object>>();
		Map<String, BiConsumer<LeaveMaster, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LeaveMaster, ?>>();

		attributeGetterFunctions.put("uuid", LeaveMaster::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<LeaveMaster, String>)LeaveMaster::setUuid);
		attributeGetterFunctions.put(
			"leaveMasterId", LeaveMaster::getLeaveMasterId);
		attributeSetterBiConsumers.put(
			"leaveMasterId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setLeaveMasterId);
		attributeGetterFunctions.put("traineeId", LeaveMaster::getTraineeId);
		attributeSetterBiConsumers.put(
			"traineeId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setTraineeId);
		attributeGetterFunctions.put(
			"leaveTypeId", LeaveMaster::getLeaveTypeId);
		attributeSetterBiConsumers.put(
			"leaveTypeId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setLeaveTypeId);
		attributeGetterFunctions.put(
			"leaveTraineeId", LeaveMaster::getLeaveTraineeId);
		attributeSetterBiConsumers.put(
			"leaveTraineeId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setLeaveTraineeId);
		attributeGetterFunctions.put("blockName", LeaveMaster::getBlockName);
		attributeSetterBiConsumers.put(
			"blockName",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setBlockName);
		attributeGetterFunctions.put("leaveFrom", LeaveMaster::getLeaveFrom);
		attributeSetterBiConsumers.put(
			"leaveFrom",
			(BiConsumer<LeaveMaster, Date>)LeaveMaster::setLeaveFrom);
		attributeGetterFunctions.put("leaveTo", LeaveMaster::getLeaveTo);
		attributeSetterBiConsumers.put(
			"leaveTo", (BiConsumer<LeaveMaster, Date>)LeaveMaster::setLeaveTo);
		attributeGetterFunctions.put("noOfDays", LeaveMaster::getNoOfDays);
		attributeSetterBiConsumers.put(
			"noOfDays",
			(BiConsumer<LeaveMaster, Integer>)LeaveMaster::setNoOfDays);
		attributeGetterFunctions.put(
			"contactName", LeaveMaster::getContactName);
		attributeSetterBiConsumers.put(
			"contactName",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setContactName);
		attributeGetterFunctions.put(
			"contactEmail", LeaveMaster::getContactEmail);
		attributeSetterBiConsumers.put(
			"contactEmail",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setContactEmail);
		attributeGetterFunctions.put("contactNo", LeaveMaster::getContactNo);
		attributeSetterBiConsumers.put(
			"contactNo",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setContactNo);
		attributeGetterFunctions.put(
			"reasonForLeave", LeaveMaster::getReasonForLeave);
		attributeSetterBiConsumers.put(
			"reasonForLeave",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setReasonForLeave);
		attributeGetterFunctions.put(
			"applicationDate", LeaveMaster::getApplicationDate);
		attributeSetterBiConsumers.put(
			"applicationDate",
			(BiConsumer<LeaveMaster, Date>)LeaveMaster::setApplicationDate);
		attributeGetterFunctions.put(
			"returnFromLeave", LeaveMaster::getReturnFromLeave);
		attributeSetterBiConsumers.put(
			"returnFromLeave",
			(BiConsumer<LeaveMaster, Date>)LeaveMaster::setReturnFromLeave);
		attributeGetterFunctions.put(
			"reasonForDelay", LeaveMaster::getReasonForDelay);
		attributeSetterBiConsumers.put(
			"reasonForDelay",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setReasonForDelay);
		attributeGetterFunctions.put("programId", LeaveMaster::getProgramId);
		attributeSetterBiConsumers.put(
			"programId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setProgramId);
		attributeGetterFunctions.put("status", LeaveMaster::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<LeaveMaster, Integer>)LeaveMaster::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", LeaveMaster::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", LeaveMaster::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<LeaveMaster, String>)LeaveMaster::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", LeaveMaster::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<LeaveMaster, Date>)LeaveMaster::setStatusDate);
		attributeGetterFunctions.put("groupId", LeaveMaster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<LeaveMaster, Long>)LeaveMaster::setGroupId);
		attributeGetterFunctions.put("companyId", LeaveMaster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setCompanyId);
		attributeGetterFunctions.put("createDate", LeaveMaster::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LeaveMaster, Date>)LeaveMaster::setCreateDate);
		attributeGetterFunctions.put("createdBy", LeaveMaster::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", LeaveMaster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LeaveMaster, Date>)LeaveMaster::setModifiedDate);
		attributeGetterFunctions.put("modifiedBy", LeaveMaster::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<LeaveMaster, Long>)LeaveMaster::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLeaveMasterId() {
		return _leaveMasterId;
	}

	@Override
	public void setLeaveMasterId(long leaveMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveMasterId = leaveMasterId;
	}

	@JSON
	@Override
	public long getTraineeId() {
		return _traineeId;
	}

	@Override
	public void setTraineeId(long traineeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_traineeId = traineeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTraineeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("trainee_id"));
	}

	@JSON
	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveTypeId = leaveTypeId;
	}

	@JSON
	@Override
	public long getLeaveTraineeId() {
		return _leaveTraineeId;
	}

	@Override
	public void setLeaveTraineeId(long leaveTraineeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveTraineeId = leaveTraineeId;
	}

	@JSON
	@Override
	public String getBlockName() {
		if (_blockName == null) {
			return "";
		}
		else {
			return _blockName;
		}
	}

	@Override
	public String getBlockName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBlockName(languageId);
	}

	@Override
	public String getBlockName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBlockName(languageId, useDefault);
	}

	@Override
	public String getBlockName(String languageId) {
		return LocalizationUtil.getLocalization(getBlockName(), languageId);
	}

	@Override
	public String getBlockName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getBlockName(), languageId, useDefault);
	}

	@Override
	public String getBlockNameCurrentLanguageId() {
		return _blockNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getBlockNameCurrentValue() {
		Locale locale = getLocale(_blockNameCurrentLanguageId);

		return getBlockName(locale);
	}

	@Override
	public Map<Locale, String> getBlockNameMap() {
		return LocalizationUtil.getLocalizationMap(getBlockName());
	}

	@Override
	public void setBlockName(String blockName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_blockName = blockName;
	}

	@Override
	public void setBlockName(String blockName, Locale locale) {
		setBlockName(blockName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setBlockName(
		String blockName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(blockName)) {
			setBlockName(
				LocalizationUtil.updateLocalization(
					getBlockName(), "BlockName", blockName, languageId,
					defaultLanguageId));
		}
		else {
			setBlockName(
				LocalizationUtil.removeLocalization(
					getBlockName(), "BlockName", languageId));
		}
	}

	@Override
	public void setBlockNameCurrentLanguageId(String languageId) {
		_blockNameCurrentLanguageId = languageId;
	}

	@Override
	public void setBlockNameMap(Map<Locale, String> blockNameMap) {
		setBlockNameMap(blockNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setBlockNameMap(
		Map<Locale, String> blockNameMap, Locale defaultLocale) {

		if (blockNameMap == null) {
			return;
		}

		setBlockName(
			LocalizationUtil.updateLocalization(
				blockNameMap, getBlockName(), "BlockName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getLeaveFrom() {
		return _leaveFrom;
	}

	@Override
	public void setLeaveFrom(Date leaveFrom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveFrom = leaveFrom;
	}

	@JSON
	@Override
	public Date getLeaveTo() {
		return _leaveTo;
	}

	@Override
	public void setLeaveTo(Date leaveTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveTo = leaveTo;
	}

	@JSON
	@Override
	public int getNoOfDays() {
		return _noOfDays;
	}

	@Override
	public void setNoOfDays(int noOfDays) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfDays = noOfDays;
	}

	@JSON
	@Override
	public String getContactName() {
		if (_contactName == null) {
			return "";
		}
		else {
			return _contactName;
		}
	}

	@Override
	public String getContactName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContactName(languageId);
	}

	@Override
	public String getContactName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContactName(languageId, useDefault);
	}

	@Override
	public String getContactName(String languageId) {
		return LocalizationUtil.getLocalization(getContactName(), languageId);
	}

	@Override
	public String getContactName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getContactName(), languageId, useDefault);
	}

	@Override
	public String getContactNameCurrentLanguageId() {
		return _contactNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContactNameCurrentValue() {
		Locale locale = getLocale(_contactNameCurrentLanguageId);

		return getContactName(locale);
	}

	@Override
	public Map<Locale, String> getContactNameMap() {
		return LocalizationUtil.getLocalizationMap(getContactName());
	}

	@Override
	public void setContactName(String contactName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactName = contactName;
	}

	@Override
	public void setContactName(String contactName, Locale locale) {
		setContactName(contactName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setContactName(
		String contactName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(contactName)) {
			setContactName(
				LocalizationUtil.updateLocalization(
					getContactName(), "ContactName", contactName, languageId,
					defaultLanguageId));
		}
		else {
			setContactName(
				LocalizationUtil.removeLocalization(
					getContactName(), "ContactName", languageId));
		}
	}

	@Override
	public void setContactNameCurrentLanguageId(String languageId) {
		_contactNameCurrentLanguageId = languageId;
	}

	@Override
	public void setContactNameMap(Map<Locale, String> contactNameMap) {
		setContactNameMap(contactNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setContactNameMap(
		Map<Locale, String> contactNameMap, Locale defaultLocale) {

		if (contactNameMap == null) {
			return;
		}

		setContactName(
			LocalizationUtil.updateLocalization(
				contactNameMap, getContactName(), "ContactName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getContactEmail() {
		if (_contactEmail == null) {
			return "";
		}
		else {
			return _contactEmail;
		}
	}

	@Override
	public void setContactEmail(String contactEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactEmail = contactEmail;
	}

	@JSON
	@Override
	public String getContactNo() {
		if (_contactNo == null) {
			return "";
		}
		else {
			return _contactNo;
		}
	}

	@Override
	public void setContactNo(String contactNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNo = contactNo;
	}

	@JSON
	@Override
	public String getReasonForLeave() {
		if (_reasonForLeave == null) {
			return "";
		}
		else {
			return _reasonForLeave;
		}
	}

	@Override
	public String getReasonForLeave(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getReasonForLeave(languageId);
	}

	@Override
	public String getReasonForLeave(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getReasonForLeave(languageId, useDefault);
	}

	@Override
	public String getReasonForLeave(String languageId) {
		return LocalizationUtil.getLocalization(
			getReasonForLeave(), languageId);
	}

	@Override
	public String getReasonForLeave(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getReasonForLeave(), languageId, useDefault);
	}

	@Override
	public String getReasonForLeaveCurrentLanguageId() {
		return _reasonForLeaveCurrentLanguageId;
	}

	@JSON
	@Override
	public String getReasonForLeaveCurrentValue() {
		Locale locale = getLocale(_reasonForLeaveCurrentLanguageId);

		return getReasonForLeave(locale);
	}

	@Override
	public Map<Locale, String> getReasonForLeaveMap() {
		return LocalizationUtil.getLocalizationMap(getReasonForLeave());
	}

	@Override
	public void setReasonForLeave(String reasonForLeave) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForLeave = reasonForLeave;
	}

	@Override
	public void setReasonForLeave(String reasonForLeave, Locale locale) {
		setReasonForLeave(reasonForLeave, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setReasonForLeave(
		String reasonForLeave, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(reasonForLeave)) {
			setReasonForLeave(
				LocalizationUtil.updateLocalization(
					getReasonForLeave(), "ReasonForLeave", reasonForLeave,
					languageId, defaultLanguageId));
		}
		else {
			setReasonForLeave(
				LocalizationUtil.removeLocalization(
					getReasonForLeave(), "ReasonForLeave", languageId));
		}
	}

	@Override
	public void setReasonForLeaveCurrentLanguageId(String languageId) {
		_reasonForLeaveCurrentLanguageId = languageId;
	}

	@Override
	public void setReasonForLeaveMap(Map<Locale, String> reasonForLeaveMap) {
		setReasonForLeaveMap(reasonForLeaveMap, LocaleUtil.getDefault());
	}

	@Override
	public void setReasonForLeaveMap(
		Map<Locale, String> reasonForLeaveMap, Locale defaultLocale) {

		if (reasonForLeaveMap == null) {
			return;
		}

		setReasonForLeave(
			LocalizationUtil.updateLocalization(
				reasonForLeaveMap, getReasonForLeave(), "ReasonForLeave",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getApplicationDate() {
		return _applicationDate;
	}

	@Override
	public void setApplicationDate(Date applicationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationDate = applicationDate;
	}

	@JSON
	@Override
	public Date getReturnFromLeave() {
		return _returnFromLeave;
	}

	@Override
	public void setReturnFromLeave(Date returnFromLeave) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_returnFromLeave = returnFromLeave;
	}

	@JSON
	@Override
	public String getReasonForDelay() {
		if (_reasonForDelay == null) {
			return "";
		}
		else {
			return _reasonForDelay;
		}
	}

	@Override
	public String getReasonForDelay(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getReasonForDelay(languageId);
	}

	@Override
	public String getReasonForDelay(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getReasonForDelay(languageId, useDefault);
	}

	@Override
	public String getReasonForDelay(String languageId) {
		return LocalizationUtil.getLocalization(
			getReasonForDelay(), languageId);
	}

	@Override
	public String getReasonForDelay(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getReasonForDelay(), languageId, useDefault);
	}

	@Override
	public String getReasonForDelayCurrentLanguageId() {
		return _reasonForDelayCurrentLanguageId;
	}

	@JSON
	@Override
	public String getReasonForDelayCurrentValue() {
		Locale locale = getLocale(_reasonForDelayCurrentLanguageId);

		return getReasonForDelay(locale);
	}

	@Override
	public Map<Locale, String> getReasonForDelayMap() {
		return LocalizationUtil.getLocalizationMap(getReasonForDelay());
	}

	@Override
	public void setReasonForDelay(String reasonForDelay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForDelay = reasonForDelay;
	}

	@Override
	public void setReasonForDelay(String reasonForDelay, Locale locale) {
		setReasonForDelay(reasonForDelay, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setReasonForDelay(
		String reasonForDelay, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(reasonForDelay)) {
			setReasonForDelay(
				LocalizationUtil.updateLocalization(
					getReasonForDelay(), "ReasonForDelay", reasonForDelay,
					languageId, defaultLanguageId));
		}
		else {
			setReasonForDelay(
				LocalizationUtil.removeLocalization(
					getReasonForDelay(), "ReasonForDelay", languageId));
		}
	}

	@Override
	public void setReasonForDelayCurrentLanguageId(String languageId) {
		_reasonForDelayCurrentLanguageId = languageId;
	}

	@Override
	public void setReasonForDelayMap(Map<Locale, String> reasonForDelayMap) {
		setReasonForDelayMap(reasonForDelayMap, LocaleUtil.getDefault());
	}

	@Override
	public void setReasonForDelayMap(
		Map<Locale, String> reasonForDelayMap, Locale defaultLocale) {

		if (reasonForDelayMap == null) {
			return;
		}

		setReasonForDelay(
			LocalizationUtil.updateLocalization(
				reasonForDelayMap, getReasonForDelay(), "ReasonForDelay",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getProgramId() {
		return _programId;
	}

	@Override
	public void setProgramId(long programId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programId = programId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LeaveMaster.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LeaveMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> blockNameMap = getBlockNameMap();

		for (Map.Entry<Locale, String> entry : blockNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contactNameMap = getContactNameMap();

		for (Map.Entry<Locale, String> entry : contactNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> reasonForLeaveMap = getReasonForLeaveMap();

		for (Map.Entry<Locale, String> entry : reasonForLeaveMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> reasonForDelayMap = getReasonForDelayMap();

		for (Map.Entry<Locale, String> entry : reasonForDelayMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getBlockName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			LeaveMaster.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String blockName = getBlockName(defaultLocale);

		if (Validator.isNull(blockName)) {
			setBlockName(getBlockName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setBlockName(
				getBlockName(defaultLocale), defaultLocale, defaultLocale);
		}

		String contactName = getContactName(defaultLocale);

		if (Validator.isNull(contactName)) {
			setContactName(
				getContactName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContactName(
				getContactName(defaultLocale), defaultLocale, defaultLocale);
		}

		String reasonForLeave = getReasonForLeave(defaultLocale);

		if (Validator.isNull(reasonForLeave)) {
			setReasonForLeave(
				getReasonForLeave(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setReasonForLeave(
				getReasonForLeave(defaultLocale), defaultLocale, defaultLocale);
		}

		String reasonForDelay = getReasonForDelay(defaultLocale);

		if (Validator.isNull(reasonForDelay)) {
			setReasonForDelay(
				getReasonForDelay(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setReasonForDelay(
				getReasonForDelay(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public LeaveMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LeaveMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveMasterImpl leaveMasterImpl = new LeaveMasterImpl();

		leaveMasterImpl.setUuid(getUuid());
		leaveMasterImpl.setLeaveMasterId(getLeaveMasterId());
		leaveMasterImpl.setTraineeId(getTraineeId());
		leaveMasterImpl.setLeaveTypeId(getLeaveTypeId());
		leaveMasterImpl.setLeaveTraineeId(getLeaveTraineeId());
		leaveMasterImpl.setBlockName(getBlockName());
		leaveMasterImpl.setLeaveFrom(getLeaveFrom());
		leaveMasterImpl.setLeaveTo(getLeaveTo());
		leaveMasterImpl.setNoOfDays(getNoOfDays());
		leaveMasterImpl.setContactName(getContactName());
		leaveMasterImpl.setContactEmail(getContactEmail());
		leaveMasterImpl.setContactNo(getContactNo());
		leaveMasterImpl.setReasonForLeave(getReasonForLeave());
		leaveMasterImpl.setApplicationDate(getApplicationDate());
		leaveMasterImpl.setReturnFromLeave(getReturnFromLeave());
		leaveMasterImpl.setReasonForDelay(getReasonForDelay());
		leaveMasterImpl.setProgramId(getProgramId());
		leaveMasterImpl.setStatus(getStatus());
		leaveMasterImpl.setStatusByUserId(getStatusByUserId());
		leaveMasterImpl.setStatusByUserName(getStatusByUserName());
		leaveMasterImpl.setStatusDate(getStatusDate());
		leaveMasterImpl.setGroupId(getGroupId());
		leaveMasterImpl.setCompanyId(getCompanyId());
		leaveMasterImpl.setCreateDate(getCreateDate());
		leaveMasterImpl.setCreatedBy(getCreatedBy());
		leaveMasterImpl.setModifiedDate(getModifiedDate());
		leaveMasterImpl.setModifiedBy(getModifiedBy());

		leaveMasterImpl.resetOriginalValues();

		return leaveMasterImpl;
	}

	@Override
	public LeaveMaster cloneWithOriginalValues() {
		LeaveMasterImpl leaveMasterImpl = new LeaveMasterImpl();

		leaveMasterImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		leaveMasterImpl.setLeaveMasterId(
			this.<Long>getColumnOriginalValue("leave_master_id"));
		leaveMasterImpl.setTraineeId(
			this.<Long>getColumnOriginalValue("trainee_id"));
		leaveMasterImpl.setLeaveTypeId(
			this.<Long>getColumnOriginalValue("leave_type_id"));
		leaveMasterImpl.setLeaveTraineeId(
			this.<Long>getColumnOriginalValue("leave_trainee_id"));
		leaveMasterImpl.setBlockName(
			this.<String>getColumnOriginalValue("block_name"));
		leaveMasterImpl.setLeaveFrom(
			this.<Date>getColumnOriginalValue("leave_from"));
		leaveMasterImpl.setLeaveTo(
			this.<Date>getColumnOriginalValue("leave_to"));
		leaveMasterImpl.setNoOfDays(
			this.<Integer>getColumnOriginalValue("no_of_days"));
		leaveMasterImpl.setContactName(
			this.<String>getColumnOriginalValue("contact_name"));
		leaveMasterImpl.setContactEmail(
			this.<String>getColumnOriginalValue("contact_email"));
		leaveMasterImpl.setContactNo(
			this.<String>getColumnOriginalValue("contact_no"));
		leaveMasterImpl.setReasonForLeave(
			this.<String>getColumnOriginalValue("reason_for_leave"));
		leaveMasterImpl.setApplicationDate(
			this.<Date>getColumnOriginalValue("application_date"));
		leaveMasterImpl.setReturnFromLeave(
			this.<Date>getColumnOriginalValue("return_from_leave"));
		leaveMasterImpl.setReasonForDelay(
			this.<String>getColumnOriginalValue("reason_for_delay"));
		leaveMasterImpl.setProgramId(
			this.<Long>getColumnOriginalValue("program_id"));
		leaveMasterImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		leaveMasterImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		leaveMasterImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		leaveMasterImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		leaveMasterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		leaveMasterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		leaveMasterImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		leaveMasterImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("created_by"));
		leaveMasterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		leaveMasterImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modified_by"));

		return leaveMasterImpl;
	}

	@Override
	public int compareTo(LeaveMaster leaveMaster) {
		long primaryKey = leaveMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LeaveMaster)) {
			return false;
		}

		LeaveMaster leaveMaster = (LeaveMaster)object;

		long primaryKey = leaveMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveMaster> toCacheModel() {
		LeaveMasterCacheModel leaveMasterCacheModel =
			new LeaveMasterCacheModel();

		leaveMasterCacheModel.uuid = getUuid();

		String uuid = leaveMasterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			leaveMasterCacheModel.uuid = null;
		}

		leaveMasterCacheModel.leaveMasterId = getLeaveMasterId();

		leaveMasterCacheModel.traineeId = getTraineeId();

		leaveMasterCacheModel.leaveTypeId = getLeaveTypeId();

		leaveMasterCacheModel.leaveTraineeId = getLeaveTraineeId();

		leaveMasterCacheModel.blockName = getBlockName();

		String blockName = leaveMasterCacheModel.blockName;

		if ((blockName != null) && (blockName.length() == 0)) {
			leaveMasterCacheModel.blockName = null;
		}

		Date leaveFrom = getLeaveFrom();

		if (leaveFrom != null) {
			leaveMasterCacheModel.leaveFrom = leaveFrom.getTime();
		}
		else {
			leaveMasterCacheModel.leaveFrom = Long.MIN_VALUE;
		}

		Date leaveTo = getLeaveTo();

		if (leaveTo != null) {
			leaveMasterCacheModel.leaveTo = leaveTo.getTime();
		}
		else {
			leaveMasterCacheModel.leaveTo = Long.MIN_VALUE;
		}

		leaveMasterCacheModel.noOfDays = getNoOfDays();

		leaveMasterCacheModel.contactName = getContactName();

		String contactName = leaveMasterCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			leaveMasterCacheModel.contactName = null;
		}

		leaveMasterCacheModel.contactEmail = getContactEmail();

		String contactEmail = leaveMasterCacheModel.contactEmail;

		if ((contactEmail != null) && (contactEmail.length() == 0)) {
			leaveMasterCacheModel.contactEmail = null;
		}

		leaveMasterCacheModel.contactNo = getContactNo();

		String contactNo = leaveMasterCacheModel.contactNo;

		if ((contactNo != null) && (contactNo.length() == 0)) {
			leaveMasterCacheModel.contactNo = null;
		}

		leaveMasterCacheModel.reasonForLeave = getReasonForLeave();

		String reasonForLeave = leaveMasterCacheModel.reasonForLeave;

		if ((reasonForLeave != null) && (reasonForLeave.length() == 0)) {
			leaveMasterCacheModel.reasonForLeave = null;
		}

		Date applicationDate = getApplicationDate();

		if (applicationDate != null) {
			leaveMasterCacheModel.applicationDate = applicationDate.getTime();
		}
		else {
			leaveMasterCacheModel.applicationDate = Long.MIN_VALUE;
		}

		Date returnFromLeave = getReturnFromLeave();

		if (returnFromLeave != null) {
			leaveMasterCacheModel.returnFromLeave = returnFromLeave.getTime();
		}
		else {
			leaveMasterCacheModel.returnFromLeave = Long.MIN_VALUE;
		}

		leaveMasterCacheModel.reasonForDelay = getReasonForDelay();

		String reasonForDelay = leaveMasterCacheModel.reasonForDelay;

		if ((reasonForDelay != null) && (reasonForDelay.length() == 0)) {
			leaveMasterCacheModel.reasonForDelay = null;
		}

		leaveMasterCacheModel.programId = getProgramId();

		leaveMasterCacheModel.status = getStatus();

		leaveMasterCacheModel.statusByUserId = getStatusByUserId();

		leaveMasterCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = leaveMasterCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			leaveMasterCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			leaveMasterCacheModel.statusDate = statusDate.getTime();
		}
		else {
			leaveMasterCacheModel.statusDate = Long.MIN_VALUE;
		}

		leaveMasterCacheModel.groupId = getGroupId();

		leaveMasterCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		leaveMasterCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveMasterCacheModel.modifiedBy = getModifiedBy();

		return leaveMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LeaveMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LeaveMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((LeaveMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LeaveMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					LeaveMaster.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _leaveMasterId;
	private long _traineeId;
	private long _leaveTypeId;
	private long _leaveTraineeId;
	private String _blockName;
	private String _blockNameCurrentLanguageId;
	private Date _leaveFrom;
	private Date _leaveTo;
	private int _noOfDays;
	private String _contactName;
	private String _contactNameCurrentLanguageId;
	private String _contactEmail;
	private String _contactNo;
	private String _reasonForLeave;
	private String _reasonForLeaveCurrentLanguageId;
	private Date _applicationDate;
	private Date _returnFromLeave;
	private String _reasonForDelay;
	private String _reasonForDelayCurrentLanguageId;
	private long _programId;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<LeaveMaster, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LeaveMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("leave_master_id", _leaveMasterId);
		_columnOriginalValues.put("trainee_id", _traineeId);
		_columnOriginalValues.put("leave_type_id", _leaveTypeId);
		_columnOriginalValues.put("leave_trainee_id", _leaveTraineeId);
		_columnOriginalValues.put("block_name", _blockName);
		_columnOriginalValues.put("leave_from", _leaveFrom);
		_columnOriginalValues.put("leave_to", _leaveTo);
		_columnOriginalValues.put("no_of_days", _noOfDays);
		_columnOriginalValues.put("contact_name", _contactName);
		_columnOriginalValues.put("contact_email", _contactEmail);
		_columnOriginalValues.put("contact_no", _contactNo);
		_columnOriginalValues.put("reason_for_leave", _reasonForLeave);
		_columnOriginalValues.put("application_date", _applicationDate);
		_columnOriginalValues.put("return_from_leave", _returnFromLeave);
		_columnOriginalValues.put("reason_for_delay", _reasonForDelay);
		_columnOriginalValues.put("program_id", _programId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("created_by", _createdBy);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("modified_by", _modifiedBy);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("leave_master_id", "leaveMasterId");
		attributeNames.put("trainee_id", "traineeId");
		attributeNames.put("leave_type_id", "leaveTypeId");
		attributeNames.put("leave_trainee_id", "leaveTraineeId");
		attributeNames.put("block_name", "blockName");
		attributeNames.put("leave_from", "leaveFrom");
		attributeNames.put("leave_to", "leaveTo");
		attributeNames.put("no_of_days", "noOfDays");
		attributeNames.put("contact_name", "contactName");
		attributeNames.put("contact_email", "contactEmail");
		attributeNames.put("contact_no", "contactNo");
		attributeNames.put("reason_for_leave", "reasonForLeave");
		attributeNames.put("application_date", "applicationDate");
		attributeNames.put("return_from_leave", "returnFromLeave");
		attributeNames.put("reason_for_delay", "reasonForDelay");
		attributeNames.put("program_id", "programId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("created_by", "createdBy");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("modified_by", "modifiedBy");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("leave_master_id", 2L);

		columnBitmasks.put("trainee_id", 4L);

		columnBitmasks.put("leave_type_id", 8L);

		columnBitmasks.put("leave_trainee_id", 16L);

		columnBitmasks.put("block_name", 32L);

		columnBitmasks.put("leave_from", 64L);

		columnBitmasks.put("leave_to", 128L);

		columnBitmasks.put("no_of_days", 256L);

		columnBitmasks.put("contact_name", 512L);

		columnBitmasks.put("contact_email", 1024L);

		columnBitmasks.put("contact_no", 2048L);

		columnBitmasks.put("reason_for_leave", 4096L);

		columnBitmasks.put("application_date", 8192L);

		columnBitmasks.put("return_from_leave", 16384L);

		columnBitmasks.put("reason_for_delay", 32768L);

		columnBitmasks.put("program_id", 65536L);

		columnBitmasks.put("status", 131072L);

		columnBitmasks.put("statusByUserId", 262144L);

		columnBitmasks.put("statusByUserName", 524288L);

		columnBitmasks.put("statusDate", 1048576L);

		columnBitmasks.put("group_id", 2097152L);

		columnBitmasks.put("company_id", 4194304L);

		columnBitmasks.put("create_date", 8388608L);

		columnBitmasks.put("created_by", 16777216L);

		columnBitmasks.put("modified_date", 33554432L);

		columnBitmasks.put("modified_by", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LeaveMaster _escapedModel;

}