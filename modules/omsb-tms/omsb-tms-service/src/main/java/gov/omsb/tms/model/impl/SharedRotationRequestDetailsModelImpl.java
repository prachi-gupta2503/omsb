/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.SharedRotationRequestDetails;
import gov.omsb.tms.model.SharedRotationRequestDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SharedRotationRequestDetails service. Represents a row in the &quot;shared_rotation_request_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SharedRotationRequestDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SharedRotationRequestDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SharedRotationRequestDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class SharedRotationRequestDetailsModelImpl
	extends BaseModelImpl<SharedRotationRequestDetails>
	implements SharedRotationRequestDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shared rotation request details model instance should use the <code>SharedRotationRequestDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "shared_rotation_request_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR},
		{"shared_rotation_request_details_id", Types.BIGINT},
		{"program_duration_id", Types.BIGINT}, {"rotation_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"create_date", Types.TIMESTAMP}, {"created_by", Types.BIGINT},
		{"modified_date", Types.TIMESTAMP}, {"modified_by", Types.BIGINT},
		{"no_of_trainees_requested", Types.BIGINT},
		{"requester_comment", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"approved_count", Types.BIGINT}, {"rejected_count", Types.BIGINT},
		{"request_raised_to", Types.VARCHAR},
		{"request_raised_by", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put(
			"shared_rotation_request_details_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("program_duration_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rotation_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("no_of_trainees_requested", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requester_comment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approved_count", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rejected_count", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("request_raised_to", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("request_raised_by", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table shared_rotation_request_details (uuid_ VARCHAR(75) null,shared_rotation_request_details_id LONG not null primary key,program_duration_id LONG,rotation_id LONG,group_id LONG,company_id LONG,create_date DATE null,created_by LONG,modified_date DATE null,modified_by LONG,no_of_trainees_requested LONG,requester_comment STRING null,status VARCHAR(75) null,approved_count LONG,rejected_count LONG,request_raised_to VARCHAR(75) null,request_raised_by VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table shared_rotation_request_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sharedRotationRequestDetails.sharedRotationRequestDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY shared_rotation_request_details.shared_rotation_request_details_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUESTRAISEDBY_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SHAREDROTATIONREQUESTDETAILSID_COLUMN_BITMASK =
		16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SharedRotationRequestDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sharedRotationRequestDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSharedRotationRequestDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sharedRotationRequestDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SharedRotationRequestDetails.class;
	}

	@Override
	public String getModelClassName() {
		return SharedRotationRequestDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SharedRotationRequestDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SharedRotationRequestDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SharedRotationRequestDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SharedRotationRequestDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SharedRotationRequestDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SharedRotationRequestDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SharedRotationRequestDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SharedRotationRequestDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SharedRotationRequestDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<SharedRotationRequestDetails, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<SharedRotationRequestDetails, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<SharedRotationRequestDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<SharedRotationRequestDetails, Object>>();
		Map<String, BiConsumer<SharedRotationRequestDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<SharedRotationRequestDetails, ?>>();

		attributeGetterFunctions.put(
			"uuid", SharedRotationRequestDetails::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<SharedRotationRequestDetails, String>)
				SharedRotationRequestDetails::setUuid);
		attributeGetterFunctions.put(
			"sharedRotationRequestDetailsId",
			SharedRotationRequestDetails::getSharedRotationRequestDetailsId);
		attributeSetterBiConsumers.put(
			"sharedRotationRequestDetailsId",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::
					setSharedRotationRequestDetailsId);
		attributeGetterFunctions.put(
			"programDurationId",
			SharedRotationRequestDetails::getProgramDurationId);
		attributeSetterBiConsumers.put(
			"programDurationId",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setProgramDurationId);
		attributeGetterFunctions.put(
			"rotationId", SharedRotationRequestDetails::getRotationId);
		attributeSetterBiConsumers.put(
			"rotationId",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setRotationId);
		attributeGetterFunctions.put(
			"groupId", SharedRotationRequestDetails::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setGroupId);
		attributeGetterFunctions.put(
			"companyId", SharedRotationRequestDetails::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", SharedRotationRequestDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SharedRotationRequestDetails, Date>)
				SharedRotationRequestDetails::setCreateDate);
		attributeGetterFunctions.put(
			"createdBy", SharedRotationRequestDetails::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", SharedRotationRequestDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SharedRotationRequestDetails, Date>)
				SharedRotationRequestDetails::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedBy", SharedRotationRequestDetails::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setModifiedBy);
		attributeGetterFunctions.put(
			"noOfTraineesRequested",
			SharedRotationRequestDetails::getNoOfTraineesRequested);
		attributeSetterBiConsumers.put(
			"noOfTraineesRequested",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setNoOfTraineesRequested);
		attributeGetterFunctions.put(
			"requesterComment",
			SharedRotationRequestDetails::getRequesterComment);
		attributeSetterBiConsumers.put(
			"requesterComment",
			(BiConsumer<SharedRotationRequestDetails, String>)
				SharedRotationRequestDetails::setRequesterComment);
		attributeGetterFunctions.put(
			"status", SharedRotationRequestDetails::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<SharedRotationRequestDetails, String>)
				SharedRotationRequestDetails::setStatus);
		attributeGetterFunctions.put(
			"approvedCount", SharedRotationRequestDetails::getApprovedCount);
		attributeSetterBiConsumers.put(
			"approvedCount",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setApprovedCount);
		attributeGetterFunctions.put(
			"rejectedCount", SharedRotationRequestDetails::getRejectedCount);
		attributeSetterBiConsumers.put(
			"rejectedCount",
			(BiConsumer<SharedRotationRequestDetails, Long>)
				SharedRotationRequestDetails::setRejectedCount);
		attributeGetterFunctions.put(
			"requestRaisedTo",
			SharedRotationRequestDetails::getRequestRaisedTo);
		attributeSetterBiConsumers.put(
			"requestRaisedTo",
			(BiConsumer<SharedRotationRequestDetails, String>)
				SharedRotationRequestDetails::setRequestRaisedTo);
		attributeGetterFunctions.put(
			"requestRaisedBy",
			SharedRotationRequestDetails::getRequestRaisedBy);
		attributeSetterBiConsumers.put(
			"requestRaisedBy",
			(BiConsumer<SharedRotationRequestDetails, String>)
				SharedRotationRequestDetails::setRequestRaisedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSharedRotationRequestDetailsId() {
		return _sharedRotationRequestDetailsId;
	}

	@Override
	public void setSharedRotationRequestDetailsId(
		long sharedRotationRequestDetailsId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sharedRotationRequestDetailsId = sharedRotationRequestDetailsId;
	}

	@JSON
	@Override
	public long getProgramDurationId() {
		return _programDurationId;
	}

	@Override
	public void setProgramDurationId(long programDurationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programDurationId = programDurationId;
	}

	@JSON
	@Override
	public long getRotationId() {
		return _rotationId;
	}

	@Override
	public void setRotationId(long rotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationId = rotationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public long getNoOfTraineesRequested() {
		return _noOfTraineesRequested;
	}

	@Override
	public void setNoOfTraineesRequested(long noOfTraineesRequested) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfTraineesRequested = noOfTraineesRequested;
	}

	@JSON
	@Override
	public String getRequesterComment() {
		if (_requesterComment == null) {
			return "";
		}
		else {
			return _requesterComment;
		}
	}

	@Override
	public String getRequesterComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRequesterComment(languageId);
	}

	@Override
	public String getRequesterComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRequesterComment(languageId, useDefault);
	}

	@Override
	public String getRequesterComment(String languageId) {
		return LocalizationUtil.getLocalization(
			getRequesterComment(), languageId);
	}

	@Override
	public String getRequesterComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getRequesterComment(), languageId, useDefault);
	}

	@Override
	public String getRequesterCommentCurrentLanguageId() {
		return _requesterCommentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRequesterCommentCurrentValue() {
		Locale locale = getLocale(_requesterCommentCurrentLanguageId);

		return getRequesterComment(locale);
	}

	@Override
	public Map<Locale, String> getRequesterCommentMap() {
		return LocalizationUtil.getLocalizationMap(getRequesterComment());
	}

	@Override
	public void setRequesterComment(String requesterComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requesterComment = requesterComment;
	}

	@Override
	public void setRequesterComment(String requesterComment, Locale locale) {
		setRequesterComment(requesterComment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRequesterComment(
		String requesterComment, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(requesterComment)) {
			setRequesterComment(
				LocalizationUtil.updateLocalization(
					getRequesterComment(), "RequesterComment", requesterComment,
					languageId, defaultLanguageId));
		}
		else {
			setRequesterComment(
				LocalizationUtil.removeLocalization(
					getRequesterComment(), "RequesterComment", languageId));
		}
	}

	@Override
	public void setRequesterCommentCurrentLanguageId(String languageId) {
		_requesterCommentCurrentLanguageId = languageId;
	}

	@Override
	public void setRequesterCommentMap(
		Map<Locale, String> requesterCommentMap) {

		setRequesterCommentMap(requesterCommentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRequesterCommentMap(
		Map<Locale, String> requesterCommentMap, Locale defaultLocale) {

		if (requesterCommentMap == null) {
			return;
		}

		setRequesterComment(
			LocalizationUtil.updateLocalization(
				requesterCommentMap, getRequesterComment(), "RequesterComment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getApprovedCount() {
		return _approvedCount;
	}

	@Override
	public void setApprovedCount(long approvedCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approvedCount = approvedCount;
	}

	@JSON
	@Override
	public long getRejectedCount() {
		return _rejectedCount;
	}

	@Override
	public void setRejectedCount(long rejectedCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rejectedCount = rejectedCount;
	}

	@JSON
	@Override
	public String getRequestRaisedTo() {
		if (_requestRaisedTo == null) {
			return "";
		}
		else {
			return _requestRaisedTo;
		}
	}

	@Override
	public void setRequestRaisedTo(String requestRaisedTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestRaisedTo = requestRaisedTo;
	}

	@JSON
	@Override
	public String getRequestRaisedBy() {
		if (_requestRaisedBy == null) {
			return "";
		}
		else {
			return _requestRaisedBy;
		}
	}

	@Override
	public void setRequestRaisedBy(String requestRaisedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestRaisedBy = requestRaisedBy;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRequestRaisedBy() {
		return getColumnOriginalValue("request_raised_by");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				SharedRotationRequestDetails.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SharedRotationRequestDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> requesterCommentMap = getRequesterCommentMap();

		for (Map.Entry<Locale, String> entry : requesterCommentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getRequesterComment();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			SharedRotationRequestDetails.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String requesterComment = getRequesterComment(defaultLocale);

		if (Validator.isNull(requesterComment)) {
			setRequesterComment(
				getRequesterComment(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRequesterComment(
				getRequesterComment(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public SharedRotationRequestDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SharedRotationRequestDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SharedRotationRequestDetailsImpl sharedRotationRequestDetailsImpl =
			new SharedRotationRequestDetailsImpl();

		sharedRotationRequestDetailsImpl.setUuid(getUuid());
		sharedRotationRequestDetailsImpl.setSharedRotationRequestDetailsId(
			getSharedRotationRequestDetailsId());
		sharedRotationRequestDetailsImpl.setProgramDurationId(
			getProgramDurationId());
		sharedRotationRequestDetailsImpl.setRotationId(getRotationId());
		sharedRotationRequestDetailsImpl.setGroupId(getGroupId());
		sharedRotationRequestDetailsImpl.setCompanyId(getCompanyId());
		sharedRotationRequestDetailsImpl.setCreateDate(getCreateDate());
		sharedRotationRequestDetailsImpl.setCreatedBy(getCreatedBy());
		sharedRotationRequestDetailsImpl.setModifiedDate(getModifiedDate());
		sharedRotationRequestDetailsImpl.setModifiedBy(getModifiedBy());
		sharedRotationRequestDetailsImpl.setNoOfTraineesRequested(
			getNoOfTraineesRequested());
		sharedRotationRequestDetailsImpl.setRequesterComment(
			getRequesterComment());
		sharedRotationRequestDetailsImpl.setStatus(getStatus());
		sharedRotationRequestDetailsImpl.setApprovedCount(getApprovedCount());
		sharedRotationRequestDetailsImpl.setRejectedCount(getRejectedCount());
		sharedRotationRequestDetailsImpl.setRequestRaisedTo(
			getRequestRaisedTo());
		sharedRotationRequestDetailsImpl.setRequestRaisedBy(
			getRequestRaisedBy());

		sharedRotationRequestDetailsImpl.resetOriginalValues();

		return sharedRotationRequestDetailsImpl;
	}

	@Override
	public SharedRotationRequestDetails cloneWithOriginalValues() {
		SharedRotationRequestDetailsImpl sharedRotationRequestDetailsImpl =
			new SharedRotationRequestDetailsImpl();

		sharedRotationRequestDetailsImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		sharedRotationRequestDetailsImpl.setSharedRotationRequestDetailsId(
			this.<Long>getColumnOriginalValue(
				"shared_rotation_request_details_id"));
		sharedRotationRequestDetailsImpl.setProgramDurationId(
			this.<Long>getColumnOriginalValue("program_duration_id"));
		sharedRotationRequestDetailsImpl.setRotationId(
			this.<Long>getColumnOriginalValue("rotation_id"));
		sharedRotationRequestDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		sharedRotationRequestDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		sharedRotationRequestDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		sharedRotationRequestDetailsImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("created_by"));
		sharedRotationRequestDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		sharedRotationRequestDetailsImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modified_by"));
		sharedRotationRequestDetailsImpl.setNoOfTraineesRequested(
			this.<Long>getColumnOriginalValue("no_of_trainees_requested"));
		sharedRotationRequestDetailsImpl.setRequesterComment(
			this.<String>getColumnOriginalValue("requester_comment"));
		sharedRotationRequestDetailsImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		sharedRotationRequestDetailsImpl.setApprovedCount(
			this.<Long>getColumnOriginalValue("approved_count"));
		sharedRotationRequestDetailsImpl.setRejectedCount(
			this.<Long>getColumnOriginalValue("rejected_count"));
		sharedRotationRequestDetailsImpl.setRequestRaisedTo(
			this.<String>getColumnOriginalValue("request_raised_to"));
		sharedRotationRequestDetailsImpl.setRequestRaisedBy(
			this.<String>getColumnOriginalValue("request_raised_by"));

		return sharedRotationRequestDetailsImpl;
	}

	@Override
	public int compareTo(
		SharedRotationRequestDetails sharedRotationRequestDetails) {

		long primaryKey = sharedRotationRequestDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SharedRotationRequestDetails)) {
			return false;
		}

		SharedRotationRequestDetails sharedRotationRequestDetails =
			(SharedRotationRequestDetails)object;

		long primaryKey = sharedRotationRequestDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SharedRotationRequestDetails> toCacheModel() {
		SharedRotationRequestDetailsCacheModel
			sharedRotationRequestDetailsCacheModel =
				new SharedRotationRequestDetailsCacheModel();

		sharedRotationRequestDetailsCacheModel.uuid = getUuid();

		String uuid = sharedRotationRequestDetailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			sharedRotationRequestDetailsCacheModel.uuid = null;
		}

		sharedRotationRequestDetailsCacheModel.sharedRotationRequestDetailsId =
			getSharedRotationRequestDetailsId();

		sharedRotationRequestDetailsCacheModel.programDurationId =
			getProgramDurationId();

		sharedRotationRequestDetailsCacheModel.rotationId = getRotationId();

		sharedRotationRequestDetailsCacheModel.groupId = getGroupId();

		sharedRotationRequestDetailsCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			sharedRotationRequestDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sharedRotationRequestDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		sharedRotationRequestDetailsCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sharedRotationRequestDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sharedRotationRequestDetailsCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		sharedRotationRequestDetailsCacheModel.modifiedBy = getModifiedBy();

		sharedRotationRequestDetailsCacheModel.noOfTraineesRequested =
			getNoOfTraineesRequested();

		sharedRotationRequestDetailsCacheModel.requesterComment =
			getRequesterComment();

		String requesterComment =
			sharedRotationRequestDetailsCacheModel.requesterComment;

		if ((requesterComment != null) && (requesterComment.length() == 0)) {
			sharedRotationRequestDetailsCacheModel.requesterComment = null;
		}

		sharedRotationRequestDetailsCacheModel.status = getStatus();

		String status = sharedRotationRequestDetailsCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			sharedRotationRequestDetailsCacheModel.status = null;
		}

		sharedRotationRequestDetailsCacheModel.approvedCount =
			getApprovedCount();

		sharedRotationRequestDetailsCacheModel.rejectedCount =
			getRejectedCount();

		sharedRotationRequestDetailsCacheModel.requestRaisedTo =
			getRequestRaisedTo();

		String requestRaisedTo =
			sharedRotationRequestDetailsCacheModel.requestRaisedTo;

		if ((requestRaisedTo != null) && (requestRaisedTo.length() == 0)) {
			sharedRotationRequestDetailsCacheModel.requestRaisedTo = null;
		}

		sharedRotationRequestDetailsCacheModel.requestRaisedBy =
			getRequestRaisedBy();

		String requestRaisedBy =
			sharedRotationRequestDetailsCacheModel.requestRaisedBy;

		if ((requestRaisedBy != null) && (requestRaisedBy.length() == 0)) {
			sharedRotationRequestDetailsCacheModel.requestRaisedBy = null;
		}

		return sharedRotationRequestDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SharedRotationRequestDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SharedRotationRequestDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SharedRotationRequestDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SharedRotationRequestDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SharedRotationRequestDetails>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SharedRotationRequestDetails.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _sharedRotationRequestDetailsId;
	private long _programDurationId;
	private long _rotationId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _noOfTraineesRequested;
	private String _requesterComment;
	private String _requesterCommentCurrentLanguageId;
	private String _status;
	private long _approvedCount;
	private long _rejectedCount;
	private String _requestRaisedTo;
	private String _requestRaisedBy;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SharedRotationRequestDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SharedRotationRequestDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"shared_rotation_request_details_id",
			_sharedRotationRequestDetailsId);
		_columnOriginalValues.put("program_duration_id", _programDurationId);
		_columnOriginalValues.put("rotation_id", _rotationId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("created_by", _createdBy);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("modified_by", _modifiedBy);
		_columnOriginalValues.put(
			"no_of_trainees_requested", _noOfTraineesRequested);
		_columnOriginalValues.put("requester_comment", _requesterComment);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("approved_count", _approvedCount);
		_columnOriginalValues.put("rejected_count", _rejectedCount);
		_columnOriginalValues.put("request_raised_to", _requestRaisedTo);
		_columnOriginalValues.put("request_raised_by", _requestRaisedBy);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"shared_rotation_request_details_id",
			"sharedRotationRequestDetailsId");
		attributeNames.put("program_duration_id", "programDurationId");
		attributeNames.put("rotation_id", "rotationId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("created_by", "createdBy");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("modified_by", "modifiedBy");
		attributeNames.put("no_of_trainees_requested", "noOfTraineesRequested");
		attributeNames.put("requester_comment", "requesterComment");
		attributeNames.put("approved_count", "approvedCount");
		attributeNames.put("rejected_count", "rejectedCount");
		attributeNames.put("request_raised_to", "requestRaisedTo");
		attributeNames.put("request_raised_by", "requestRaisedBy");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("shared_rotation_request_details_id", 2L);

		columnBitmasks.put("program_duration_id", 4L);

		columnBitmasks.put("rotation_id", 8L);

		columnBitmasks.put("group_id", 16L);

		columnBitmasks.put("company_id", 32L);

		columnBitmasks.put("create_date", 64L);

		columnBitmasks.put("created_by", 128L);

		columnBitmasks.put("modified_date", 256L);

		columnBitmasks.put("modified_by", 512L);

		columnBitmasks.put("no_of_trainees_requested", 1024L);

		columnBitmasks.put("requester_comment", 2048L);

		columnBitmasks.put("status", 4096L);

		columnBitmasks.put("approved_count", 8192L);

		columnBitmasks.put("rejected_count", 16384L);

		columnBitmasks.put("request_raised_to", 32768L);

		columnBitmasks.put("request_raised_by", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SharedRotationRequestDetails _escapedModel;

}