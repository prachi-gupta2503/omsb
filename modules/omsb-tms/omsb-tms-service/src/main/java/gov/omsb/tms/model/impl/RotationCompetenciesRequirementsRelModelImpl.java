/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import gov.omsb.tms.model.RotationCompetenciesRequirementsRel;
import gov.omsb.tms.model.RotationCompetenciesRequirementsRelModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RotationCompetenciesRequirementsRel service. Represents a row in the &quot;rotation_competencies_requirements_rel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RotationCompetenciesRequirementsRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RotationCompetenciesRequirementsRelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RotationCompetenciesRequirementsRelImpl
 * @generated
 */
@JSON(strict = true)
public class RotationCompetenciesRequirementsRelModelImpl
	extends BaseModelImpl<RotationCompetenciesRequirementsRel>
	implements RotationCompetenciesRequirementsRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rotation competencies requirements rel model instance should use the <code>RotationCompetenciesRequirementsRel</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"rotation_competencies_requirements_rel";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR},
		{"rotation_competencies_rel_id", Types.BIGINT},
		{"prog_duration_id", Types.BIGINT}, {"rotation_id", Types.BIGINT},
		{"competencies_master_id", Types.BIGINT}, {"group_id", Types.BIGINT},
		{"company_id", Types.BIGINT}, {"create_date", Types.TIMESTAMP},
		{"modified_date", Types.TIMESTAMP}, {"requirements", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rotation_competencies_rel_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prog_duration_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rotation_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("competencies_master_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requirements", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rotation_competencies_requirements_rel (uuid_ VARCHAR(75) null,rotation_competencies_rel_id LONG not null primary key,prog_duration_id LONG,rotation_id LONG,competencies_master_id LONG,group_id LONG,company_id LONG,create_date DATE null,modified_date DATE null,requirements STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table rotation_competencies_requirements_rel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rotationCompetenciesRequirementsRel.rotationCompetenciesRelId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rotation_competencies_requirements_rel.rotation_competencies_rel_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROGDURATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROTATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROTATIONCOMPETENCIESRELID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RotationCompetenciesRequirementsRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rotationCompetenciesRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRotationCompetenciesRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rotationCompetenciesRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RotationCompetenciesRequirementsRel.class;
	}

	@Override
	public String getModelClassName() {
		return RotationCompetenciesRequirementsRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RotationCompetenciesRequirementsRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<RotationCompetenciesRequirementsRel, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RotationCompetenciesRequirementsRel, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(RotationCompetenciesRequirementsRel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RotationCompetenciesRequirementsRel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RotationCompetenciesRequirementsRel, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RotationCompetenciesRequirementsRel)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<RotationCompetenciesRequirementsRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RotationCompetenciesRequirementsRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<RotationCompetenciesRequirementsRel, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<RotationCompetenciesRequirementsRel, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<RotationCompetenciesRequirementsRel, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String,
					 Function<RotationCompetenciesRequirementsRel, Object>>();
		Map<String, BiConsumer<RotationCompetenciesRequirementsRel, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String,
					 BiConsumer<RotationCompetenciesRequirementsRel, ?>>();

		attributeGetterFunctions.put(
			"uuid", RotationCompetenciesRequirementsRel::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<RotationCompetenciesRequirementsRel, String>)
				RotationCompetenciesRequirementsRel::setUuid);
		attributeGetterFunctions.put(
			"rotationCompetenciesRelId",
			RotationCompetenciesRequirementsRel::getRotationCompetenciesRelId);
		attributeSetterBiConsumers.put(
			"rotationCompetenciesRelId",
			(BiConsumer<RotationCompetenciesRequirementsRel, Long>)
				RotationCompetenciesRequirementsRel::
					setRotationCompetenciesRelId);
		attributeGetterFunctions.put(
			"progDurationId",
			RotationCompetenciesRequirementsRel::getProgDurationId);
		attributeSetterBiConsumers.put(
			"progDurationId",
			(BiConsumer<RotationCompetenciesRequirementsRel, Long>)
				RotationCompetenciesRequirementsRel::setProgDurationId);
		attributeGetterFunctions.put(
			"rotationId", RotationCompetenciesRequirementsRel::getRotationId);
		attributeSetterBiConsumers.put(
			"rotationId",
			(BiConsumer<RotationCompetenciesRequirementsRel, Long>)
				RotationCompetenciesRequirementsRel::setRotationId);
		attributeGetterFunctions.put(
			"competenciesMasterId",
			RotationCompetenciesRequirementsRel::getCompetenciesMasterId);
		attributeSetterBiConsumers.put(
			"competenciesMasterId",
			(BiConsumer<RotationCompetenciesRequirementsRel, Long>)
				RotationCompetenciesRequirementsRel::setCompetenciesMasterId);
		attributeGetterFunctions.put(
			"groupId", RotationCompetenciesRequirementsRel::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RotationCompetenciesRequirementsRel, Long>)
				RotationCompetenciesRequirementsRel::setGroupId);
		attributeGetterFunctions.put(
			"companyId", RotationCompetenciesRequirementsRel::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RotationCompetenciesRequirementsRel, Long>)
				RotationCompetenciesRequirementsRel::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", RotationCompetenciesRequirementsRel::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RotationCompetenciesRequirementsRel, Date>)
				RotationCompetenciesRequirementsRel::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate",
			RotationCompetenciesRequirementsRel::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RotationCompetenciesRequirementsRel, Date>)
				RotationCompetenciesRequirementsRel::setModifiedDate);
		attributeGetterFunctions.put(
			"requirements",
			RotationCompetenciesRequirementsRel::getRequirements);
		attributeSetterBiConsumers.put(
			"requirements",
			(BiConsumer<RotationCompetenciesRequirementsRel, String>)
				RotationCompetenciesRequirementsRel::setRequirements);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRotationCompetenciesRelId() {
		return _rotationCompetenciesRelId;
	}

	@Override
	public void setRotationCompetenciesRelId(long rotationCompetenciesRelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationCompetenciesRelId = rotationCompetenciesRelId;
	}

	@JSON
	@Override
	public long getProgDurationId() {
		return _progDurationId;
	}

	@Override
	public void setProgDurationId(long progDurationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_progDurationId = progDurationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProgDurationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("prog_duration_id"));
	}

	@JSON
	@Override
	public long getRotationId() {
		return _rotationId;
	}

	@Override
	public void setRotationId(long rotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rotationId = rotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("rotation_id"));
	}

	@JSON
	@Override
	public long getCompetenciesMasterId() {
		return _competenciesMasterId;
	}

	@Override
	public void setCompetenciesMasterId(long competenciesMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_competenciesMasterId = competenciesMasterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("group_id"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("company_id"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRequirements() {
		if (_requirements == null) {
			return "";
		}
		else {
			return _requirements;
		}
	}

	@Override
	public String getRequirements(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRequirements(languageId);
	}

	@Override
	public String getRequirements(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRequirements(languageId, useDefault);
	}

	@Override
	public String getRequirements(String languageId) {
		return LocalizationUtil.getLocalization(getRequirements(), languageId);
	}

	@Override
	public String getRequirements(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getRequirements(), languageId, useDefault);
	}

	@Override
	public String getRequirementsCurrentLanguageId() {
		return _requirementsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRequirementsCurrentValue() {
		Locale locale = getLocale(_requirementsCurrentLanguageId);

		return getRequirements(locale);
	}

	@Override
	public Map<Locale, String> getRequirementsMap() {
		return LocalizationUtil.getLocalizationMap(getRequirements());
	}

	@Override
	public void setRequirements(String requirements) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requirements = requirements;
	}

	@Override
	public void setRequirements(String requirements, Locale locale) {
		setRequirements(requirements, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRequirements(
		String requirements, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(requirements)) {
			setRequirements(
				LocalizationUtil.updateLocalization(
					getRequirements(), "Requirements", requirements, languageId,
					defaultLanguageId));
		}
		else {
			setRequirements(
				LocalizationUtil.removeLocalization(
					getRequirements(), "Requirements", languageId));
		}
	}

	@Override
	public void setRequirementsCurrentLanguageId(String languageId) {
		_requirementsCurrentLanguageId = languageId;
	}

	@Override
	public void setRequirementsMap(Map<Locale, String> requirementsMap) {
		setRequirementsMap(requirementsMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRequirementsMap(
		Map<Locale, String> requirementsMap, Locale defaultLocale) {

		if (requirementsMap == null) {
			return;
		}

		setRequirements(
			LocalizationUtil.updateLocalization(
				requirementsMap, getRequirements(), "Requirements",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				RotationCompetenciesRequirementsRel.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RotationCompetenciesRequirementsRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> requirementsMap = getRequirementsMap();

		for (Map.Entry<Locale, String> entry : requirementsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getRequirements();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			RotationCompetenciesRequirementsRel.class.getName(),
			getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String requirements = getRequirements(defaultLocale);

		if (Validator.isNull(requirements)) {
			setRequirements(
				getRequirements(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRequirements(
				getRequirements(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public RotationCompetenciesRequirementsRel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RotationCompetenciesRequirementsRel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RotationCompetenciesRequirementsRelImpl
			rotationCompetenciesRequirementsRelImpl =
				new RotationCompetenciesRequirementsRelImpl();

		rotationCompetenciesRequirementsRelImpl.setUuid(getUuid());
		rotationCompetenciesRequirementsRelImpl.setRotationCompetenciesRelId(
			getRotationCompetenciesRelId());
		rotationCompetenciesRequirementsRelImpl.setProgDurationId(
			getProgDurationId());
		rotationCompetenciesRequirementsRelImpl.setRotationId(getRotationId());
		rotationCompetenciesRequirementsRelImpl.setCompetenciesMasterId(
			getCompetenciesMasterId());
		rotationCompetenciesRequirementsRelImpl.setGroupId(getGroupId());
		rotationCompetenciesRequirementsRelImpl.setCompanyId(getCompanyId());
		rotationCompetenciesRequirementsRelImpl.setCreateDate(getCreateDate());
		rotationCompetenciesRequirementsRelImpl.setModifiedDate(
			getModifiedDate());
		rotationCompetenciesRequirementsRelImpl.setRequirements(
			getRequirements());

		rotationCompetenciesRequirementsRelImpl.resetOriginalValues();

		return rotationCompetenciesRequirementsRelImpl;
	}

	@Override
	public RotationCompetenciesRequirementsRel cloneWithOriginalValues() {
		RotationCompetenciesRequirementsRelImpl
			rotationCompetenciesRequirementsRelImpl =
				new RotationCompetenciesRequirementsRelImpl();

		rotationCompetenciesRequirementsRelImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		rotationCompetenciesRequirementsRelImpl.setRotationCompetenciesRelId(
			this.<Long>getColumnOriginalValue("rotation_competencies_rel_id"));
		rotationCompetenciesRequirementsRelImpl.setProgDurationId(
			this.<Long>getColumnOriginalValue("prog_duration_id"));
		rotationCompetenciesRequirementsRelImpl.setRotationId(
			this.<Long>getColumnOriginalValue("rotation_id"));
		rotationCompetenciesRequirementsRelImpl.setCompetenciesMasterId(
			this.<Long>getColumnOriginalValue("competencies_master_id"));
		rotationCompetenciesRequirementsRelImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		rotationCompetenciesRequirementsRelImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		rotationCompetenciesRequirementsRelImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		rotationCompetenciesRequirementsRelImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		rotationCompetenciesRequirementsRelImpl.setRequirements(
			this.<String>getColumnOriginalValue("requirements"));

		return rotationCompetenciesRequirementsRelImpl;
	}

	@Override
	public int compareTo(
		RotationCompetenciesRequirementsRel
			rotationCompetenciesRequirementsRel) {

		long primaryKey = rotationCompetenciesRequirementsRel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RotationCompetenciesRequirementsRel)) {
			return false;
		}

		RotationCompetenciesRequirementsRel
			rotationCompetenciesRequirementsRel =
				(RotationCompetenciesRequirementsRel)object;

		long primaryKey = rotationCompetenciesRequirementsRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RotationCompetenciesRequirementsRel> toCacheModel() {
		RotationCompetenciesRequirementsRelCacheModel
			rotationCompetenciesRequirementsRelCacheModel =
				new RotationCompetenciesRequirementsRelCacheModel();

		rotationCompetenciesRequirementsRelCacheModel.uuid = getUuid();

		String uuid = rotationCompetenciesRequirementsRelCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rotationCompetenciesRequirementsRelCacheModel.uuid = null;
		}

		rotationCompetenciesRequirementsRelCacheModel.
			rotationCompetenciesRelId = getRotationCompetenciesRelId();

		rotationCompetenciesRequirementsRelCacheModel.progDurationId =
			getProgDurationId();

		rotationCompetenciesRequirementsRelCacheModel.rotationId =
			getRotationId();

		rotationCompetenciesRequirementsRelCacheModel.competenciesMasterId =
			getCompetenciesMasterId();

		rotationCompetenciesRequirementsRelCacheModel.groupId = getGroupId();

		rotationCompetenciesRequirementsRelCacheModel.companyId =
			getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			rotationCompetenciesRequirementsRelCacheModel.createDate =
				createDate.getTime();
		}
		else {
			rotationCompetenciesRequirementsRelCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rotationCompetenciesRequirementsRelCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			rotationCompetenciesRequirementsRelCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		rotationCompetenciesRequirementsRelCacheModel.requirements =
			getRequirements();

		String requirements =
			rotationCompetenciesRequirementsRelCacheModel.requirements;

		if ((requirements != null) && (requirements.length() == 0)) {
			rotationCompetenciesRequirementsRelCacheModel.requirements = null;
		}

		return rotationCompetenciesRequirementsRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RotationCompetenciesRequirementsRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<RotationCompetenciesRequirementsRel, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RotationCompetenciesRequirementsRel, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RotationCompetenciesRequirementsRel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, RotationCompetenciesRequirementsRel>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						RotationCompetenciesRequirementsRel.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _rotationCompetenciesRelId;
	private long _progDurationId;
	private long _rotationId;
	private long _competenciesMasterId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _requirements;
	private String _requirementsCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RotationCompetenciesRequirementsRel, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RotationCompetenciesRequirementsRel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"rotation_competencies_rel_id", _rotationCompetenciesRelId);
		_columnOriginalValues.put("prog_duration_id", _progDurationId);
		_columnOriginalValues.put("rotation_id", _rotationId);
		_columnOriginalValues.put(
			"competencies_master_id", _competenciesMasterId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("requirements", _requirements);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"rotation_competencies_rel_id", "rotationCompetenciesRelId");
		attributeNames.put("prog_duration_id", "progDurationId");
		attributeNames.put("rotation_id", "rotationId");
		attributeNames.put("competencies_master_id", "competenciesMasterId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("modified_date", "modifiedDate");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("rotation_competencies_rel_id", 2L);

		columnBitmasks.put("prog_duration_id", 4L);

		columnBitmasks.put("rotation_id", 8L);

		columnBitmasks.put("competencies_master_id", 16L);

		columnBitmasks.put("group_id", 32L);

		columnBitmasks.put("company_id", 64L);

		columnBitmasks.put("create_date", 128L);

		columnBitmasks.put("modified_date", 256L);

		columnBitmasks.put("requirements", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RotationCompetenciesRequirementsRel _escapedModel;

}