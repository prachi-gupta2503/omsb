/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the LeaveMaster service. Represents a row in the &quot;leave_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.LeaveMasterModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.LeaveMasterImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LeaveMaster
 * @generated
 */
@ProviderType
public interface LeaveMasterModel
	extends BaseModel<LeaveMaster>, LocalizedModel, ShardedModel, StagedModel,
			WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a leave master model instance should use the {@link LeaveMaster} interface instead.
	 */

	/**
	 * Returns the primary key of this leave master.
	 *
	 * @return the primary key of this leave master
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this leave master.
	 *
	 * @param primaryKey the primary key of this leave master
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this leave master.
	 *
	 * @return the uuid of this leave master
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this leave master.
	 *
	 * @param uuid the uuid of this leave master
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the leave master ID of this leave master.
	 *
	 * @return the leave master ID of this leave master
	 */
	public long getLeaveMasterId();

	/**
	 * Sets the leave master ID of this leave master.
	 *
	 * @param leaveMasterId the leave master ID of this leave master
	 */
	public void setLeaveMasterId(long leaveMasterId);

	/**
	 * Returns the trainee ID of this leave master.
	 *
	 * @return the trainee ID of this leave master
	 */
	public long getTraineeId();

	/**
	 * Sets the trainee ID of this leave master.
	 *
	 * @param traineeId the trainee ID of this leave master
	 */
	public void setTraineeId(long traineeId);

	/**
	 * Returns the leave type ID of this leave master.
	 *
	 * @return the leave type ID of this leave master
	 */
	public long getLeaveTypeId();

	/**
	 * Sets the leave type ID of this leave master.
	 *
	 * @param leaveTypeId the leave type ID of this leave master
	 */
	public void setLeaveTypeId(long leaveTypeId);

	/**
	 * Returns the leave trainee ID of this leave master.
	 *
	 * @return the leave trainee ID of this leave master
	 */
	public long getLeaveTraineeId();

	/**
	 * Sets the leave trainee ID of this leave master.
	 *
	 * @param leaveTraineeId the leave trainee ID of this leave master
	 */
	public void setLeaveTraineeId(long leaveTraineeId);

	/**
	 * Returns the block name of this leave master.
	 *
	 * @return the block name of this leave master
	 */
	public String getBlockName();

	/**
	 * Returns the localized block name of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized block name of this leave master
	 */
	@AutoEscape
	public String getBlockName(Locale locale);

	/**
	 * Returns the localized block name of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized block name of this leave master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getBlockName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized block name of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized block name of this leave master
	 */
	@AutoEscape
	public String getBlockName(String languageId);

	/**
	 * Returns the localized block name of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized block name of this leave master
	 */
	@AutoEscape
	public String getBlockName(String languageId, boolean useDefault);

	@AutoEscape
	public String getBlockNameCurrentLanguageId();

	@AutoEscape
	public String getBlockNameCurrentValue();

	/**
	 * Returns a map of the locales and localized block names of this leave master.
	 *
	 * @return the locales and localized block names of this leave master
	 */
	public Map<Locale, String> getBlockNameMap();

	/**
	 * Sets the block name of this leave master.
	 *
	 * @param blockName the block name of this leave master
	 */
	public void setBlockName(String blockName);

	/**
	 * Sets the localized block name of this leave master in the language.
	 *
	 * @param blockName the localized block name of this leave master
	 * @param locale the locale of the language
	 */
	public void setBlockName(String blockName, Locale locale);

	/**
	 * Sets the localized block name of this leave master in the language, and sets the default locale.
	 *
	 * @param blockName the localized block name of this leave master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setBlockName(
		String blockName, Locale locale, Locale defaultLocale);

	public void setBlockNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized block names of this leave master from the map of locales and localized block names.
	 *
	 * @param blockNameMap the locales and localized block names of this leave master
	 */
	public void setBlockNameMap(Map<Locale, String> blockNameMap);

	/**
	 * Sets the localized block names of this leave master from the map of locales and localized block names, and sets the default locale.
	 *
	 * @param blockNameMap the locales and localized block names of this leave master
	 * @param defaultLocale the default locale
	 */
	public void setBlockNameMap(
		Map<Locale, String> blockNameMap, Locale defaultLocale);

	/**
	 * Returns the leave from of this leave master.
	 *
	 * @return the leave from of this leave master
	 */
	public Date getLeaveFrom();

	/**
	 * Sets the leave from of this leave master.
	 *
	 * @param leaveFrom the leave from of this leave master
	 */
	public void setLeaveFrom(Date leaveFrom);

	/**
	 * Returns the leave to of this leave master.
	 *
	 * @return the leave to of this leave master
	 */
	public Date getLeaveTo();

	/**
	 * Sets the leave to of this leave master.
	 *
	 * @param leaveTo the leave to of this leave master
	 */
	public void setLeaveTo(Date leaveTo);

	/**
	 * Returns the no of days of this leave master.
	 *
	 * @return the no of days of this leave master
	 */
	public int getNoOfDays();

	/**
	 * Sets the no of days of this leave master.
	 *
	 * @param noOfDays the no of days of this leave master
	 */
	public void setNoOfDays(int noOfDays);

	/**
	 * Returns the contact name of this leave master.
	 *
	 * @return the contact name of this leave master
	 */
	public String getContactName();

	/**
	 * Returns the localized contact name of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized contact name of this leave master
	 */
	@AutoEscape
	public String getContactName(Locale locale);

	/**
	 * Returns the localized contact name of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized contact name of this leave master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContactName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized contact name of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized contact name of this leave master
	 */
	@AutoEscape
	public String getContactName(String languageId);

	/**
	 * Returns the localized contact name of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized contact name of this leave master
	 */
	@AutoEscape
	public String getContactName(String languageId, boolean useDefault);

	@AutoEscape
	public String getContactNameCurrentLanguageId();

	@AutoEscape
	public String getContactNameCurrentValue();

	/**
	 * Returns a map of the locales and localized contact names of this leave master.
	 *
	 * @return the locales and localized contact names of this leave master
	 */
	public Map<Locale, String> getContactNameMap();

	/**
	 * Sets the contact name of this leave master.
	 *
	 * @param contactName the contact name of this leave master
	 */
	public void setContactName(String contactName);

	/**
	 * Sets the localized contact name of this leave master in the language.
	 *
	 * @param contactName the localized contact name of this leave master
	 * @param locale the locale of the language
	 */
	public void setContactName(String contactName, Locale locale);

	/**
	 * Sets the localized contact name of this leave master in the language, and sets the default locale.
	 *
	 * @param contactName the localized contact name of this leave master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContactName(
		String contactName, Locale locale, Locale defaultLocale);

	public void setContactNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized contact names of this leave master from the map of locales and localized contact names.
	 *
	 * @param contactNameMap the locales and localized contact names of this leave master
	 */
	public void setContactNameMap(Map<Locale, String> contactNameMap);

	/**
	 * Sets the localized contact names of this leave master from the map of locales and localized contact names, and sets the default locale.
	 *
	 * @param contactNameMap the locales and localized contact names of this leave master
	 * @param defaultLocale the default locale
	 */
	public void setContactNameMap(
		Map<Locale, String> contactNameMap, Locale defaultLocale);

	/**
	 * Returns the contact email of this leave master.
	 *
	 * @return the contact email of this leave master
	 */
	@AutoEscape
	public String getContactEmail();

	/**
	 * Sets the contact email of this leave master.
	 *
	 * @param contactEmail the contact email of this leave master
	 */
	public void setContactEmail(String contactEmail);

	/**
	 * Returns the contact no of this leave master.
	 *
	 * @return the contact no of this leave master
	 */
	@AutoEscape
	public String getContactNo();

	/**
	 * Sets the contact no of this leave master.
	 *
	 * @param contactNo the contact no of this leave master
	 */
	public void setContactNo(String contactNo);

	/**
	 * Returns the reason for leave of this leave master.
	 *
	 * @return the reason for leave of this leave master
	 */
	public String getReasonForLeave();

	/**
	 * Returns the localized reason for leave of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized reason for leave of this leave master
	 */
	@AutoEscape
	public String getReasonForLeave(Locale locale);

	/**
	 * Returns the localized reason for leave of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized reason for leave of this leave master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getReasonForLeave(Locale locale, boolean useDefault);

	/**
	 * Returns the localized reason for leave of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized reason for leave of this leave master
	 */
	@AutoEscape
	public String getReasonForLeave(String languageId);

	/**
	 * Returns the localized reason for leave of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized reason for leave of this leave master
	 */
	@AutoEscape
	public String getReasonForLeave(String languageId, boolean useDefault);

	@AutoEscape
	public String getReasonForLeaveCurrentLanguageId();

	@AutoEscape
	public String getReasonForLeaveCurrentValue();

	/**
	 * Returns a map of the locales and localized reason for leaves of this leave master.
	 *
	 * @return the locales and localized reason for leaves of this leave master
	 */
	public Map<Locale, String> getReasonForLeaveMap();

	/**
	 * Sets the reason for leave of this leave master.
	 *
	 * @param reasonForLeave the reason for leave of this leave master
	 */
	public void setReasonForLeave(String reasonForLeave);

	/**
	 * Sets the localized reason for leave of this leave master in the language.
	 *
	 * @param reasonForLeave the localized reason for leave of this leave master
	 * @param locale the locale of the language
	 */
	public void setReasonForLeave(String reasonForLeave, Locale locale);

	/**
	 * Sets the localized reason for leave of this leave master in the language, and sets the default locale.
	 *
	 * @param reasonForLeave the localized reason for leave of this leave master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setReasonForLeave(
		String reasonForLeave, Locale locale, Locale defaultLocale);

	public void setReasonForLeaveCurrentLanguageId(String languageId);

	/**
	 * Sets the localized reason for leaves of this leave master from the map of locales and localized reason for leaves.
	 *
	 * @param reasonForLeaveMap the locales and localized reason for leaves of this leave master
	 */
	public void setReasonForLeaveMap(Map<Locale, String> reasonForLeaveMap);

	/**
	 * Sets the localized reason for leaves of this leave master from the map of locales and localized reason for leaves, and sets the default locale.
	 *
	 * @param reasonForLeaveMap the locales and localized reason for leaves of this leave master
	 * @param defaultLocale the default locale
	 */
	public void setReasonForLeaveMap(
		Map<Locale, String> reasonForLeaveMap, Locale defaultLocale);

	/**
	 * Returns the application date of this leave master.
	 *
	 * @return the application date of this leave master
	 */
	public Date getApplicationDate();

	/**
	 * Sets the application date of this leave master.
	 *
	 * @param applicationDate the application date of this leave master
	 */
	public void setApplicationDate(Date applicationDate);

	/**
	 * Returns the return from leave of this leave master.
	 *
	 * @return the return from leave of this leave master
	 */
	public Date getReturnFromLeave();

	/**
	 * Sets the return from leave of this leave master.
	 *
	 * @param returnFromLeave the return from leave of this leave master
	 */
	public void setReturnFromLeave(Date returnFromLeave);

	/**
	 * Returns the reason for delay of this leave master.
	 *
	 * @return the reason for delay of this leave master
	 */
	public String getReasonForDelay();

	/**
	 * Returns the localized reason for delay of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized reason for delay of this leave master
	 */
	@AutoEscape
	public String getReasonForDelay(Locale locale);

	/**
	 * Returns the localized reason for delay of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized reason for delay of this leave master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getReasonForDelay(Locale locale, boolean useDefault);

	/**
	 * Returns the localized reason for delay of this leave master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized reason for delay of this leave master
	 */
	@AutoEscape
	public String getReasonForDelay(String languageId);

	/**
	 * Returns the localized reason for delay of this leave master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized reason for delay of this leave master
	 */
	@AutoEscape
	public String getReasonForDelay(String languageId, boolean useDefault);

	@AutoEscape
	public String getReasonForDelayCurrentLanguageId();

	@AutoEscape
	public String getReasonForDelayCurrentValue();

	/**
	 * Returns a map of the locales and localized reason for delays of this leave master.
	 *
	 * @return the locales and localized reason for delays of this leave master
	 */
	public Map<Locale, String> getReasonForDelayMap();

	/**
	 * Sets the reason for delay of this leave master.
	 *
	 * @param reasonForDelay the reason for delay of this leave master
	 */
	public void setReasonForDelay(String reasonForDelay);

	/**
	 * Sets the localized reason for delay of this leave master in the language.
	 *
	 * @param reasonForDelay the localized reason for delay of this leave master
	 * @param locale the locale of the language
	 */
	public void setReasonForDelay(String reasonForDelay, Locale locale);

	/**
	 * Sets the localized reason for delay of this leave master in the language, and sets the default locale.
	 *
	 * @param reasonForDelay the localized reason for delay of this leave master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setReasonForDelay(
		String reasonForDelay, Locale locale, Locale defaultLocale);

	public void setReasonForDelayCurrentLanguageId(String languageId);

	/**
	 * Sets the localized reason for delays of this leave master from the map of locales and localized reason for delays.
	 *
	 * @param reasonForDelayMap the locales and localized reason for delays of this leave master
	 */
	public void setReasonForDelayMap(Map<Locale, String> reasonForDelayMap);

	/**
	 * Sets the localized reason for delays of this leave master from the map of locales and localized reason for delays, and sets the default locale.
	 *
	 * @param reasonForDelayMap the locales and localized reason for delays of this leave master
	 * @param defaultLocale the default locale
	 */
	public void setReasonForDelayMap(
		Map<Locale, String> reasonForDelayMap, Locale defaultLocale);

	/**
	 * Returns the program ID of this leave master.
	 *
	 * @return the program ID of this leave master
	 */
	public long getProgramId();

	/**
	 * Sets the program ID of this leave master.
	 *
	 * @param programId the program ID of this leave master
	 */
	public void setProgramId(long programId);

	/**
	 * Returns the status of this leave master.
	 *
	 * @return the status of this leave master
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this leave master.
	 *
	 * @param status the status of this leave master
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this leave master.
	 *
	 * @return the status by user ID of this leave master
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this leave master.
	 *
	 * @param statusByUserId the status by user ID of this leave master
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this leave master.
	 *
	 * @return the status by user uuid of this leave master
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this leave master.
	 *
	 * @param statusByUserUuid the status by user uuid of this leave master
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this leave master.
	 *
	 * @return the status by user name of this leave master
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this leave master.
	 *
	 * @param statusByUserName the status by user name of this leave master
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this leave master.
	 *
	 * @return the status date of this leave master
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this leave master.
	 *
	 * @param statusDate the status date of this leave master
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the group ID of this leave master.
	 *
	 * @return the group ID of this leave master
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this leave master.
	 *
	 * @param groupId the group ID of this leave master
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this leave master.
	 *
	 * @return the company ID of this leave master
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this leave master.
	 *
	 * @param companyId the company ID of this leave master
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this leave master.
	 *
	 * @return the create date of this leave master
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this leave master.
	 *
	 * @param createDate the create date of this leave master
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the created by of this leave master.
	 *
	 * @return the created by of this leave master
	 */
	public long getCreatedBy();

	/**
	 * Sets the created by of this leave master.
	 *
	 * @param createdBy the created by of this leave master
	 */
	public void setCreatedBy(long createdBy);

	/**
	 * Returns the modified date of this leave master.
	 *
	 * @return the modified date of this leave master
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this leave master.
	 *
	 * @param modifiedDate the modified date of this leave master
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the modified by of this leave master.
	 *
	 * @return the modified by of this leave master
	 */
	public long getModifiedBy();

	/**
	 * Sets the modified by of this leave master.
	 *
	 * @param modifiedBy the modified by of this leave master
	 */
	public void setModifiedBy(long modifiedBy);

	/**
	 * Returns <code>true</code> if this leave master is approved.
	 *
	 * @return <code>true</code> if this leave master is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this leave master is denied.
	 *
	 * @return <code>true</code> if this leave master is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this leave master is a draft.
	 *
	 * @return <code>true</code> if this leave master is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this leave master is expired.
	 *
	 * @return <code>true</code> if this leave master is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this leave master is inactive.
	 *
	 * @return <code>true</code> if this leave master is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this leave master is incomplete.
	 *
	 * @return <code>true</code> if this leave master is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this leave master is pending.
	 *
	 * @return <code>true</code> if this leave master is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this leave master is scheduled.
	 *
	 * @return <code>true</code> if this leave master is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public LeaveMaster cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}