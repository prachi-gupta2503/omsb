/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the EcMemberRequest service. Represents a row in the &quot;ec_member_request&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.EcMemberRequestModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.EcMemberRequestImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EcMemberRequest
 * @generated
 */
@ProviderType
public interface EcMemberRequestModel
	extends BaseModel<EcMemberRequest>, GroupedModel, LocalizedModel,
			ShardedModel, StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a ec member request model instance should use the {@link EcMemberRequest} interface instead.
	 */

	/**
	 * Returns the primary key of this ec member request.
	 *
	 * @return the primary key of this ec member request
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this ec member request.
	 *
	 * @param primaryKey the primary key of this ec member request
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this ec member request.
	 *
	 * @return the uuid of this ec member request
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this ec member request.
	 *
	 * @param uuid the uuid of this ec member request
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the ec member request ID of this ec member request.
	 *
	 * @return the ec member request ID of this ec member request
	 */
	public long getEcMemberRequestId();

	/**
	 * Sets the ec member request ID of this ec member request.
	 *
	 * @param ecMemberRequestId the ec member request ID of this ec member request
	 */
	public void setEcMemberRequestId(long ecMemberRequestId);

	/**
	 * Returns the group ID of this ec member request.
	 *
	 * @return the group ID of this ec member request
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this ec member request.
	 *
	 * @param groupId the group ID of this ec member request
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this ec member request.
	 *
	 * @return the company ID of this ec member request
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this ec member request.
	 *
	 * @param companyId the company ID of this ec member request
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this ec member request.
	 *
	 * @return the create date of this ec member request
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this ec member request.
	 *
	 * @param createDate the create date of this ec member request
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this ec member request.
	 *
	 * @return the modified date of this ec member request
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this ec member request.
	 *
	 * @param modifiedDate the modified date of this ec member request
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the program ID of this ec member request.
	 *
	 * @return the program ID of this ec member request
	 */
	public long getProgramId();

	/**
	 * Sets the program ID of this ec member request.
	 *
	 * @param programId the program ID of this ec member request
	 */
	public void setProgramId(long programId);

	/**
	 * Returns the potential ec member ID of this ec member request.
	 *
	 * @return the potential ec member ID of this ec member request
	 */
	public long getPotentialEcMemberId();

	/**
	 * Sets the potential ec member ID of this ec member request.
	 *
	 * @param potentialEcMemberId the potential ec member ID of this ec member request
	 */
	public void setPotentialEcMemberId(long potentialEcMemberId);

	/**
	 * Returns the potential ec member role ID of this ec member request.
	 *
	 * @return the potential ec member role ID of this ec member request
	 */
	public long getPotentialEcMemberRoleId();

	/**
	 * Sets the potential ec member role ID of this ec member request.
	 *
	 * @param potentialEcMemberRoleId the potential ec member role ID of this ec member request
	 */
	public void setPotentialEcMemberRoleId(long potentialEcMemberRoleId);

	/**
	 * Returns the latest ec member request state ID of this ec member request.
	 *
	 * @return the latest ec member request state ID of this ec member request
	 */
	public long getLatestEcMemberRequestStateId();

	/**
	 * Sets the latest ec member request state ID of this ec member request.
	 *
	 * @param latestEcMemberRequestStateId the latest ec member request state ID of this ec member request
	 */
	public void setLatestEcMemberRequestStateId(
		long latestEcMemberRequestStateId);

	/**
	 * Returns the covering letter ID of this ec member request.
	 *
	 * @return the covering letter ID of this ec member request
	 */
	public long getCoveringLetterId();

	/**
	 * Sets the covering letter ID of this ec member request.
	 *
	 * @param coveringLetterId the covering letter ID of this ec member request
	 */
	public void setCoveringLetterId(long coveringLetterId);

	/**
	 * Returns the cv ID of this ec member request.
	 *
	 * @return the cv ID of this ec member request
	 */
	public long getCvId();

	/**
	 * Sets the cv ID of this ec member request.
	 *
	 * @param cvId the cv ID of this ec member request
	 */
	public void setCvId(long cvId);

	/**
	 * Returns the no objection letter ID of this ec member request.
	 *
	 * @return the no objection letter ID of this ec member request
	 */
	public long getNoObjectionLetterId();

	/**
	 * Sets the no objection letter ID of this ec member request.
	 *
	 * @param noObjectionLetterId the no objection letter ID of this ec member request
	 */
	public void setNoObjectionLetterId(long noObjectionLetterId);

	/**
	 * Returns the passport copy ID of this ec member request.
	 *
	 * @return the passport copy ID of this ec member request
	 */
	public long getPassportCopyId();

	/**
	 * Sets the passport copy ID of this ec member request.
	 *
	 * @param passportCopyId the passport copy ID of this ec member request
	 */
	public void setPassportCopyId(long passportCopyId);

	/**
	 * Returns the national ID copy ID of this ec member request.
	 *
	 * @return the national ID copy ID of this ec member request
	 */
	public long getNationalIdCopyId();

	/**
	 * Sets the national ID copy ID of this ec member request.
	 *
	 * @param nationalIdCopyId the national ID copy ID of this ec member request
	 */
	public void setNationalIdCopyId(long nationalIdCopyId);

	/**
	 * Returns the qarar request ID of this ec member request.
	 *
	 * @return the qarar request ID of this ec member request
	 */
	public long getQararRequestId();

	/**
	 * Sets the qarar request ID of this ec member request.
	 *
	 * @param qararRequestId the qarar request ID of this ec member request
	 */
	public void setQararRequestId(long qararRequestId);

	/**
	 * Returns the qarar doc ID of this ec member request.
	 *
	 * @return the qarar doc ID of this ec member request
	 */
	public long getQararDocId();

	/**
	 * Sets the qarar doc ID of this ec member request.
	 *
	 * @param qararDocId the qarar doc ID of this ec member request
	 */
	public void setQararDocId(long qararDocId);

	/**
	 * Returns the comments of this ec member request.
	 *
	 * @return the comments of this ec member request
	 */
	public String getComments();

	/**
	 * Returns the localized comments of this ec member request in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized comments of this ec member request
	 */
	@AutoEscape
	public String getComments(Locale locale);

	/**
	 * Returns the localized comments of this ec member request in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized comments of this ec member request. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getComments(Locale locale, boolean useDefault);

	/**
	 * Returns the localized comments of this ec member request in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized comments of this ec member request
	 */
	@AutoEscape
	public String getComments(String languageId);

	/**
	 * Returns the localized comments of this ec member request in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized comments of this ec member request
	 */
	@AutoEscape
	public String getComments(String languageId, boolean useDefault);

	@AutoEscape
	public String getCommentsCurrentLanguageId();

	@AutoEscape
	public String getCommentsCurrentValue();

	/**
	 * Returns a map of the locales and localized commentses of this ec member request.
	 *
	 * @return the locales and localized commentses of this ec member request
	 */
	public Map<Locale, String> getCommentsMap();

	/**
	 * Sets the comments of this ec member request.
	 *
	 * @param comments the comments of this ec member request
	 */
	public void setComments(String comments);

	/**
	 * Sets the localized comments of this ec member request in the language.
	 *
	 * @param comments the localized comments of this ec member request
	 * @param locale the locale of the language
	 */
	public void setComments(String comments, Locale locale);

	/**
	 * Sets the localized comments of this ec member request in the language, and sets the default locale.
	 *
	 * @param comments the localized comments of this ec member request
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setComments(
		String comments, Locale locale, Locale defaultLocale);

	public void setCommentsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized commentses of this ec member request from the map of locales and localized commentses.
	 *
	 * @param commentsMap the locales and localized commentses of this ec member request
	 */
	public void setCommentsMap(Map<Locale, String> commentsMap);

	/**
	 * Sets the localized commentses of this ec member request from the map of locales and localized commentses, and sets the default locale.
	 *
	 * @param commentsMap the locales and localized commentses of this ec member request
	 * @param defaultLocale the default locale
	 */
	public void setCommentsMap(
		Map<Locale, String> commentsMap, Locale defaultLocale);

	/**
	 * Returns the potential ec member lruserid of this ec member request.
	 *
	 * @return the potential ec member lruserid of this ec member request
	 */
	public long getPotentialEcMemberLruserid();

	/**
	 * Sets the potential ec member lruserid of this ec member request.
	 *
	 * @param potentialEcMemberLruserid the potential ec member lruserid of this ec member request
	 */
	public void setPotentialEcMemberLruserid(long potentialEcMemberLruserid);

	/**
	 * Returns the status of this ec member request.
	 *
	 * @return the status of this ec member request
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this ec member request.
	 *
	 * @param status the status of this ec member request
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this ec member request.
	 *
	 * @return the status by user ID of this ec member request
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this ec member request.
	 *
	 * @param statusByUserId the status by user ID of this ec member request
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this ec member request.
	 *
	 * @return the status by user uuid of this ec member request
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this ec member request.
	 *
	 * @param statusByUserUuid the status by user uuid of this ec member request
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this ec member request.
	 *
	 * @return the status by user name of this ec member request
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this ec member request.
	 *
	 * @param statusByUserName the status by user name of this ec member request
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this ec member request.
	 *
	 * @return the status date of this ec member request
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this ec member request.
	 *
	 * @param statusDate the status date of this ec member request
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the user name of this ec member request.
	 *
	 * @return the user name of this ec member request
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this ec member request.
	 *
	 * @param userName the user name of this ec member request
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the user ID of this ec member request.
	 *
	 * @return the user ID of this ec member request
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this ec member request.
	 *
	 * @param userId the user ID of this ec member request
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this ec member request.
	 *
	 * @return the user uuid of this ec member request
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this ec member request.
	 *
	 * @param userUuid the user uuid of this ec member request
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns <code>true</code> if this ec member request is approved.
	 *
	 * @return <code>true</code> if this ec member request is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this ec member request is denied.
	 *
	 * @return <code>true</code> if this ec member request is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this ec member request is a draft.
	 *
	 * @return <code>true</code> if this ec member request is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this ec member request is expired.
	 *
	 * @return <code>true</code> if this ec member request is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this ec member request is inactive.
	 *
	 * @return <code>true</code> if this ec member request is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this ec member request is incomplete.
	 *
	 * @return <code>true</code> if this ec member request is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this ec member request is pending.
	 *
	 * @return <code>true</code> if this ec member request is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this ec member request is scheduled.
	 *
	 * @return <code>true</code> if this ec member request is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public EcMemberRequest cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}