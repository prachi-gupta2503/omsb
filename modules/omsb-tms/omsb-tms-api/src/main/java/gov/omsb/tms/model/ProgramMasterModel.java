/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the ProgramMaster service. Represents a row in the &quot;program_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.ProgramMasterModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.ProgramMasterImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProgramMaster
 * @generated
 */
@ProviderType
public interface ProgramMasterModel
	extends BaseModel<ProgramMaster>, LocalizedModel, ShardedModel,
			StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a program master model instance should use the {@link ProgramMaster} interface instead.
	 */

	/**
	 * Returns the primary key of this program master.
	 *
	 * @return the primary key of this program master
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this program master.
	 *
	 * @param primaryKey the primary key of this program master
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this program master.
	 *
	 * @return the uuid of this program master
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this program master.
	 *
	 * @param uuid the uuid of this program master
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the program master ID of this program master.
	 *
	 * @return the program master ID of this program master
	 */
	public long getProgramMasterId();

	/**
	 * Sets the program master ID of this program master.
	 *
	 * @param programMasterId the program master ID of this program master
	 */
	public void setProgramMasterId(long programMasterId);

	/**
	 * Returns the program type ID of this program master.
	 *
	 * @return the program type ID of this program master
	 */
	public long getProgramTypeId();

	/**
	 * Sets the program type ID of this program master.
	 *
	 * @param programTypeId the program type ID of this program master
	 */
	public void setProgramTypeId(long programTypeId);

	/**
	 * Returns the group ID of this program master.
	 *
	 * @return the group ID of this program master
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this program master.
	 *
	 * @param groupId the group ID of this program master
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this program master.
	 *
	 * @return the company ID of this program master
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this program master.
	 *
	 * @param companyId the company ID of this program master
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this program master.
	 *
	 * @return the create date of this program master
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this program master.
	 *
	 * @param createDate the create date of this program master
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this program master.
	 *
	 * @return the modified date of this program master
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this program master.
	 *
	 * @param modifiedDate the modified date of this program master
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the program code of this program master.
	 *
	 * @return the program code of this program master
	 */
	public String getProgramCode();

	/**
	 * Returns the localized program code of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program code of this program master
	 */
	@AutoEscape
	public String getProgramCode(Locale locale);

	/**
	 * Returns the localized program code of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program code of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramCode(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program code of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program code of this program master
	 */
	@AutoEscape
	public String getProgramCode(String languageId);

	/**
	 * Returns the localized program code of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program code of this program master
	 */
	@AutoEscape
	public String getProgramCode(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramCodeCurrentLanguageId();

	@AutoEscape
	public String getProgramCodeCurrentValue();

	/**
	 * Returns a map of the locales and localized program codes of this program master.
	 *
	 * @return the locales and localized program codes of this program master
	 */
	public Map<Locale, String> getProgramCodeMap();

	/**
	 * Sets the program code of this program master.
	 *
	 * @param programCode the program code of this program master
	 */
	public void setProgramCode(String programCode);

	/**
	 * Sets the localized program code of this program master in the language.
	 *
	 * @param programCode the localized program code of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramCode(String programCode, Locale locale);

	/**
	 * Sets the localized program code of this program master in the language, and sets the default locale.
	 *
	 * @param programCode the localized program code of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramCode(
		String programCode, Locale locale, Locale defaultLocale);

	public void setProgramCodeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized program codes of this program master from the map of locales and localized program codes.
	 *
	 * @param programCodeMap the locales and localized program codes of this program master
	 */
	public void setProgramCodeMap(Map<Locale, String> programCodeMap);

	/**
	 * Sets the localized program codes of this program master from the map of locales and localized program codes, and sets the default locale.
	 *
	 * @param programCodeMap the locales and localized program codes of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramCodeMap(
		Map<Locale, String> programCodeMap, Locale defaultLocale);

	/**
	 * Returns the program name of this program master.
	 *
	 * @return the program name of this program master
	 */
	public String getProgramName();

	/**
	 * Returns the localized program name of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program name of this program master
	 */
	@AutoEscape
	public String getProgramName(Locale locale);

	/**
	 * Returns the localized program name of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program name of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program name of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program name of this program master
	 */
	@AutoEscape
	public String getProgramName(String languageId);

	/**
	 * Returns the localized program name of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program name of this program master
	 */
	@AutoEscape
	public String getProgramName(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramNameCurrentLanguageId();

	@AutoEscape
	public String getProgramNameCurrentValue();

	/**
	 * Returns a map of the locales and localized program names of this program master.
	 *
	 * @return the locales and localized program names of this program master
	 */
	public Map<Locale, String> getProgramNameMap();

	/**
	 * Sets the program name of this program master.
	 *
	 * @param programName the program name of this program master
	 */
	public void setProgramName(String programName);

	/**
	 * Sets the localized program name of this program master in the language.
	 *
	 * @param programName the localized program name of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramName(String programName, Locale locale);

	/**
	 * Sets the localized program name of this program master in the language, and sets the default locale.
	 *
	 * @param programName the localized program name of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramName(
		String programName, Locale locale, Locale defaultLocale);

	public void setProgramNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized program names of this program master from the map of locales and localized program names.
	 *
	 * @param programNameMap the locales and localized program names of this program master
	 */
	public void setProgramNameMap(Map<Locale, String> programNameMap);

	/**
	 * Sets the localized program names of this program master from the map of locales and localized program names, and sets the default locale.
	 *
	 * @param programNameMap the locales and localized program names of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramNameMap(
		Map<Locale, String> programNameMap, Locale defaultLocale);

	/**
	 * Returns the program description of this program master.
	 *
	 * @return the program description of this program master
	 */
	public String getProgramDescription();

	/**
	 * Returns the localized program description of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program description of this program master
	 */
	@AutoEscape
	public String getProgramDescription(Locale locale);

	/**
	 * Returns the localized program description of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program description of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program description of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program description of this program master
	 */
	@AutoEscape
	public String getProgramDescription(String languageId);

	/**
	 * Returns the localized program description of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program description of this program master
	 */
	@AutoEscape
	public String getProgramDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramDescriptionCurrentLanguageId();

	@AutoEscape
	public String getProgramDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized program descriptions of this program master.
	 *
	 * @return the locales and localized program descriptions of this program master
	 */
	public Map<Locale, String> getProgramDescriptionMap();

	/**
	 * Sets the program description of this program master.
	 *
	 * @param programDescription the program description of this program master
	 */
	public void setProgramDescription(String programDescription);

	/**
	 * Sets the localized program description of this program master in the language.
	 *
	 * @param programDescription the localized program description of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramDescription(String programDescription, Locale locale);

	/**
	 * Sets the localized program description of this program master in the language, and sets the default locale.
	 *
	 * @param programDescription the localized program description of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramDescription(
		String programDescription, Locale locale, Locale defaultLocale);

	public void setProgramDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized program descriptions of this program master from the map of locales and localized program descriptions.
	 *
	 * @param programDescriptionMap the locales and localized program descriptions of this program master
	 */
	public void setProgramDescriptionMap(
		Map<Locale, String> programDescriptionMap);

	/**
	 * Sets the localized program descriptions of this program master from the map of locales and localized program descriptions, and sets the default locale.
	 *
	 * @param programDescriptionMap the locales and localized program descriptions of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramDescriptionMap(
		Map<Locale, String> programDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the establishment date of this program master.
	 *
	 * @return the establishment date of this program master
	 */
	public Date getEstablishmentDate();

	/**
	 * Sets the establishment date of this program master.
	 *
	 * @param establishmentDate the establishment date of this program master
	 */
	public void setEstablishmentDate(Date establishmentDate);

	/**
	 * Returns the program vision of this program master.
	 *
	 * @return the program vision of this program master
	 */
	public String getProgramVision();

	/**
	 * Returns the localized program vision of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program vision of this program master
	 */
	@AutoEscape
	public String getProgramVision(Locale locale);

	/**
	 * Returns the localized program vision of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program vision of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramVision(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program vision of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program vision of this program master
	 */
	@AutoEscape
	public String getProgramVision(String languageId);

	/**
	 * Returns the localized program vision of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program vision of this program master
	 */
	@AutoEscape
	public String getProgramVision(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramVisionCurrentLanguageId();

	@AutoEscape
	public String getProgramVisionCurrentValue();

	/**
	 * Returns a map of the locales and localized program visions of this program master.
	 *
	 * @return the locales and localized program visions of this program master
	 */
	public Map<Locale, String> getProgramVisionMap();

	/**
	 * Sets the program vision of this program master.
	 *
	 * @param programVision the program vision of this program master
	 */
	public void setProgramVision(String programVision);

	/**
	 * Sets the localized program vision of this program master in the language.
	 *
	 * @param programVision the localized program vision of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramVision(String programVision, Locale locale);

	/**
	 * Sets the localized program vision of this program master in the language, and sets the default locale.
	 *
	 * @param programVision the localized program vision of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramVision(
		String programVision, Locale locale, Locale defaultLocale);

	public void setProgramVisionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized program visions of this program master from the map of locales and localized program visions.
	 *
	 * @param programVisionMap the locales and localized program visions of this program master
	 */
	public void setProgramVisionMap(Map<Locale, String> programVisionMap);

	/**
	 * Sets the localized program visions of this program master from the map of locales and localized program visions, and sets the default locale.
	 *
	 * @param programVisionMap the locales and localized program visions of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramVisionMap(
		Map<Locale, String> programVisionMap, Locale defaultLocale);

	/**
	 * Returns the program mission of this program master.
	 *
	 * @return the program mission of this program master
	 */
	public String getProgramMission();

	/**
	 * Returns the localized program mission of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program mission of this program master
	 */
	@AutoEscape
	public String getProgramMission(Locale locale);

	/**
	 * Returns the localized program mission of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program mission of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramMission(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program mission of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program mission of this program master
	 */
	@AutoEscape
	public String getProgramMission(String languageId);

	/**
	 * Returns the localized program mission of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program mission of this program master
	 */
	@AutoEscape
	public String getProgramMission(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramMissionCurrentLanguageId();

	@AutoEscape
	public String getProgramMissionCurrentValue();

	/**
	 * Returns a map of the locales and localized program missions of this program master.
	 *
	 * @return the locales and localized program missions of this program master
	 */
	public Map<Locale, String> getProgramMissionMap();

	/**
	 * Sets the program mission of this program master.
	 *
	 * @param programMission the program mission of this program master
	 */
	public void setProgramMission(String programMission);

	/**
	 * Sets the localized program mission of this program master in the language.
	 *
	 * @param programMission the localized program mission of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramMission(String programMission, Locale locale);

	/**
	 * Sets the localized program mission of this program master in the language, and sets the default locale.
	 *
	 * @param programMission the localized program mission of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramMission(
		String programMission, Locale locale, Locale defaultLocale);

	public void setProgramMissionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized program missions of this program master from the map of locales and localized program missions.
	 *
	 * @param programMissionMap the locales and localized program missions of this program master
	 */
	public void setProgramMissionMap(Map<Locale, String> programMissionMap);

	/**
	 * Sets the localized program missions of this program master from the map of locales and localized program missions, and sets the default locale.
	 *
	 * @param programMissionMap the locales and localized program missions of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramMissionMap(
		Map<Locale, String> programMissionMap, Locale defaultLocale);

	/**
	 * Returns the program status of this program master.
	 *
	 * @return the program status of this program master
	 */
	public Boolean getProgramStatus();

	/**
	 * Sets the program status of this program master.
	 *
	 * @param programStatus the program status of this program master
	 */
	public void setProgramStatus(Boolean programStatus);

	/**
	 * Returns the program objectives of this program master.
	 *
	 * @return the program objectives of this program master
	 */
	public String getProgramObjectives();

	/**
	 * Returns the localized program objectives of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program objectives of this program master
	 */
	@AutoEscape
	public String getProgramObjectives(Locale locale);

	/**
	 * Returns the localized program objectives of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program objectives of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramObjectives(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program objectives of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program objectives of this program master
	 */
	@AutoEscape
	public String getProgramObjectives(String languageId);

	/**
	 * Returns the localized program objectives of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program objectives of this program master
	 */
	@AutoEscape
	public String getProgramObjectives(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramObjectivesCurrentLanguageId();

	@AutoEscape
	public String getProgramObjectivesCurrentValue();

	/**
	 * Returns a map of the locales and localized program objectiveses of this program master.
	 *
	 * @return the locales and localized program objectiveses of this program master
	 */
	public Map<Locale, String> getProgramObjectivesMap();

	/**
	 * Sets the program objectives of this program master.
	 *
	 * @param programObjectives the program objectives of this program master
	 */
	public void setProgramObjectives(String programObjectives);

	/**
	 * Sets the localized program objectives of this program master in the language.
	 *
	 * @param programObjectives the localized program objectives of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramObjectives(String programObjectives, Locale locale);

	/**
	 * Sets the localized program objectives of this program master in the language, and sets the default locale.
	 *
	 * @param programObjectives the localized program objectives of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramObjectives(
		String programObjectives, Locale locale, Locale defaultLocale);

	public void setProgramObjectivesCurrentLanguageId(String languageId);

	/**
	 * Sets the localized program objectiveses of this program master from the map of locales and localized program objectiveses.
	 *
	 * @param programObjectivesMap the locales and localized program objectiveses of this program master
	 */
	public void setProgramObjectivesMap(
		Map<Locale, String> programObjectivesMap);

	/**
	 * Sets the localized program objectiveses of this program master from the map of locales and localized program objectiveses, and sets the default locale.
	 *
	 * @param programObjectivesMap the locales and localized program objectiveses of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramObjectivesMap(
		Map<Locale, String> programObjectivesMap, Locale defaultLocale);

	/**
	 * Returns the program admission requirements of this program master.
	 *
	 * @return the program admission requirements of this program master
	 */
	public String getProgramAdmissionRequirements();

	/**
	 * Returns the localized program admission requirements of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program admission requirements of this program master
	 */
	@AutoEscape
	public String getProgramAdmissionRequirements(Locale locale);

	/**
	 * Returns the localized program admission requirements of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program admission requirements of this program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgramAdmissionRequirements(
		Locale locale, boolean useDefault);

	/**
	 * Returns the localized program admission requirements of this program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program admission requirements of this program master
	 */
	@AutoEscape
	public String getProgramAdmissionRequirements(String languageId);

	/**
	 * Returns the localized program admission requirements of this program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program admission requirements of this program master
	 */
	@AutoEscape
	public String getProgramAdmissionRequirements(
		String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramAdmissionRequirementsCurrentLanguageId();

	@AutoEscape
	public String getProgramAdmissionRequirementsCurrentValue();

	/**
	 * Returns a map of the locales and localized program admission requirementses of this program master.
	 *
	 * @return the locales and localized program admission requirementses of this program master
	 */
	public Map<Locale, String> getProgramAdmissionRequirementsMap();

	/**
	 * Sets the program admission requirements of this program master.
	 *
	 * @param programAdmissionRequirements the program admission requirements of this program master
	 */
	public void setProgramAdmissionRequirements(
		String programAdmissionRequirements);

	/**
	 * Sets the localized program admission requirements of this program master in the language.
	 *
	 * @param programAdmissionRequirements the localized program admission requirements of this program master
	 * @param locale the locale of the language
	 */
	public void setProgramAdmissionRequirements(
		String programAdmissionRequirements, Locale locale);

	/**
	 * Sets the localized program admission requirements of this program master in the language, and sets the default locale.
	 *
	 * @param programAdmissionRequirements the localized program admission requirements of this program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgramAdmissionRequirements(
		String programAdmissionRequirements, Locale locale,
		Locale defaultLocale);

	public void setProgramAdmissionRequirementsCurrentLanguageId(
		String languageId);

	/**
	 * Sets the localized program admission requirementses of this program master from the map of locales and localized program admission requirementses.
	 *
	 * @param programAdmissionRequirementsMap the locales and localized program admission requirementses of this program master
	 */
	public void setProgramAdmissionRequirementsMap(
		Map<Locale, String> programAdmissionRequirementsMap);

	/**
	 * Sets the localized program admission requirementses of this program master from the map of locales and localized program admission requirementses, and sets the default locale.
	 *
	 * @param programAdmissionRequirementsMap the locales and localized program admission requirementses of this program master
	 * @param defaultLocale the default locale
	 */
	public void setProgramAdmissionRequirementsMap(
		Map<Locale, String> programAdmissionRequirementsMap,
		Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public ProgramMaster cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}