/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the LeaveProgramMaster service. Represents a row in the &quot;leave_program_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.LeaveProgramMasterModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.LeaveProgramMasterImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LeaveProgramMaster
 * @generated
 */
@ProviderType
public interface LeaveProgramMasterModel
	extends BaseModel<LeaveProgramMaster>, LocalizedModel, ShardedModel,
			StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a leave program master model instance should use the {@link LeaveProgramMaster} interface instead.
	 */

	/**
	 * Returns the primary key of this leave program master.
	 *
	 * @return the primary key of this leave program master
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this leave program master.
	 *
	 * @param primaryKey the primary key of this leave program master
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this leave program master.
	 *
	 * @return the uuid of this leave program master
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this leave program master.
	 *
	 * @param uuid the uuid of this leave program master
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the leave program master ID of this leave program master.
	 *
	 * @return the leave program master ID of this leave program master
	 */
	public long getLeaveProgramMasterId();

	/**
	 * Sets the leave program master ID of this leave program master.
	 *
	 * @param leaveProgramMasterId the leave program master ID of this leave program master
	 */
	public void setLeaveProgramMasterId(long leaveProgramMasterId);

	/**
	 * Returns the program master ID of this leave program master.
	 *
	 * @return the program master ID of this leave program master
	 */
	public long getProgramMasterId();

	/**
	 * Sets the program master ID of this leave program master.
	 *
	 * @param programMasterId the program master ID of this leave program master
	 */
	public void setProgramMasterId(long programMasterId);

	/**
	 * Returns the leave types ID of this leave program master.
	 *
	 * @return the leave types ID of this leave program master
	 */
	public long getLeaveTypesId();

	/**
	 * Sets the leave types ID of this leave program master.
	 *
	 * @param leaveTypesId the leave types ID of this leave program master
	 */
	public void setLeaveTypesId(long leaveTypesId);

	/**
	 * Returns the no of leaves of this leave program master.
	 *
	 * @return the no of leaves of this leave program master
	 */
	public int getNoOfLeaves();

	/**
	 * Sets the no of leaves of this leave program master.
	 *
	 * @param noOfLeaves the no of leaves of this leave program master
	 */
	public void setNoOfLeaves(int noOfLeaves);

	/**
	 * Returns the resident level rule of this leave program master.
	 *
	 * @return the resident level rule of this leave program master
	 */
	public String getResidentLevelRule();

	/**
	 * Returns the localized resident level rule of this leave program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized resident level rule of this leave program master
	 */
	@AutoEscape
	public String getResidentLevelRule(Locale locale);

	/**
	 * Returns the localized resident level rule of this leave program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized resident level rule of this leave program master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getResidentLevelRule(Locale locale, boolean useDefault);

	/**
	 * Returns the localized resident level rule of this leave program master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized resident level rule of this leave program master
	 */
	@AutoEscape
	public String getResidentLevelRule(String languageId);

	/**
	 * Returns the localized resident level rule of this leave program master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized resident level rule of this leave program master
	 */
	@AutoEscape
	public String getResidentLevelRule(String languageId, boolean useDefault);

	@AutoEscape
	public String getResidentLevelRuleCurrentLanguageId();

	@AutoEscape
	public String getResidentLevelRuleCurrentValue();

	/**
	 * Returns a map of the locales and localized resident level rules of this leave program master.
	 *
	 * @return the locales and localized resident level rules of this leave program master
	 */
	public Map<Locale, String> getResidentLevelRuleMap();

	/**
	 * Sets the resident level rule of this leave program master.
	 *
	 * @param residentLevelRule the resident level rule of this leave program master
	 */
	public void setResidentLevelRule(String residentLevelRule);

	/**
	 * Sets the localized resident level rule of this leave program master in the language.
	 *
	 * @param residentLevelRule the localized resident level rule of this leave program master
	 * @param locale the locale of the language
	 */
	public void setResidentLevelRule(String residentLevelRule, Locale locale);

	/**
	 * Sets the localized resident level rule of this leave program master in the language, and sets the default locale.
	 *
	 * @param residentLevelRule the localized resident level rule of this leave program master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setResidentLevelRule(
		String residentLevelRule, Locale locale, Locale defaultLocale);

	public void setResidentLevelRuleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized resident level rules of this leave program master from the map of locales and localized resident level rules.
	 *
	 * @param residentLevelRuleMap the locales and localized resident level rules of this leave program master
	 */
	public void setResidentLevelRuleMap(
		Map<Locale, String> residentLevelRuleMap);

	/**
	 * Sets the localized resident level rules of this leave program master from the map of locales and localized resident level rules, and sets the default locale.
	 *
	 * @param residentLevelRuleMap the locales and localized resident level rules of this leave program master
	 * @param defaultLocale the default locale
	 */
	public void setResidentLevelRuleMap(
		Map<Locale, String> residentLevelRuleMap, Locale defaultLocale);

	/**
	 * Returns the group ID of this leave program master.
	 *
	 * @return the group ID of this leave program master
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this leave program master.
	 *
	 * @param groupId the group ID of this leave program master
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this leave program master.
	 *
	 * @return the company ID of this leave program master
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this leave program master.
	 *
	 * @param companyId the company ID of this leave program master
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this leave program master.
	 *
	 * @return the create date of this leave program master
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this leave program master.
	 *
	 * @param createDate the create date of this leave program master
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the created by of this leave program master.
	 *
	 * @return the created by of this leave program master
	 */
	public long getCreatedBy();

	/**
	 * Sets the created by of this leave program master.
	 *
	 * @param createdBy the created by of this leave program master
	 */
	public void setCreatedBy(long createdBy);

	/**
	 * Returns the modified date of this leave program master.
	 *
	 * @return the modified date of this leave program master
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this leave program master.
	 *
	 * @param modifiedDate the modified date of this leave program master
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the modified by of this leave program master.
	 *
	 * @return the modified by of this leave program master
	 */
	public long getModifiedBy();

	/**
	 * Sets the modified by of this leave program master.
	 *
	 * @param modifiedBy the modified by of this leave program master
	 */
	public void setModifiedBy(long modifiedBy);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public LeaveProgramMaster cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}