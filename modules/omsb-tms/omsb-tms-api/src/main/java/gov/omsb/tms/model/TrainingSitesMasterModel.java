/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the TrainingSitesMaster service. Represents a row in the &quot;training_sites_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.TrainingSitesMasterModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.TrainingSitesMasterImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TrainingSitesMaster
 * @generated
 */
@ProviderType
public interface TrainingSitesMasterModel
	extends BaseModel<TrainingSitesMaster>, LocalizedModel, ShardedModel,
			StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a training sites master model instance should use the {@link TrainingSitesMaster} interface instead.
	 */

	/**
	 * Returns the primary key of this training sites master.
	 *
	 * @return the primary key of this training sites master
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this training sites master.
	 *
	 * @param primaryKey the primary key of this training sites master
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this training sites master.
	 *
	 * @return the uuid of this training sites master
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this training sites master.
	 *
	 * @param uuid the uuid of this training sites master
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the training site master ID of this training sites master.
	 *
	 * @return the training site master ID of this training sites master
	 */
	public long getTrainingSiteMasterId();

	/**
	 * Sets the training site master ID of this training sites master.
	 *
	 * @param trainingSiteMasterId the training site master ID of this training sites master
	 */
	public void setTrainingSiteMasterId(long trainingSiteMasterId);

	/**
	 * Returns the group ID of this training sites master.
	 *
	 * @return the group ID of this training sites master
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this training sites master.
	 *
	 * @param groupId the group ID of this training sites master
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this training sites master.
	 *
	 * @return the company ID of this training sites master
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this training sites master.
	 *
	 * @param companyId the company ID of this training sites master
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this training sites master.
	 *
	 * @return the create date of this training sites master
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this training sites master.
	 *
	 * @param createDate the create date of this training sites master
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this training sites master.
	 *
	 * @return the modified date of this training sites master
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this training sites master.
	 *
	 * @param modifiedDate the modified date of this training sites master
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the training site name of this training sites master.
	 *
	 * @return the training site name of this training sites master
	 */
	public String getTrainingSiteName();

	/**
	 * Returns the localized training site name of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized training site name of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteName(Locale locale);

	/**
	 * Returns the localized training site name of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site name of this training sites master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTrainingSiteName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized training site name of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized training site name of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteName(String languageId);

	/**
	 * Returns the localized training site name of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site name of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteName(String languageId, boolean useDefault);

	@AutoEscape
	public String getTrainingSiteNameCurrentLanguageId();

	@AutoEscape
	public String getTrainingSiteNameCurrentValue();

	/**
	 * Returns a map of the locales and localized training site names of this training sites master.
	 *
	 * @return the locales and localized training site names of this training sites master
	 */
	public Map<Locale, String> getTrainingSiteNameMap();

	/**
	 * Sets the training site name of this training sites master.
	 *
	 * @param trainingSiteName the training site name of this training sites master
	 */
	public void setTrainingSiteName(String trainingSiteName);

	/**
	 * Sets the localized training site name of this training sites master in the language.
	 *
	 * @param trainingSiteName the localized training site name of this training sites master
	 * @param locale the locale of the language
	 */
	public void setTrainingSiteName(String trainingSiteName, Locale locale);

	/**
	 * Sets the localized training site name of this training sites master in the language, and sets the default locale.
	 *
	 * @param trainingSiteName the localized training site name of this training sites master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteName(
		String trainingSiteName, Locale locale, Locale defaultLocale);

	public void setTrainingSiteNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized training site names of this training sites master from the map of locales and localized training site names.
	 *
	 * @param trainingSiteNameMap the locales and localized training site names of this training sites master
	 */
	public void setTrainingSiteNameMap(Map<Locale, String> trainingSiteNameMap);

	/**
	 * Sets the localized training site names of this training sites master from the map of locales and localized training site names, and sets the default locale.
	 *
	 * @param trainingSiteNameMap the locales and localized training site names of this training sites master
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteNameMap(
		Map<Locale, String> trainingSiteNameMap, Locale defaultLocale);

	/**
	 * Returns the training site code of this training sites master.
	 *
	 * @return the training site code of this training sites master
	 */
	public String getTrainingSiteCode();

	/**
	 * Returns the localized training site code of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized training site code of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteCode(Locale locale);

	/**
	 * Returns the localized training site code of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site code of this training sites master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTrainingSiteCode(Locale locale, boolean useDefault);

	/**
	 * Returns the localized training site code of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized training site code of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteCode(String languageId);

	/**
	 * Returns the localized training site code of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site code of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteCode(String languageId, boolean useDefault);

	@AutoEscape
	public String getTrainingSiteCodeCurrentLanguageId();

	@AutoEscape
	public String getTrainingSiteCodeCurrentValue();

	/**
	 * Returns a map of the locales and localized training site codes of this training sites master.
	 *
	 * @return the locales and localized training site codes of this training sites master
	 */
	public Map<Locale, String> getTrainingSiteCodeMap();

	/**
	 * Sets the training site code of this training sites master.
	 *
	 * @param trainingSiteCode the training site code of this training sites master
	 */
	public void setTrainingSiteCode(String trainingSiteCode);

	/**
	 * Sets the localized training site code of this training sites master in the language.
	 *
	 * @param trainingSiteCode the localized training site code of this training sites master
	 * @param locale the locale of the language
	 */
	public void setTrainingSiteCode(String trainingSiteCode, Locale locale);

	/**
	 * Sets the localized training site code of this training sites master in the language, and sets the default locale.
	 *
	 * @param trainingSiteCode the localized training site code of this training sites master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteCode(
		String trainingSiteCode, Locale locale, Locale defaultLocale);

	public void setTrainingSiteCodeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized training site codes of this training sites master from the map of locales and localized training site codes.
	 *
	 * @param trainingSiteCodeMap the locales and localized training site codes of this training sites master
	 */
	public void setTrainingSiteCodeMap(Map<Locale, String> trainingSiteCodeMap);

	/**
	 * Sets the localized training site codes of this training sites master from the map of locales and localized training site codes, and sets the default locale.
	 *
	 * @param trainingSiteCodeMap the locales and localized training site codes of this training sites master
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteCodeMap(
		Map<Locale, String> trainingSiteCodeMap, Locale defaultLocale);

	/**
	 * Returns the training site status of this training sites master.
	 *
	 * @return the training site status of this training sites master
	 */
	public Boolean getTrainingSiteStatus();

	/**
	 * Sets the training site status of this training sites master.
	 *
	 * @param trainingSiteStatus the training site status of this training sites master
	 */
	public void setTrainingSiteStatus(Boolean trainingSiteStatus);

	/**
	 * Returns the training site address of this training sites master.
	 *
	 * @return the training site address of this training sites master
	 */
	public String getTrainingSiteAddress();

	/**
	 * Returns the localized training site address of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized training site address of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteAddress(Locale locale);

	/**
	 * Returns the localized training site address of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site address of this training sites master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTrainingSiteAddress(Locale locale, boolean useDefault);

	/**
	 * Returns the localized training site address of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized training site address of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteAddress(String languageId);

	/**
	 * Returns the localized training site address of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site address of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteAddress(String languageId, boolean useDefault);

	@AutoEscape
	public String getTrainingSiteAddressCurrentLanguageId();

	@AutoEscape
	public String getTrainingSiteAddressCurrentValue();

	/**
	 * Returns a map of the locales and localized training site addresses of this training sites master.
	 *
	 * @return the locales and localized training site addresses of this training sites master
	 */
	public Map<Locale, String> getTrainingSiteAddressMap();

	/**
	 * Sets the training site address of this training sites master.
	 *
	 * @param trainingSiteAddress the training site address of this training sites master
	 */
	public void setTrainingSiteAddress(String trainingSiteAddress);

	/**
	 * Sets the localized training site address of this training sites master in the language.
	 *
	 * @param trainingSiteAddress the localized training site address of this training sites master
	 * @param locale the locale of the language
	 */
	public void setTrainingSiteAddress(
		String trainingSiteAddress, Locale locale);

	/**
	 * Sets the localized training site address of this training sites master in the language, and sets the default locale.
	 *
	 * @param trainingSiteAddress the localized training site address of this training sites master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteAddress(
		String trainingSiteAddress, Locale locale, Locale defaultLocale);

	public void setTrainingSiteAddressCurrentLanguageId(String languageId);

	/**
	 * Sets the localized training site addresses of this training sites master from the map of locales and localized training site addresses.
	 *
	 * @param trainingSiteAddressMap the locales and localized training site addresses of this training sites master
	 */
	public void setTrainingSiteAddressMap(
		Map<Locale, String> trainingSiteAddressMap);

	/**
	 * Sets the localized training site addresses of this training sites master from the map of locales and localized training site addresses, and sets the default locale.
	 *
	 * @param trainingSiteAddressMap the locales and localized training site addresses of this training sites master
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteAddressMap(
		Map<Locale, String> trainingSiteAddressMap, Locale defaultLocale);

	/**
	 * Returns the training site description of this training sites master.
	 *
	 * @return the training site description of this training sites master
	 */
	public String getTrainingSiteDescription();

	/**
	 * Returns the localized training site description of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized training site description of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteDescription(Locale locale);

	/**
	 * Returns the localized training site description of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site description of this training sites master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTrainingSiteDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized training site description of this training sites master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized training site description of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteDescription(String languageId);

	/**
	 * Returns the localized training site description of this training sites master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized training site description of this training sites master
	 */
	@AutoEscape
	public String getTrainingSiteDescription(
		String languageId, boolean useDefault);

	@AutoEscape
	public String getTrainingSiteDescriptionCurrentLanguageId();

	@AutoEscape
	public String getTrainingSiteDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized training site descriptions of this training sites master.
	 *
	 * @return the locales and localized training site descriptions of this training sites master
	 */
	public Map<Locale, String> getTrainingSiteDescriptionMap();

	/**
	 * Sets the training site description of this training sites master.
	 *
	 * @param trainingSiteDescription the training site description of this training sites master
	 */
	public void setTrainingSiteDescription(String trainingSiteDescription);

	/**
	 * Sets the localized training site description of this training sites master in the language.
	 *
	 * @param trainingSiteDescription the localized training site description of this training sites master
	 * @param locale the locale of the language
	 */
	public void setTrainingSiteDescription(
		String trainingSiteDescription, Locale locale);

	/**
	 * Sets the localized training site description of this training sites master in the language, and sets the default locale.
	 *
	 * @param trainingSiteDescription the localized training site description of this training sites master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteDescription(
		String trainingSiteDescription, Locale locale, Locale defaultLocale);

	public void setTrainingSiteDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized training site descriptions of this training sites master from the map of locales and localized training site descriptions.
	 *
	 * @param trainingSiteDescriptionMap the locales and localized training site descriptions of this training sites master
	 */
	public void setTrainingSiteDescriptionMap(
		Map<Locale, String> trainingSiteDescriptionMap);

	/**
	 * Sets the localized training site descriptions of this training sites master from the map of locales and localized training site descriptions, and sets the default locale.
	 *
	 * @param trainingSiteDescriptionMap the locales and localized training site descriptions of this training sites master
	 * @param defaultLocale the default locale
	 */
	public void setTrainingSiteDescriptionMap(
		Map<Locale, String> trainingSiteDescriptionMap, Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public TrainingSitesMaster cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}