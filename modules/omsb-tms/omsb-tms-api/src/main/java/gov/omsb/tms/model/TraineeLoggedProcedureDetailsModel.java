/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the TraineeLoggedProcedureDetails service. Represents a row in the &quot;trainee_logged_procedure_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.TraineeLoggedProcedureDetailsModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.TraineeLoggedProcedureDetailsImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TraineeLoggedProcedureDetails
 * @generated
 */
@ProviderType
public interface TraineeLoggedProcedureDetailsModel
	extends BaseModel<TraineeLoggedProcedureDetails>, LocalizedModel,
			ShardedModel, StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a trainee logged procedure details model instance should use the {@link TraineeLoggedProcedureDetails} interface instead.
	 */

	/**
	 * Returns the primary key of this trainee logged procedure details.
	 *
	 * @return the primary key of this trainee logged procedure details
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this trainee logged procedure details.
	 *
	 * @param primaryKey the primary key of this trainee logged procedure details
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this trainee logged procedure details.
	 *
	 * @return the uuid of this trainee logged procedure details
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this trainee logged procedure details.
	 *
	 * @param uuid the uuid of this trainee logged procedure details
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the trainee logged procedure details ID of this trainee logged procedure details.
	 *
	 * @return the trainee logged procedure details ID of this trainee logged procedure details
	 */
	public long getTraineeLoggedProcedureDetailsId();

	/**
	 * Sets the trainee logged procedure details ID of this trainee logged procedure details.
	 *
	 * @param traineeLoggedProcedureDetailsId the trainee logged procedure details ID of this trainee logged procedure details
	 */
	public void setTraineeLoggedProcedureDetailsId(
		long traineeLoggedProcedureDetailsId);

	/**
	 * Returns the group ID of this trainee logged procedure details.
	 *
	 * @return the group ID of this trainee logged procedure details
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this trainee logged procedure details.
	 *
	 * @param groupId the group ID of this trainee logged procedure details
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this trainee logged procedure details.
	 *
	 * @return the company ID of this trainee logged procedure details
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this trainee logged procedure details.
	 *
	 * @param companyId the company ID of this trainee logged procedure details
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this trainee logged procedure details.
	 *
	 * @return the create date of this trainee logged procedure details
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this trainee logged procedure details.
	 *
	 * @param createDate the create date of this trainee logged procedure details
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the created by of this trainee logged procedure details.
	 *
	 * @return the created by of this trainee logged procedure details
	 */
	public long getCreatedBy();

	/**
	 * Sets the created by of this trainee logged procedure details.
	 *
	 * @param createdBy the created by of this trainee logged procedure details
	 */
	public void setCreatedBy(long createdBy);

	/**
	 * Returns the modified date of this trainee logged procedure details.
	 *
	 * @return the modified date of this trainee logged procedure details
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this trainee logged procedure details.
	 *
	 * @param modifiedDate the modified date of this trainee logged procedure details
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the modified by of this trainee logged procedure details.
	 *
	 * @return the modified by of this trainee logged procedure details
	 */
	public long getModifiedBy();

	/**
	 * Sets the modified by of this trainee logged procedure details.
	 *
	 * @param modifiedBy the modified by of this trainee logged procedure details
	 */
	public void setModifiedBy(long modifiedBy);

	/**
	 * Returns the program duration ID of this trainee logged procedure details.
	 *
	 * @return the program duration ID of this trainee logged procedure details
	 */
	public long getProgramDurationId();

	/**
	 * Sets the program duration ID of this trainee logged procedure details.
	 *
	 * @param programDurationId the program duration ID of this trainee logged procedure details
	 */
	public void setProgramDurationId(long programDurationId);

	/**
	 * Returns the rotation ID of this trainee logged procedure details.
	 *
	 * @return the rotation ID of this trainee logged procedure details
	 */
	public long getRotationId();

	/**
	 * Sets the rotation ID of this trainee logged procedure details.
	 *
	 * @param rotationId the rotation ID of this trainee logged procedure details
	 */
	public void setRotationId(long rotationId);

	/**
	 * Returns the trainee level ID of this trainee logged procedure details.
	 *
	 * @return the trainee level ID of this trainee logged procedure details
	 */
	public long getTraineeLevelId();

	/**
	 * Sets the trainee level ID of this trainee logged procedure details.
	 *
	 * @param traineeLevelId the trainee level ID of this trainee logged procedure details
	 */
	public void setTraineeLevelId(long traineeLevelId);

	/**
	 * Returns the procedure group ID of this trainee logged procedure details.
	 *
	 * @return the procedure group ID of this trainee logged procedure details
	 */
	public long getProcedureGroupId();

	/**
	 * Sets the procedure group ID of this trainee logged procedure details.
	 *
	 * @param procedureGroupId the procedure group ID of this trainee logged procedure details
	 */
	public void setProcedureGroupId(long procedureGroupId);

	/**
	 * Returns the procedure ID of this trainee logged procedure details.
	 *
	 * @return the procedure ID of this trainee logged procedure details
	 */
	public long getProcedureId();

	/**
	 * Sets the procedure ID of this trainee logged procedure details.
	 *
	 * @param procedureId the procedure ID of this trainee logged procedure details
	 */
	public void setProcedureId(long procedureId);

	/**
	 * Returns the gender ID of this trainee logged procedure details.
	 *
	 * @return the gender ID of this trainee logged procedure details
	 */
	public long getGenderId();

	/**
	 * Sets the gender ID of this trainee logged procedure details.
	 *
	 * @param genderId the gender ID of this trainee logged procedure details
	 */
	public void setGenderId(long genderId);

	/**
	 * Returns the patient type ID of this trainee logged procedure details.
	 *
	 * @return the patient type ID of this trainee logged procedure details
	 */
	public long getPatientTypeId();

	/**
	 * Sets the patient type ID of this trainee logged procedure details.
	 *
	 * @param patientTypeId the patient type ID of this trainee logged procedure details
	 */
	public void setPatientTypeId(long patientTypeId);

	/**
	 * Returns the visit type ID of this trainee logged procedure details.
	 *
	 * @return the visit type ID of this trainee logged procedure details
	 */
	public long getVisitTypeId();

	/**
	 * Sets the visit type ID of this trainee logged procedure details.
	 *
	 * @param visitTypeId the visit type ID of this trainee logged procedure details
	 */
	public void setVisitTypeId(long visitTypeId);

	/**
	 * Returns the cpt code of this trainee logged procedure details.
	 *
	 * @return the cpt code of this trainee logged procedure details
	 */
	public String getCptCode();

	/**
	 * Returns the localized cpt code of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized cpt code of this trainee logged procedure details
	 */
	@AutoEscape
	public String getCptCode(Locale locale);

	/**
	 * Returns the localized cpt code of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized cpt code of this trainee logged procedure details. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getCptCode(Locale locale, boolean useDefault);

	/**
	 * Returns the localized cpt code of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized cpt code of this trainee logged procedure details
	 */
	@AutoEscape
	public String getCptCode(String languageId);

	/**
	 * Returns the localized cpt code of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized cpt code of this trainee logged procedure details
	 */
	@AutoEscape
	public String getCptCode(String languageId, boolean useDefault);

	@AutoEscape
	public String getCptCodeCurrentLanguageId();

	@AutoEscape
	public String getCptCodeCurrentValue();

	/**
	 * Returns a map of the locales and localized cpt codes of this trainee logged procedure details.
	 *
	 * @return the locales and localized cpt codes of this trainee logged procedure details
	 */
	public Map<Locale, String> getCptCodeMap();

	/**
	 * Sets the cpt code of this trainee logged procedure details.
	 *
	 * @param cptCode the cpt code of this trainee logged procedure details
	 */
	public void setCptCode(String cptCode);

	/**
	 * Sets the localized cpt code of this trainee logged procedure details in the language.
	 *
	 * @param cptCode the localized cpt code of this trainee logged procedure details
	 * @param locale the locale of the language
	 */
	public void setCptCode(String cptCode, Locale locale);

	/**
	 * Sets the localized cpt code of this trainee logged procedure details in the language, and sets the default locale.
	 *
	 * @param cptCode the localized cpt code of this trainee logged procedure details
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setCptCode(String cptCode, Locale locale, Locale defaultLocale);

	public void setCptCodeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized cpt codes of this trainee logged procedure details from the map of locales and localized cpt codes.
	 *
	 * @param cptCodeMap the locales and localized cpt codes of this trainee logged procedure details
	 */
	public void setCptCodeMap(Map<Locale, String> cptCodeMap);

	/**
	 * Sets the localized cpt codes of this trainee logged procedure details from the map of locales and localized cpt codes, and sets the default locale.
	 *
	 * @param cptCodeMap the locales and localized cpt codes of this trainee logged procedure details
	 * @param defaultLocale the default locale
	 */
	public void setCptCodeMap(
		Map<Locale, String> cptCodeMap, Locale defaultLocale);

	/**
	 * Returns the training sites ID of this trainee logged procedure details.
	 *
	 * @return the training sites ID of this trainee logged procedure details
	 */
	public long getTrainingSitesId();

	/**
	 * Sets the training sites ID of this trainee logged procedure details.
	 *
	 * @param trainingSitesId the training sites ID of this trainee logged procedure details
	 */
	public void setTrainingSitesId(long trainingSitesId);

	/**
	 * Returns the role type ID of this trainee logged procedure details.
	 *
	 * @return the role type ID of this trainee logged procedure details
	 */
	public long getRoleTypeId();

	/**
	 * Sets the role type ID of this trainee logged procedure details.
	 *
	 * @param roleTypeId the role type ID of this trainee logged procedure details
	 */
	public void setRoleTypeId(long roleTypeId);

	/**
	 * Returns the faculty ID of this trainee logged procedure details.
	 *
	 * @return the faculty ID of this trainee logged procedure details
	 */
	public long getFacultyId();

	/**
	 * Sets the faculty ID of this trainee logged procedure details.
	 *
	 * @param facultyId the faculty ID of this trainee logged procedure details
	 */
	public void setFacultyId(long facultyId);

	/**
	 * Returns the trainee ID of this trainee logged procedure details.
	 *
	 * @return the trainee ID of this trainee logged procedure details
	 */
	public long getTraineeId();

	/**
	 * Sets the trainee ID of this trainee logged procedure details.
	 *
	 * @param traineeId the trainee ID of this trainee logged procedure details
	 */
	public void setTraineeId(long traineeId);

	/**
	 * Returns the patient ID of this trainee logged procedure details.
	 *
	 * @return the patient ID of this trainee logged procedure details
	 */
	@AutoEscape
	public String getPatientId();

	/**
	 * Sets the patient ID of this trainee logged procedure details.
	 *
	 * @param patientId the patient ID of this trainee logged procedure details
	 */
	public void setPatientId(String patientId);

	/**
	 * Returns the patient dob of this trainee logged procedure details.
	 *
	 * @return the patient dob of this trainee logged procedure details
	 */
	public Date getPatientDOB();

	/**
	 * Sets the patient dob of this trainee logged procedure details.
	 *
	 * @param patientDOB the patient dob of this trainee logged procedure details
	 */
	public void setPatientDOB(Date patientDOB);

	/**
	 * Returns the procedure performed date of this trainee logged procedure details.
	 *
	 * @return the procedure performed date of this trainee logged procedure details
	 */
	public Date getProcedurePerformedDate();

	/**
	 * Sets the procedure performed date of this trainee logged procedure details.
	 *
	 * @param procedurePerformedDate the procedure performed date of this trainee logged procedure details
	 */
	public void setProcedurePerformedDate(Date procedurePerformedDate);

	/**
	 * Returns the diagnosis description of this trainee logged procedure details.
	 *
	 * @return the diagnosis description of this trainee logged procedure details
	 */
	public String getDiagnosisDescription();

	/**
	 * Returns the localized diagnosis description of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized diagnosis description of this trainee logged procedure details
	 */
	@AutoEscape
	public String getDiagnosisDescription(Locale locale);

	/**
	 * Returns the localized diagnosis description of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized diagnosis description of this trainee logged procedure details. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDiagnosisDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized diagnosis description of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized diagnosis description of this trainee logged procedure details
	 */
	@AutoEscape
	public String getDiagnosisDescription(String languageId);

	/**
	 * Returns the localized diagnosis description of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized diagnosis description of this trainee logged procedure details
	 */
	@AutoEscape
	public String getDiagnosisDescription(
		String languageId, boolean useDefault);

	@AutoEscape
	public String getDiagnosisDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDiagnosisDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized diagnosis descriptions of this trainee logged procedure details.
	 *
	 * @return the locales and localized diagnosis descriptions of this trainee logged procedure details
	 */
	public Map<Locale, String> getDiagnosisDescriptionMap();

	/**
	 * Sets the diagnosis description of this trainee logged procedure details.
	 *
	 * @param diagnosisDescription the diagnosis description of this trainee logged procedure details
	 */
	public void setDiagnosisDescription(String diagnosisDescription);

	/**
	 * Sets the localized diagnosis description of this trainee logged procedure details in the language.
	 *
	 * @param diagnosisDescription the localized diagnosis description of this trainee logged procedure details
	 * @param locale the locale of the language
	 */
	public void setDiagnosisDescription(
		String diagnosisDescription, Locale locale);

	/**
	 * Sets the localized diagnosis description of this trainee logged procedure details in the language, and sets the default locale.
	 *
	 * @param diagnosisDescription the localized diagnosis description of this trainee logged procedure details
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDiagnosisDescription(
		String diagnosisDescription, Locale locale, Locale defaultLocale);

	public void setDiagnosisDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized diagnosis descriptions of this trainee logged procedure details from the map of locales and localized diagnosis descriptions.
	 *
	 * @param diagnosisDescriptionMap the locales and localized diagnosis descriptions of this trainee logged procedure details
	 */
	public void setDiagnosisDescriptionMap(
		Map<Locale, String> diagnosisDescriptionMap);

	/**
	 * Sets the localized diagnosis descriptions of this trainee logged procedure details from the map of locales and localized diagnosis descriptions, and sets the default locale.
	 *
	 * @param diagnosisDescriptionMap the locales and localized diagnosis descriptions of this trainee logged procedure details
	 * @param defaultLocale the default locale
	 */
	public void setDiagnosisDescriptionMap(
		Map<Locale, String> diagnosisDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the trainee comments of this trainee logged procedure details.
	 *
	 * @return the trainee comments of this trainee logged procedure details
	 */
	public String getTraineeComments();

	/**
	 * Returns the localized trainee comments of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized trainee comments of this trainee logged procedure details
	 */
	@AutoEscape
	public String getTraineeComments(Locale locale);

	/**
	 * Returns the localized trainee comments of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized trainee comments of this trainee logged procedure details. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTraineeComments(Locale locale, boolean useDefault);

	/**
	 * Returns the localized trainee comments of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized trainee comments of this trainee logged procedure details
	 */
	@AutoEscape
	public String getTraineeComments(String languageId);

	/**
	 * Returns the localized trainee comments of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized trainee comments of this trainee logged procedure details
	 */
	@AutoEscape
	public String getTraineeComments(String languageId, boolean useDefault);

	@AutoEscape
	public String getTraineeCommentsCurrentLanguageId();

	@AutoEscape
	public String getTraineeCommentsCurrentValue();

	/**
	 * Returns a map of the locales and localized trainee commentses of this trainee logged procedure details.
	 *
	 * @return the locales and localized trainee commentses of this trainee logged procedure details
	 */
	public Map<Locale, String> getTraineeCommentsMap();

	/**
	 * Sets the trainee comments of this trainee logged procedure details.
	 *
	 * @param traineeComments the trainee comments of this trainee logged procedure details
	 */
	public void setTraineeComments(String traineeComments);

	/**
	 * Sets the localized trainee comments of this trainee logged procedure details in the language.
	 *
	 * @param traineeComments the localized trainee comments of this trainee logged procedure details
	 * @param locale the locale of the language
	 */
	public void setTraineeComments(String traineeComments, Locale locale);

	/**
	 * Sets the localized trainee comments of this trainee logged procedure details in the language, and sets the default locale.
	 *
	 * @param traineeComments the localized trainee comments of this trainee logged procedure details
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTraineeComments(
		String traineeComments, Locale locale, Locale defaultLocale);

	public void setTraineeCommentsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized trainee commentses of this trainee logged procedure details from the map of locales and localized trainee commentses.
	 *
	 * @param traineeCommentsMap the locales and localized trainee commentses of this trainee logged procedure details
	 */
	public void setTraineeCommentsMap(Map<Locale, String> traineeCommentsMap);

	/**
	 * Sets the localized trainee commentses of this trainee logged procedure details from the map of locales and localized trainee commentses, and sets the default locale.
	 *
	 * @param traineeCommentsMap the locales and localized trainee commentses of this trainee logged procedure details
	 * @param defaultLocale the default locale
	 */
	public void setTraineeCommentsMap(
		Map<Locale, String> traineeCommentsMap, Locale defaultLocale);

	/**
	 * Returns the supervisor comments of this trainee logged procedure details.
	 *
	 * @return the supervisor comments of this trainee logged procedure details
	 */
	public String getSupervisorComments();

	/**
	 * Returns the localized supervisor comments of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized supervisor comments of this trainee logged procedure details
	 */
	@AutoEscape
	public String getSupervisorComments(Locale locale);

	/**
	 * Returns the localized supervisor comments of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized supervisor comments of this trainee logged procedure details. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSupervisorComments(Locale locale, boolean useDefault);

	/**
	 * Returns the localized supervisor comments of this trainee logged procedure details in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized supervisor comments of this trainee logged procedure details
	 */
	@AutoEscape
	public String getSupervisorComments(String languageId);

	/**
	 * Returns the localized supervisor comments of this trainee logged procedure details in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized supervisor comments of this trainee logged procedure details
	 */
	@AutoEscape
	public String getSupervisorComments(String languageId, boolean useDefault);

	@AutoEscape
	public String getSupervisorCommentsCurrentLanguageId();

	@AutoEscape
	public String getSupervisorCommentsCurrentValue();

	/**
	 * Returns a map of the locales and localized supervisor commentses of this trainee logged procedure details.
	 *
	 * @return the locales and localized supervisor commentses of this trainee logged procedure details
	 */
	public Map<Locale, String> getSupervisorCommentsMap();

	/**
	 * Sets the supervisor comments of this trainee logged procedure details.
	 *
	 * @param supervisorComments the supervisor comments of this trainee logged procedure details
	 */
	public void setSupervisorComments(String supervisorComments);

	/**
	 * Sets the localized supervisor comments of this trainee logged procedure details in the language.
	 *
	 * @param supervisorComments the localized supervisor comments of this trainee logged procedure details
	 * @param locale the locale of the language
	 */
	public void setSupervisorComments(String supervisorComments, Locale locale);

	/**
	 * Sets the localized supervisor comments of this trainee logged procedure details in the language, and sets the default locale.
	 *
	 * @param supervisorComments the localized supervisor comments of this trainee logged procedure details
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSupervisorComments(
		String supervisorComments, Locale locale, Locale defaultLocale);

	public void setSupervisorCommentsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized supervisor commentses of this trainee logged procedure details from the map of locales and localized supervisor commentses.
	 *
	 * @param supervisorCommentsMap the locales and localized supervisor commentses of this trainee logged procedure details
	 */
	public void setSupervisorCommentsMap(
		Map<Locale, String> supervisorCommentsMap);

	/**
	 * Sets the localized supervisor commentses of this trainee logged procedure details from the map of locales and localized supervisor commentses, and sets the default locale.
	 *
	 * @param supervisorCommentsMap the locales and localized supervisor commentses of this trainee logged procedure details
	 * @param defaultLocale the default locale
	 */
	public void setSupervisorCommentsMap(
		Map<Locale, String> supervisorCommentsMap, Locale defaultLocale);

	/**
	 * Returns the procedure status of this trainee logged procedure details.
	 *
	 * @return the procedure status of this trainee logged procedure details
	 */
	@AutoEscape
	public String getProcedureStatus();

	/**
	 * Sets the procedure status of this trainee logged procedure details.
	 *
	 * @param procedureStatus the procedure status of this trainee logged procedure details
	 */
	public void setProcedureStatus(String procedureStatus);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public TraineeLoggedProcedureDetails cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}