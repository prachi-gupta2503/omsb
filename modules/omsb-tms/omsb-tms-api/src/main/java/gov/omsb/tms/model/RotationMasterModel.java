/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the RotationMaster service. Represents a row in the &quot;rotation_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.RotationMasterModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.RotationMasterImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RotationMaster
 * @generated
 */
@ProviderType
public interface RotationMasterModel
	extends BaseModel<RotationMaster>, LocalizedModel, ShardedModel,
			StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a rotation master model instance should use the {@link RotationMaster} interface instead.
	 */

	/**
	 * Returns the primary key of this rotation master.
	 *
	 * @return the primary key of this rotation master
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this rotation master.
	 *
	 * @param primaryKey the primary key of this rotation master
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this rotation master.
	 *
	 * @return the uuid of this rotation master
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this rotation master.
	 *
	 * @param uuid the uuid of this rotation master
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the rotation master ID of this rotation master.
	 *
	 * @return the rotation master ID of this rotation master
	 */
	public long getRotationMasterId();

	/**
	 * Sets the rotation master ID of this rotation master.
	 *
	 * @param rotationMasterId the rotation master ID of this rotation master
	 */
	public void setRotationMasterId(long rotationMasterId);

	/**
	 * Returns the group ID of this rotation master.
	 *
	 * @return the group ID of this rotation master
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this rotation master.
	 *
	 * @param groupId the group ID of this rotation master
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this rotation master.
	 *
	 * @return the company ID of this rotation master
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this rotation master.
	 *
	 * @param companyId the company ID of this rotation master
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this rotation master.
	 *
	 * @return the create date of this rotation master
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this rotation master.
	 *
	 * @param createDate the create date of this rotation master
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this rotation master.
	 *
	 * @return the modified date of this rotation master
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this rotation master.
	 *
	 * @param modifiedDate the modified date of this rotation master
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the rotation code of this rotation master.
	 *
	 * @return the rotation code of this rotation master
	 */
	public String getRotationCode();

	/**
	 * Returns the localized rotation code of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized rotation code of this rotation master
	 */
	@AutoEscape
	public String getRotationCode(Locale locale);

	/**
	 * Returns the localized rotation code of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation code of this rotation master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRotationCode(Locale locale, boolean useDefault);

	/**
	 * Returns the localized rotation code of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized rotation code of this rotation master
	 */
	@AutoEscape
	public String getRotationCode(String languageId);

	/**
	 * Returns the localized rotation code of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation code of this rotation master
	 */
	@AutoEscape
	public String getRotationCode(String languageId, boolean useDefault);

	@AutoEscape
	public String getRotationCodeCurrentLanguageId();

	@AutoEscape
	public String getRotationCodeCurrentValue();

	/**
	 * Returns a map of the locales and localized rotation codes of this rotation master.
	 *
	 * @return the locales and localized rotation codes of this rotation master
	 */
	public Map<Locale, String> getRotationCodeMap();

	/**
	 * Sets the rotation code of this rotation master.
	 *
	 * @param rotationCode the rotation code of this rotation master
	 */
	public void setRotationCode(String rotationCode);

	/**
	 * Sets the localized rotation code of this rotation master in the language.
	 *
	 * @param rotationCode the localized rotation code of this rotation master
	 * @param locale the locale of the language
	 */
	public void setRotationCode(String rotationCode, Locale locale);

	/**
	 * Sets the localized rotation code of this rotation master in the language, and sets the default locale.
	 *
	 * @param rotationCode the localized rotation code of this rotation master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRotationCode(
		String rotationCode, Locale locale, Locale defaultLocale);

	public void setRotationCodeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized rotation codes of this rotation master from the map of locales and localized rotation codes.
	 *
	 * @param rotationCodeMap the locales and localized rotation codes of this rotation master
	 */
	public void setRotationCodeMap(Map<Locale, String> rotationCodeMap);

	/**
	 * Sets the localized rotation codes of this rotation master from the map of locales and localized rotation codes, and sets the default locale.
	 *
	 * @param rotationCodeMap the locales and localized rotation codes of this rotation master
	 * @param defaultLocale the default locale
	 */
	public void setRotationCodeMap(
		Map<Locale, String> rotationCodeMap, Locale defaultLocale);

	/**
	 * Returns the rotation short name of this rotation master.
	 *
	 * @return the rotation short name of this rotation master
	 */
	public String getRotationShortName();

	/**
	 * Returns the localized rotation short name of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized rotation short name of this rotation master
	 */
	@AutoEscape
	public String getRotationShortName(Locale locale);

	/**
	 * Returns the localized rotation short name of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation short name of this rotation master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRotationShortName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized rotation short name of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized rotation short name of this rotation master
	 */
	@AutoEscape
	public String getRotationShortName(String languageId);

	/**
	 * Returns the localized rotation short name of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation short name of this rotation master
	 */
	@AutoEscape
	public String getRotationShortName(String languageId, boolean useDefault);

	@AutoEscape
	public String getRotationShortNameCurrentLanguageId();

	@AutoEscape
	public String getRotationShortNameCurrentValue();

	/**
	 * Returns a map of the locales and localized rotation short names of this rotation master.
	 *
	 * @return the locales and localized rotation short names of this rotation master
	 */
	public Map<Locale, String> getRotationShortNameMap();

	/**
	 * Sets the rotation short name of this rotation master.
	 *
	 * @param rotationShortName the rotation short name of this rotation master
	 */
	public void setRotationShortName(String rotationShortName);

	/**
	 * Sets the localized rotation short name of this rotation master in the language.
	 *
	 * @param rotationShortName the localized rotation short name of this rotation master
	 * @param locale the locale of the language
	 */
	public void setRotationShortName(String rotationShortName, Locale locale);

	/**
	 * Sets the localized rotation short name of this rotation master in the language, and sets the default locale.
	 *
	 * @param rotationShortName the localized rotation short name of this rotation master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRotationShortName(
		String rotationShortName, Locale locale, Locale defaultLocale);

	public void setRotationShortNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized rotation short names of this rotation master from the map of locales and localized rotation short names.
	 *
	 * @param rotationShortNameMap the locales and localized rotation short names of this rotation master
	 */
	public void setRotationShortNameMap(
		Map<Locale, String> rotationShortNameMap);

	/**
	 * Sets the localized rotation short names of this rotation master from the map of locales and localized rotation short names, and sets the default locale.
	 *
	 * @param rotationShortNameMap the locales and localized rotation short names of this rotation master
	 * @param defaultLocale the default locale
	 */
	public void setRotationShortNameMap(
		Map<Locale, String> rotationShortNameMap, Locale defaultLocale);

	/**
	 * Returns the rotation name of this rotation master.
	 *
	 * @return the rotation name of this rotation master
	 */
	public String getRotationName();

	/**
	 * Returns the localized rotation name of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized rotation name of this rotation master
	 */
	@AutoEscape
	public String getRotationName(Locale locale);

	/**
	 * Returns the localized rotation name of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation name of this rotation master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRotationName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized rotation name of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized rotation name of this rotation master
	 */
	@AutoEscape
	public String getRotationName(String languageId);

	/**
	 * Returns the localized rotation name of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation name of this rotation master
	 */
	@AutoEscape
	public String getRotationName(String languageId, boolean useDefault);

	@AutoEscape
	public String getRotationNameCurrentLanguageId();

	@AutoEscape
	public String getRotationNameCurrentValue();

	/**
	 * Returns a map of the locales and localized rotation names of this rotation master.
	 *
	 * @return the locales and localized rotation names of this rotation master
	 */
	public Map<Locale, String> getRotationNameMap();

	/**
	 * Sets the rotation name of this rotation master.
	 *
	 * @param rotationName the rotation name of this rotation master
	 */
	public void setRotationName(String rotationName);

	/**
	 * Sets the localized rotation name of this rotation master in the language.
	 *
	 * @param rotationName the localized rotation name of this rotation master
	 * @param locale the locale of the language
	 */
	public void setRotationName(String rotationName, Locale locale);

	/**
	 * Sets the localized rotation name of this rotation master in the language, and sets the default locale.
	 *
	 * @param rotationName the localized rotation name of this rotation master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRotationName(
		String rotationName, Locale locale, Locale defaultLocale);

	public void setRotationNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized rotation names of this rotation master from the map of locales and localized rotation names.
	 *
	 * @param rotationNameMap the locales and localized rotation names of this rotation master
	 */
	public void setRotationNameMap(Map<Locale, String> rotationNameMap);

	/**
	 * Sets the localized rotation names of this rotation master from the map of locales and localized rotation names, and sets the default locale.
	 *
	 * @param rotationNameMap the locales and localized rotation names of this rotation master
	 * @param defaultLocale the default locale
	 */
	public void setRotationNameMap(
		Map<Locale, String> rotationNameMap, Locale defaultLocale);

	/**
	 * Returns the rotation status of this rotation master.
	 *
	 * @return the rotation status of this rotation master
	 */
	public Boolean getRotationStatus();

	/**
	 * Sets the rotation status of this rotation master.
	 *
	 * @param rotationStatus the rotation status of this rotation master
	 */
	public void setRotationStatus(Boolean rotationStatus);

	/**
	 * Returns the rotation objectives of this rotation master.
	 *
	 * @return the rotation objectives of this rotation master
	 */
	public String getRotationObjectives();

	/**
	 * Returns the localized rotation objectives of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized rotation objectives of this rotation master
	 */
	@AutoEscape
	public String getRotationObjectives(Locale locale);

	/**
	 * Returns the localized rotation objectives of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation objectives of this rotation master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRotationObjectives(Locale locale, boolean useDefault);

	/**
	 * Returns the localized rotation objectives of this rotation master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized rotation objectives of this rotation master
	 */
	@AutoEscape
	public String getRotationObjectives(String languageId);

	/**
	 * Returns the localized rotation objectives of this rotation master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rotation objectives of this rotation master
	 */
	@AutoEscape
	public String getRotationObjectives(String languageId, boolean useDefault);

	@AutoEscape
	public String getRotationObjectivesCurrentLanguageId();

	@AutoEscape
	public String getRotationObjectivesCurrentValue();

	/**
	 * Returns a map of the locales and localized rotation objectiveses of this rotation master.
	 *
	 * @return the locales and localized rotation objectiveses of this rotation master
	 */
	public Map<Locale, String> getRotationObjectivesMap();

	/**
	 * Sets the rotation objectives of this rotation master.
	 *
	 * @param rotationObjectives the rotation objectives of this rotation master
	 */
	public void setRotationObjectives(String rotationObjectives);

	/**
	 * Sets the localized rotation objectives of this rotation master in the language.
	 *
	 * @param rotationObjectives the localized rotation objectives of this rotation master
	 * @param locale the locale of the language
	 */
	public void setRotationObjectives(String rotationObjectives, Locale locale);

	/**
	 * Sets the localized rotation objectives of this rotation master in the language, and sets the default locale.
	 *
	 * @param rotationObjectives the localized rotation objectives of this rotation master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRotationObjectives(
		String rotationObjectives, Locale locale, Locale defaultLocale);

	public void setRotationObjectivesCurrentLanguageId(String languageId);

	/**
	 * Sets the localized rotation objectiveses of this rotation master from the map of locales and localized rotation objectiveses.
	 *
	 * @param rotationObjectivesMap the locales and localized rotation objectiveses of this rotation master
	 */
	public void setRotationObjectivesMap(
		Map<Locale, String> rotationObjectivesMap);

	/**
	 * Sets the localized rotation objectiveses of this rotation master from the map of locales and localized rotation objectiveses, and sets the default locale.
	 *
	 * @param rotationObjectivesMap the locales and localized rotation objectiveses of this rotation master
	 * @param defaultLocale the default locale
	 */
	public void setRotationObjectivesMap(
		Map<Locale, String> rotationObjectivesMap, Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public RotationMaster cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}