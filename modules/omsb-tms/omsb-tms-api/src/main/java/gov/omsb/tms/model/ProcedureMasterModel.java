/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the ProcedureMaster service. Represents a row in the &quot;procedure_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.ProcedureMasterModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.ProcedureMasterImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProcedureMaster
 * @generated
 */
@ProviderType
public interface ProcedureMasterModel
	extends BaseModel<ProcedureMaster>, LocalizedModel, ShardedModel,
			StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a procedure master model instance should use the {@link ProcedureMaster} interface instead.
	 */

	/**
	 * Returns the primary key of this procedure master.
	 *
	 * @return the primary key of this procedure master
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this procedure master.
	 *
	 * @param primaryKey the primary key of this procedure master
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this procedure master.
	 *
	 * @return the uuid of this procedure master
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this procedure master.
	 *
	 * @param uuid the uuid of this procedure master
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the procedure master ID of this procedure master.
	 *
	 * @return the procedure master ID of this procedure master
	 */
	public long getProcedureMasterId();

	/**
	 * Sets the procedure master ID of this procedure master.
	 *
	 * @param procedureMasterId the procedure master ID of this procedure master
	 */
	public void setProcedureMasterId(long procedureMasterId);

	/**
	 * Returns the procedure group master ID of this procedure master.
	 *
	 * @return the procedure group master ID of this procedure master
	 */
	public long getProcedureGroupMasterId();

	/**
	 * Sets the procedure group master ID of this procedure master.
	 *
	 * @param procedureGroupMasterId the procedure group master ID of this procedure master
	 */
	public void setProcedureGroupMasterId(long procedureGroupMasterId);

	/**
	 * Returns the group ID of this procedure master.
	 *
	 * @return the group ID of this procedure master
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this procedure master.
	 *
	 * @param groupId the group ID of this procedure master
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this procedure master.
	 *
	 * @return the company ID of this procedure master
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this procedure master.
	 *
	 * @param companyId the company ID of this procedure master
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this procedure master.
	 *
	 * @return the create date of this procedure master
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this procedure master.
	 *
	 * @param createDate the create date of this procedure master
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this procedure master.
	 *
	 * @return the modified date of this procedure master
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this procedure master.
	 *
	 * @param modifiedDate the modified date of this procedure master
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the created by of this procedure master.
	 *
	 * @return the created by of this procedure master
	 */
	public long getCreatedBy();

	/**
	 * Sets the created by of this procedure master.
	 *
	 * @param createdBy the created by of this procedure master
	 */
	public void setCreatedBy(long createdBy);

	/**
	 * Returns the modified by of this procedure master.
	 *
	 * @return the modified by of this procedure master
	 */
	public long getModifiedBy();

	/**
	 * Sets the modified by of this procedure master.
	 *
	 * @param modifiedBy the modified by of this procedure master
	 */
	public void setModifiedBy(long modifiedBy);

	/**
	 * Returns the procedure name of this procedure master.
	 *
	 * @return the procedure name of this procedure master
	 */
	public String getProcedureName();

	/**
	 * Returns the localized procedure name of this procedure master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized procedure name of this procedure master
	 */
	@AutoEscape
	public String getProcedureName(Locale locale);

	/**
	 * Returns the localized procedure name of this procedure master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized procedure name of this procedure master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProcedureName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized procedure name of this procedure master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized procedure name of this procedure master
	 */
	@AutoEscape
	public String getProcedureName(String languageId);

	/**
	 * Returns the localized procedure name of this procedure master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized procedure name of this procedure master
	 */
	@AutoEscape
	public String getProcedureName(String languageId, boolean useDefault);

	@AutoEscape
	public String getProcedureNameCurrentLanguageId();

	@AutoEscape
	public String getProcedureNameCurrentValue();

	/**
	 * Returns a map of the locales and localized procedure names of this procedure master.
	 *
	 * @return the locales and localized procedure names of this procedure master
	 */
	public Map<Locale, String> getProcedureNameMap();

	/**
	 * Sets the procedure name of this procedure master.
	 *
	 * @param procedureName the procedure name of this procedure master
	 */
	public void setProcedureName(String procedureName);

	/**
	 * Sets the localized procedure name of this procedure master in the language.
	 *
	 * @param procedureName the localized procedure name of this procedure master
	 * @param locale the locale of the language
	 */
	public void setProcedureName(String procedureName, Locale locale);

	/**
	 * Sets the localized procedure name of this procedure master in the language, and sets the default locale.
	 *
	 * @param procedureName the localized procedure name of this procedure master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProcedureName(
		String procedureName, Locale locale, Locale defaultLocale);

	public void setProcedureNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized procedure names of this procedure master from the map of locales and localized procedure names.
	 *
	 * @param procedureNameMap the locales and localized procedure names of this procedure master
	 */
	public void setProcedureNameMap(Map<Locale, String> procedureNameMap);

	/**
	 * Sets the localized procedure names of this procedure master from the map of locales and localized procedure names, and sets the default locale.
	 *
	 * @param procedureNameMap the locales and localized procedure names of this procedure master
	 * @param defaultLocale the default locale
	 */
	public void setProcedureNameMap(
		Map<Locale, String> procedureNameMap, Locale defaultLocale);

	/**
	 * Returns the cpt code of this procedure master.
	 *
	 * @return the cpt code of this procedure master
	 */
	public String getCptCode();

	/**
	 * Returns the localized cpt code of this procedure master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized cpt code of this procedure master
	 */
	@AutoEscape
	public String getCptCode(Locale locale);

	/**
	 * Returns the localized cpt code of this procedure master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized cpt code of this procedure master. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getCptCode(Locale locale, boolean useDefault);

	/**
	 * Returns the localized cpt code of this procedure master in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized cpt code of this procedure master
	 */
	@AutoEscape
	public String getCptCode(String languageId);

	/**
	 * Returns the localized cpt code of this procedure master in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized cpt code of this procedure master
	 */
	@AutoEscape
	public String getCptCode(String languageId, boolean useDefault);

	@AutoEscape
	public String getCptCodeCurrentLanguageId();

	@AutoEscape
	public String getCptCodeCurrentValue();

	/**
	 * Returns a map of the locales and localized cpt codes of this procedure master.
	 *
	 * @return the locales and localized cpt codes of this procedure master
	 */
	public Map<Locale, String> getCptCodeMap();

	/**
	 * Sets the cpt code of this procedure master.
	 *
	 * @param cptCode the cpt code of this procedure master
	 */
	public void setCptCode(String cptCode);

	/**
	 * Sets the localized cpt code of this procedure master in the language.
	 *
	 * @param cptCode the localized cpt code of this procedure master
	 * @param locale the locale of the language
	 */
	public void setCptCode(String cptCode, Locale locale);

	/**
	 * Sets the localized cpt code of this procedure master in the language, and sets the default locale.
	 *
	 * @param cptCode the localized cpt code of this procedure master
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setCptCode(String cptCode, Locale locale, Locale defaultLocale);

	public void setCptCodeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized cpt codes of this procedure master from the map of locales and localized cpt codes.
	 *
	 * @param cptCodeMap the locales and localized cpt codes of this procedure master
	 */
	public void setCptCodeMap(Map<Locale, String> cptCodeMap);

	/**
	 * Sets the localized cpt codes of this procedure master from the map of locales and localized cpt codes, and sets the default locale.
	 *
	 * @param cptCodeMap the locales and localized cpt codes of this procedure master
	 * @param defaultLocale the default locale
	 */
	public void setCptCodeMap(
		Map<Locale, String> cptCodeMap, Locale defaultLocale);

	/**
	 * Returns the is mandatory of this procedure master.
	 *
	 * @return the is mandatory of this procedure master
	 */
	public boolean getIsMandatory();

	/**
	 * Returns <code>true</code> if this procedure master is is mandatory.
	 *
	 * @return <code>true</code> if this procedure master is is mandatory; <code>false</code> otherwise
	 */
	public boolean isIsMandatory();

	/**
	 * Sets whether this procedure master is is mandatory.
	 *
	 * @param isMandatory the is mandatory of this procedure master
	 */
	public void setIsMandatory(boolean isMandatory);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public ProcedureMaster cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}