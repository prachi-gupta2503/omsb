/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.omsb.tms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the RotationCompetenciesRequirementsRel service. Represents a row in the &quot;rotation_competencies_requirements_rel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>gov.omsb.tms.model.impl.RotationCompetenciesRequirementsRelModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>gov.omsb.tms.model.impl.RotationCompetenciesRequirementsRelImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RotationCompetenciesRequirementsRel
 * @generated
 */
@ProviderType
public interface RotationCompetenciesRequirementsRelModel
	extends BaseModel<RotationCompetenciesRequirementsRel>, LocalizedModel,
			ShardedModel, StagedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a rotation competencies requirements rel model instance should use the {@link RotationCompetenciesRequirementsRel} interface instead.
	 */

	/**
	 * Returns the primary key of this rotation competencies requirements rel.
	 *
	 * @return the primary key of this rotation competencies requirements rel
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this rotation competencies requirements rel.
	 *
	 * @param primaryKey the primary key of this rotation competencies requirements rel
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this rotation competencies requirements rel.
	 *
	 * @return the uuid of this rotation competencies requirements rel
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this rotation competencies requirements rel.
	 *
	 * @param uuid the uuid of this rotation competencies requirements rel
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the rotation competencies rel ID of this rotation competencies requirements rel.
	 *
	 * @return the rotation competencies rel ID of this rotation competencies requirements rel
	 */
	public long getRotationCompetenciesRelId();

	/**
	 * Sets the rotation competencies rel ID of this rotation competencies requirements rel.
	 *
	 * @param rotationCompetenciesRelId the rotation competencies rel ID of this rotation competencies requirements rel
	 */
	public void setRotationCompetenciesRelId(long rotationCompetenciesRelId);

	/**
	 * Returns the prog duration ID of this rotation competencies requirements rel.
	 *
	 * @return the prog duration ID of this rotation competencies requirements rel
	 */
	public long getProgDurationId();

	/**
	 * Sets the prog duration ID of this rotation competencies requirements rel.
	 *
	 * @param progDurationId the prog duration ID of this rotation competencies requirements rel
	 */
	public void setProgDurationId(long progDurationId);

	/**
	 * Returns the rotation ID of this rotation competencies requirements rel.
	 *
	 * @return the rotation ID of this rotation competencies requirements rel
	 */
	public long getRotationId();

	/**
	 * Sets the rotation ID of this rotation competencies requirements rel.
	 *
	 * @param rotationId the rotation ID of this rotation competencies requirements rel
	 */
	public void setRotationId(long rotationId);

	/**
	 * Returns the competencies master ID of this rotation competencies requirements rel.
	 *
	 * @return the competencies master ID of this rotation competencies requirements rel
	 */
	public long getCompetenciesMasterId();

	/**
	 * Sets the competencies master ID of this rotation competencies requirements rel.
	 *
	 * @param competenciesMasterId the competencies master ID of this rotation competencies requirements rel
	 */
	public void setCompetenciesMasterId(long competenciesMasterId);

	/**
	 * Returns the group ID of this rotation competencies requirements rel.
	 *
	 * @return the group ID of this rotation competencies requirements rel
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this rotation competencies requirements rel.
	 *
	 * @param groupId the group ID of this rotation competencies requirements rel
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this rotation competencies requirements rel.
	 *
	 * @return the company ID of this rotation competencies requirements rel
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this rotation competencies requirements rel.
	 *
	 * @param companyId the company ID of this rotation competencies requirements rel
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this rotation competencies requirements rel.
	 *
	 * @return the create date of this rotation competencies requirements rel
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this rotation competencies requirements rel.
	 *
	 * @param createDate the create date of this rotation competencies requirements rel
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this rotation competencies requirements rel.
	 *
	 * @return the modified date of this rotation competencies requirements rel
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this rotation competencies requirements rel.
	 *
	 * @param modifiedDate the modified date of this rotation competencies requirements rel
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the requirements of this rotation competencies requirements rel.
	 *
	 * @return the requirements of this rotation competencies requirements rel
	 */
	public String getRequirements();

	/**
	 * Returns the localized requirements of this rotation competencies requirements rel in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized requirements of this rotation competencies requirements rel
	 */
	@AutoEscape
	public String getRequirements(Locale locale);

	/**
	 * Returns the localized requirements of this rotation competencies requirements rel in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized requirements of this rotation competencies requirements rel. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRequirements(Locale locale, boolean useDefault);

	/**
	 * Returns the localized requirements of this rotation competencies requirements rel in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized requirements of this rotation competencies requirements rel
	 */
	@AutoEscape
	public String getRequirements(String languageId);

	/**
	 * Returns the localized requirements of this rotation competencies requirements rel in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized requirements of this rotation competencies requirements rel
	 */
	@AutoEscape
	public String getRequirements(String languageId, boolean useDefault);

	@AutoEscape
	public String getRequirementsCurrentLanguageId();

	@AutoEscape
	public String getRequirementsCurrentValue();

	/**
	 * Returns a map of the locales and localized requirementses of this rotation competencies requirements rel.
	 *
	 * @return the locales and localized requirementses of this rotation competencies requirements rel
	 */
	public Map<Locale, String> getRequirementsMap();

	/**
	 * Sets the requirements of this rotation competencies requirements rel.
	 *
	 * @param requirements the requirements of this rotation competencies requirements rel
	 */
	public void setRequirements(String requirements);

	/**
	 * Sets the localized requirements of this rotation competencies requirements rel in the language.
	 *
	 * @param requirements the localized requirements of this rotation competencies requirements rel
	 * @param locale the locale of the language
	 */
	public void setRequirements(String requirements, Locale locale);

	/**
	 * Sets the localized requirements of this rotation competencies requirements rel in the language, and sets the default locale.
	 *
	 * @param requirements the localized requirements of this rotation competencies requirements rel
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRequirements(
		String requirements, Locale locale, Locale defaultLocale);

	public void setRequirementsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized requirementses of this rotation competencies requirements rel from the map of locales and localized requirementses.
	 *
	 * @param requirementsMap the locales and localized requirementses of this rotation competencies requirements rel
	 */
	public void setRequirementsMap(Map<Locale, String> requirementsMap);

	/**
	 * Sets the localized requirementses of this rotation competencies requirements rel from the map of locales and localized requirementses, and sets the default locale.
	 *
	 * @param requirementsMap the locales and localized requirementses of this rotation competencies requirements rel
	 * @param defaultLocale the default locale
	 */
	public void setRequirementsMap(
		Map<Locale, String> requirementsMap, Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public RotationCompetenciesRequirementsRel cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}