"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const imports_1 = require("liferay-npm-build-tools-common/lib/imports");
const ns = __importStar(require("liferay-npm-build-tools-common/lib/namespace"));
/**
 * @return {void}
 */
function default_1({ config, globalConfig, log, rootPkgJson }, { pkgJson }) {
    let imports = config.imports || globalConfig.imports || {};
    imports = imports_1.normalizeImportsConfig(imports);
    pkgJson.dependencies = pkgJson.dependencies || {};
    Object.keys(imports).forEach((namespace) => {
        // Don't import third party deps from ourselves
        if (namespace === rootPkgJson.name) {
            return;
        }
        Object.keys(imports[namespace]).forEach((pkgName) => {
            // Don't import ourselves
            if (namespace === '' && pkgName === rootPkgJson.name) {
                return;
            }
            const localName = ns.addNamespace(pkgName, rootPkgJson);
            const importVersion = imports[namespace][pkgName];
            const importName = namespace === ''
                ? pkgName
                : ns.addNamespace(pkgName, { name: namespace });
            pkgJson.dependencies[importName] = importVersion;
            if (pkgJson.dependencies[localName] !== undefined &&
                pkgJson.dependencies[localName] !== importVersion) {
                log.info('inject-imports-dependencies', 'Injected dependency', `${importName}@${importVersion}`, '(however, note that the same dependency in package.json', 'has different constraints:', `${localName}@${pkgJson.dependencies[localName]})`);
            }
            else {
                log.info('inject-imports-dependencies', 'Injected dependency', `${importName}@${importVersion}`);
            }
        });
    });
}
exports.default = default_1;
